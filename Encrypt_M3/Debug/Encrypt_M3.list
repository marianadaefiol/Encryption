
Encrypt_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004760  08004760  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004760  08004760  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000007c  080047e4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080047e4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000987e  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cea  00000000  00000000  00029966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bc  00000000  00000000  0002c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176b9  00000000  00000000  0002c80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf8a  00000000  00000000  00043ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000847ea  00000000  00000000  00050e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c14  00000000  00000000  000d563c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d8250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080041d4 	.word	0x080041d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080041d4 	.word	0x080041d4

0800014c <atCRC>:
uint8_t CRC_LSB = 0x00;
uint8_t CRC_MSB = 0x00;


void atCRC(uint8_t *data, uint8_t size, uint8_t *crc_le)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]
    uint8_t counter;
    uint16_t crc_register = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	83bb      	strh	r3, [r7, #28]
    uint16_t polynom = 0x8005;
 800015e:	f248 0305 	movw	r3, #32773	; 0x8005
 8000162:	833b      	strh	r3, [r7, #24]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 1; counter < (size - 2); counter++)
 8000164:	2301      	movs	r3, #1
 8000166:	77fb      	strb	r3, [r7, #31]
 8000168:	e027      	b.n	80001ba <atCRC+0x6e>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 800016a:	2301      	movs	r3, #1
 800016c:	76fb      	strb	r3, [r7, #27]
 800016e:	e01e      	b.n	80001ae <atCRC+0x62>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 8000170:	7ffb      	ldrb	r3, [r7, #31]
 8000172:	68fa      	ldr	r2, [r7, #12]
 8000174:	4413      	add	r3, r2
 8000176:	781a      	ldrb	r2, [r3, #0]
 8000178:	7efb      	ldrb	r3, [r7, #27]
 800017a:	4013      	ands	r3, r2
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b00      	cmp	r3, #0
 8000180:	bf14      	ite	ne
 8000182:	2301      	movne	r3, #1
 8000184:	2300      	moveq	r3, #0
 8000186:	b2db      	uxtb	r3, r3
 8000188:	75fb      	strb	r3, [r7, #23]
            crc_bit = crc_register >> 15;
 800018a:	8bbb      	ldrh	r3, [r7, #28]
 800018c:	0bdb      	lsrs	r3, r3, #15
 800018e:	b29b      	uxth	r3, r3
 8000190:	75bb      	strb	r3, [r7, #22]
            crc_register <<= 1;
 8000192:	8bbb      	ldrh	r3, [r7, #28]
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	83bb      	strh	r3, [r7, #28]
            if (data_bit != crc_bit)
 8000198:	7dfa      	ldrb	r2, [r7, #23]
 800019a:	7dbb      	ldrb	r3, [r7, #22]
 800019c:	429a      	cmp	r2, r3
 800019e:	d003      	beq.n	80001a8 <atCRC+0x5c>
            {
                crc_register ^= polynom;
 80001a0:	8bba      	ldrh	r2, [r7, #28]
 80001a2:	8b3b      	ldrh	r3, [r7, #24]
 80001a4:	4053      	eors	r3, r2
 80001a6:	83bb      	strh	r3, [r7, #28]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80001a8:	7efb      	ldrb	r3, [r7, #27]
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	76fb      	strb	r3, [r7, #27]
 80001ae:	7efb      	ldrb	r3, [r7, #27]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d1dd      	bne.n	8000170 <atCRC+0x24>
    for (counter = 1; counter < (size - 2); counter++)
 80001b4:	7ffb      	ldrb	r3, [r7, #31]
 80001b6:	3301      	adds	r3, #1
 80001b8:	77fb      	strb	r3, [r7, #31]
 80001ba:	7ffa      	ldrb	r2, [r7, #31]
 80001bc:	7afb      	ldrb	r3, [r7, #11]
 80001be:	3b02      	subs	r3, #2
 80001c0:	429a      	cmp	r2, r3
 80001c2:	dbd2      	blt.n	800016a <atCRC+0x1e>
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
 80001c4:	8bbb      	ldrh	r3, [r7, #28]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
 80001cc:	8bbb      	ldrh	r3, [r7, #28]
 80001ce:	0a1b      	lsrs	r3, r3, #8
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3301      	adds	r3, #1
 80001d6:	b2d2      	uxtb	r2, r2
 80001d8:	701a      	strb	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	3724      	adds	r7, #36	; 0x24
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <WakeUp>:


void WakeUp(uint8_t *receiv){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af02      	add	r7, sp, #8
 80001ea:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Receive(&hi2c2, 0xFE, &data, sizeof(data), 1000);
 80001f0:	f107 020f 	add.w	r2, r7, #15
 80001f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2301      	movs	r3, #1
 80001fc:	21fe      	movs	r1, #254	; 0xfe
 80001fe:	4818      	ldr	r0, [pc, #96]	; (8000260 <WakeUp+0x7c>)
 8000200:	f002 f8c6 	bl	8002390 <HAL_I2C_Master_Receive>
	HAL_Delay(5); // 2.5 ms para acordar; 45 ms para entrar em sleep
 8000204:	2005      	movs	r0, #5
 8000206:	f001 fb55 	bl	80018b4 <HAL_Delay>
	// first read: 0 byte read - should receive an ACK

	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, &data, 1, 1000);
 800020a:	f107 020f 	add.w	r2, r7, #15
 800020e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2301      	movs	r3, #1
 8000216:	21c8      	movs	r1, #200	; 0xc8
 8000218:	4811      	ldr	r0, [pc, #68]	; (8000260 <WakeUp+0x7c>)
 800021a:	f002 f8b9 	bl	8002390 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 800021e:	2005      	movs	r0, #5
 8000220:	f001 fb48 	bl	80018b4 <HAL_Delay>

	// Read 88bytes
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, &data, sizeof(data), 1000);	// Send 1 byte
 8000224:	f107 020f 	add.w	r2, r7, #15
 8000228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2301      	movs	r3, #1
 8000230:	21c8      	movs	r1, #200	; 0xc8
 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <WakeUp+0x7c>)
 8000234:	f001 ffae 	bl	8002194 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000238:	2005      	movs	r0, #5
 800023a:	f001 fb3b 	bl	80018b4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, 4, 1000); 		    	// Receiv: 0x04, 0x11, 0x33, 0x43.
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	2304      	movs	r3, #4
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	21c8      	movs	r1, #200	; 0xc8
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <WakeUp+0x7c>)
 800024c:	f002 f8a0 	bl	8002390 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000250:	2005      	movs	r0, #5
 8000252:	f001 fb2f 	bl	80018b4 <HAL_Delay>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000098 	.word	0x20000098

08000264 <ReadConfig>:


void ReadConfig(uint8_t *data, uint16_t size, uint8_t *receiv) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af02      	add	r7, sp, #8
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	460b      	mov	r3, r1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, data, 8, 1000); 		    // Send read command
 8000272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2308      	movs	r3, #8
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	480b      	ldr	r0, [pc, #44]	; (80002ac <ReadConfig+0x48>)
 8000280:	f001 ff88 	bl	8002194 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000284:	2005      	movs	r0, #5
 8000286:	f001 fb15 	bl	80018b4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000); 	    // Receive: data packet size, 0x01 0x23..., CRC_LSB, CRC_MSB
 800028a:	897b      	ldrh	r3, [r7, #10]
 800028c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000290:	9200      	str	r2, [sp, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	21c8      	movs	r1, #200	; 0xc8
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <ReadConfig+0x48>)
 8000298:	f002 f87a 	bl	8002390 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 800029c:	2005      	movs	r0, #5
 800029e:	f001 fb09 	bl	80018b4 <HAL_Delay>
}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000098 	.word	0x20000098

080002b0 <CommandNonce>:
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
	HAL_Delay(5);
}


void CommandNonce(uint8_t *NumIn, uint16_t size, uint8_t *receiv){ //OK
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	460b      	mov	r3, r1
 80002ba:	607a      	str	r2, [r7, #4]
 80002bc:	817b      	strh	r3, [r7, #10]

	// NONCE command: {COMMAND, COUNT, OPCODE, Param1_mode, 0x00, 0x00, NumIn[20], CRC_LSB, CRC_MSB}
	uint8_t noncecommand[28]; //40
	uint8_t CRC_receiv[2];

    noncecommand[0] = COMMAND;
 80002be:	2303      	movs	r3, #3
 80002c0:	763b      	strb	r3, [r7, #24]
    noncecommand[1] = SIZE_WRITE_NONCE20; //SIZE_WRITE_NONCE32;
 80002c2:	231b      	movs	r3, #27
 80002c4:	767b      	strb	r3, [r7, #25]
    noncecommand[2] = COMMAND_NONCE;
 80002c6:	2316      	movs	r3, #22
 80002c8:	76bb      	strb	r3, [r7, #26]
    noncecommand[3] = 0x00; // modo3
 80002ca:	2300      	movs	r3, #0
 80002cc:	76fb      	strb	r3, [r7, #27]
    noncecommand[4] = 0x00;
 80002ce:	2300      	movs	r3, #0
 80002d0:	773b      	strb	r3, [r7, #28]
    noncecommand[5] = 0x00;
 80002d2:	2300      	movs	r3, #0
 80002d4:	777b      	strb	r3, [r7, #29]

	for(uint8_t i = 0; i <= 20; i++){  // <=32
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002dc:	e010      	b.n	8000300 <CommandNonce+0x50>
		 noncecommand[6 + i] = NumIn[i];
 80002de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	441a      	add	r2, r3
 80002e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002ea:	3306      	adds	r3, #6
 80002ec:	7812      	ldrb	r2, [r2, #0]
 80002ee:	3338      	adds	r3, #56	; 0x38
 80002f0:	443b      	add	r3, r7
 80002f2:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(uint8_t i = 0; i <= 20; i++){  // <=32
 80002f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002fa:	3301      	adds	r3, #1
 80002fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000304:	2b14      	cmp	r3, #20
 8000306:	d9ea      	bls.n	80002de <CommandNonce+0x2e>
	}

	atCRC(noncecommand,sizeof(noncecommand), CRC_receiv);
 8000308:	f107 0214 	add.w	r2, r7, #20
 800030c:	f107 0318 	add.w	r3, r7, #24
 8000310:	211c      	movs	r1, #28
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff1a 	bl	800014c <atCRC>
	noncecommand[sizeof(noncecommand) - 2] = CRC_receiv[0] ;
 8000318:	7d3b      	ldrb	r3, [r7, #20]
 800031a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	noncecommand[sizeof(noncecommand) - 1] = CRC_receiv[1] ;
 800031e:	7d7b      	ldrb	r3, [r7, #21]
 8000320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, noncecommand, sizeof(noncecommand), 1000);
 8000324:	f107 0218 	add.w	r2, r7, #24
 8000328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	231c      	movs	r3, #28
 8000330:	21c8      	movs	r1, #200	; 0xc8
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <CommandNonce+0xb0>)
 8000334:	f001 ff2e 	bl	8002194 <HAL_I2C_Master_Transmit>
	HAL_Delay(40);
 8000338:	2028      	movs	r0, #40	; 0x28
 800033a:	f001 fabb 	bl	80018b4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 800033e:	897b      	ldrh	r3, [r7, #10]
 8000340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	21c8      	movs	r1, #200	; 0xc8
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <CommandNonce+0xb0>)
 800034c:	f002 f820 	bl	8002390 <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 8000350:	200a      	movs	r0, #10
 8000352:	f001 faaf 	bl	80018b4 <HAL_Delay>
}
 8000356:	bf00      	nop
 8000358:	3738      	adds	r7, #56	; 0x38
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000098 	.word	0x20000098

08000364 <GendigCommand>:


void GendigCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t size, uint8_t *receiv){
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af02      	add	r7, sp, #8
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	4603      	mov	r3, r0
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	460b      	mov	r3, r1
 8000372:	71bb      	strb	r3, [r7, #6]
 8000374:	4613      	mov	r3, r2
 8000376:	717b      	strb	r3, [r7, #5]
	uint8_t GenDig[8];
	uint8_t CRC_receiv[2];
	//{COMMAND, SIZE_WRITE_GENDIG, COMMAND_GENDIG, ZONE_DATA, SlotID_LSB, SlotID_MSB, /*0x33, 0xe8*/ 0x00, 0x00};
	//atCRC(GenDig,sizeof(GenDig));

	GenDig[0] = COMMAND;
 8000378:	2303      	movs	r3, #3
 800037a:	743b      	strb	r3, [r7, #16]
	GenDig[1] = SIZE_WRITE_GENDIG;
 800037c:	2307      	movs	r3, #7
 800037e:	747b      	strb	r3, [r7, #17]
	GenDig[2] = COMMAND_GENDIG;
 8000380:	2315      	movs	r3, #21
 8000382:	74bb      	strb	r3, [r7, #18]
	GenDig[3] = ZONE_DATA;
 8000384:	2302      	movs	r3, #2
 8000386:	74fb      	strb	r3, [r7, #19]
	GenDig[4] = SlotID_LSB;
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	753b      	strb	r3, [r7, #20]
	GenDig[5] = SlotID_MSB;
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	757b      	strb	r3, [r7, #21]

	atCRC(GenDig,sizeof(GenDig), CRC_receiv);
 8000390:	f107 020c 	add.w	r2, r7, #12
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2108      	movs	r1, #8
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fed6 	bl	800014c <atCRC>
	GenDig[6] = CRC_receiv[0] ;
 80003a0:	7b3b      	ldrb	r3, [r7, #12]
 80003a2:	75bb      	strb	r3, [r7, #22]
	GenDig[7] = CRC_receiv[1] ;
 80003a4:	7b7b      	ldrb	r3, [r7, #13]
 80003a6:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, GenDig, sizeof(GenDig), 1000);
 80003a8:	f107 0210 	add.w	r2, r7, #16
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2308      	movs	r3, #8
 80003b4:	21c8      	movs	r1, #200	; 0xc8
 80003b6:	480b      	ldr	r0, [pc, #44]	; (80003e4 <GendigCommand+0x80>)
 80003b8:	f001 feec 	bl	8002194 <HAL_I2C_Master_Transmit>
	HAL_Delay(30);
 80003bc:	201e      	movs	r0, #30
 80003be:	f001 fa79 	bl	80018b4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 80003c2:	797b      	ldrb	r3, [r7, #5]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	21c8      	movs	r1, #200	; 0xc8
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <GendigCommand+0x80>)
 80003d2:	f001 ffdd 	bl	8002390 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80003d6:	2005      	movs	r0, #5
 80003d8:	f001 fa6c 	bl	80018b4 <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000098 	.word	0x20000098

080003e8 <MacCommand>:

void MacCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint16_t size, uint8_t *receiv){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b098      	sub	sp, #96	; 0x60
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	4603      	mov	r3, r0
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	460b      	mov	r3, r1
 80003f6:	71bb      	strb	r3, [r7, #6]
 80003f8:	4613      	mov	r3, r2
 80003fa:	80bb      	strh	r3, [r7, #4]

	uint8_t  MAC[40];
	uint8_t CRC_receiv[2];

	uint8_t Challenge [32] = {0x00 };
 80003fc:	2300      	movs	r3, #0
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]
 8000412:	619a      	str	r2, [r3, #24]

	 MAC[0]= COMMAND;
 8000414:	2303      	movs	r3, #3
 8000416:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 MAC[1]= 0x27; 	//size 0x27
 800041a:	2327      	movs	r3, #39	; 0x27
 800041c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	 MAC[2]= COMMAND_MAC;
 8000420:	2308      	movs	r3, #8
 8000422:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	 MAC[3]= 0x06 ; 	//mode 0x01
 8000426:	2306      	movs	r3, #6
 8000428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 MAC[4]= SlotID_LSB;
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	 MAC[5]= SlotID_MSB;
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	for(uint8_t i = 0; i <= 32; i++){
 8000438:	2300      	movs	r3, #0
 800043a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800043e:	e011      	b.n	8000464 <MacCommand+0x7c>
		MAC[6 + i] = Challenge[i];
 8000440:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000448:	3306      	adds	r3, #6
 800044a:	3258      	adds	r2, #88	; 0x58
 800044c:	443a      	add	r2, r7
 800044e:	f812 2c50 	ldrb.w	r2, [r2, #-80]
 8000452:	3358      	adds	r3, #88	; 0x58
 8000454:	443b      	add	r3, r7
 8000456:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for(uint8_t i = 0; i <= 32; i++){
 800045a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800045e:	3301      	adds	r3, #1
 8000460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000468:	2b20      	cmp	r3, #32
 800046a:	d9e9      	bls.n	8000440 <MacCommand+0x58>
	}

	atCRC(MAC, sizeof(MAC), CRC_receiv);
 800046c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000474:	2128      	movs	r1, #40	; 0x28
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff fe68 	bl	800014c <atCRC>
	MAC[sizeof(MAC) - 2] = CRC_receiv[0] ;
 800047c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000480:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	MAC[sizeof(MAC) - 1] = CRC_receiv[1] ;
 8000484:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000488:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, MAC, sizeof(MAC), 1000);
 800048c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2328      	movs	r3, #40	; 0x28
 8000498:	21c8      	movs	r1, #200	; 0xc8
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <MacCommand+0xe0>)
 800049c:	f001 fe7a 	bl	8002194 <HAL_I2C_Master_Transmit>
	HAL_Delay(35);
 80004a0:	2023      	movs	r0, #35	; 0x23
 80004a2:	f001 fa07 	bl	80018b4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 80004a6:	88bb      	ldrh	r3, [r7, #4]
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	683a      	ldr	r2, [r7, #0]
 80004b0:	21c8      	movs	r1, #200	; 0xc8
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MacCommand+0xe0>)
 80004b4:	f001 ff6c 	bl	8002390 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80004b8:	2005      	movs	r0, #5
 80004ba:	f001 f9fb 	bl	80018b4 <HAL_Delay>
}
 80004be:	bf00      	nop
 80004c0:	3758      	adds	r7, #88	; 0x58
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000098 	.word	0x20000098

080004cc <CheckMacCommand>:


void CheckMacCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t *ClientResp, uint16_t size, uint8_t *receiv) {
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b0a9      	sub	sp, #164	; 0xa4
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	603a      	str	r2, [r7, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	460b      	mov	r3, r1
 80004dc:	71bb      	strb	r3, [r7, #6]
 80004de:	4613      	mov	r3, r2
 80004e0:	80bb      	strh	r3, [r7, #4]
    uint8_t CheckMAC[85] = {0};
 80004e2:	2300      	movs	r3, #0
 80004e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80004e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004ea:	2251      	movs	r2, #81	; 0x51
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fe1e 	bl	8004130 <memset>
    uint8_t CRC_receiv[2];
    uint8_t size_att = 0; // Inicializado para 0
 80004f4:	2300      	movs	r3, #0
 80004f6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    uint8_t ClientChal[32] = {0x00};
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]
 800050e:	615a      	str	r2, [r3, #20]
 8000510:	619a      	str	r2, [r3, #24]
    uint8_t OtherData[13] = {0x08, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000512:	4b49      	ldr	r3, [pc, #292]	; (8000638 <CheckMacCommand+0x16c>)
 8000514:	f107 0408 	add.w	r4, r7, #8
 8000518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800051a:	c407      	stmia	r4!, {r0, r1, r2}
 800051c:	7023      	strb	r3, [r4, #0]

    CheckMAC[0] = 0x03;
 800051e:	2303      	movs	r3, #3
 8000520:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    CheckMAC[1] = 0x54;
 8000524:	2354      	movs	r3, #84	; 0x54
 8000526:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    CheckMAC[2] = COMMAND_CHECKMAC;
 800052a:	2328      	movs	r3, #40	; 0x28
 800052c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    CheckMAC[3] = 0x01;    // mode
 8000530:	2301      	movs	r3, #1
 8000532:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    CheckMAC[4] = SlotID_LSB;
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    CheckMAC[5] = SlotID_MSB;
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            size_att++;
        }
      }
 */

    for (uint8_t i = 0; i <32; i++) {
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000548:	e011      	b.n	800056e <CheckMacCommand+0xa2>
            CheckMAC[6 + i] = ClientChal[i];
 800054a:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800054e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000552:	3306      	adds	r3, #6
 8000554:	3298      	adds	r2, #152	; 0x98
 8000556:	443a      	add	r2, r7
 8000558:	f812 2c80 	ldrb.w	r2, [r2, #-128]
 800055c:	3398      	adds	r3, #152	; 0x98
 800055e:	443b      	add	r3, r7
 8000560:	f803 2c5c 	strb.w	r2, [r3, #-92]
    for (uint8_t i = 0; i <32; i++) {
 8000564:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000568:	3301      	adds	r3, #1
 800056a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800056e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000572:	2b1f      	cmp	r3, #31
 8000574:	d9e9      	bls.n	800054a <CheckMacCommand+0x7e>
    }
    for (uint8_t i = 0; i <32; i++) {
 8000576:	2300      	movs	r3, #0
 8000578:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800057c:	e010      	b.n	80005a0 <CheckMacCommand+0xd4>
            CheckMAC[6+32+i] = ClientResp[i];
 800057e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	441a      	add	r2, r3
 8000586:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800058a:	3326      	adds	r3, #38	; 0x26
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	3398      	adds	r3, #152	; 0x98
 8000590:	443b      	add	r3, r7
 8000592:	f803 2c5c 	strb.w	r2, [r3, #-92]
    for (uint8_t i = 0; i <32; i++) {
 8000596:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800059a:	3301      	adds	r3, #1
 800059c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80005a0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80005a4:	2b1f      	cmp	r3, #31
 80005a6:	d9ea      	bls.n	800057e <CheckMacCommand+0xb2>
    }
    for (uint8_t i = 0; i <13; i++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80005ae:	e011      	b.n	80005d4 <CheckMacCommand+0x108>
            CheckMAC[6+64+i] = OtherData[i];
 80005b0:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80005b4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80005b8:	3346      	adds	r3, #70	; 0x46
 80005ba:	3298      	adds	r2, #152	; 0x98
 80005bc:	443a      	add	r2, r7
 80005be:	f812 2c90 	ldrb.w	r2, [r2, #-144]
 80005c2:	3398      	adds	r3, #152	; 0x98
 80005c4:	443b      	add	r3, r7
 80005c6:	f803 2c5c 	strb.w	r2, [r3, #-92]
    for (uint8_t i = 0; i <13; i++) {
 80005ca:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80005ce:	3301      	adds	r3, #1
 80005d0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80005d4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80005d8:	2b0c      	cmp	r3, #12
 80005da:	d9e9      	bls.n	80005b0 <CheckMacCommand+0xe4>
    }

    atCRC(CheckMAC, sizeof(CheckMAC), CRC_receiv);
 80005dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80005e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005e4:	2155      	movs	r1, #85	; 0x55
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fdb0 	bl	800014c <atCRC>
    CheckMAC[sizeof(CheckMAC) - 2] = CRC_receiv[0];
 80005ec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80005f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    CheckMAC[sizeof(CheckMAC) - 1] = CRC_receiv[1];
 80005f4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80005f8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, CheckMAC, sizeof(CheckMAC), 1000);
 80005fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2355      	movs	r3, #85	; 0x55
 8000608:	21c8      	movs	r1, #200	; 0xc8
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <CheckMacCommand+0x170>)
 800060c:	f001 fdc2 	bl	8002194 <HAL_I2C_Master_Transmit>
    HAL_Delay(40);
 8000610:	2028      	movs	r0, #40	; 0x28
 8000612:	f001 f94f 	bl	80018b4 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 8000616:	88bb      	ldrh	r3, [r7, #4]
 8000618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8000622:	21c8      	movs	r1, #200	; 0xc8
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <CheckMacCommand+0x170>)
 8000626:	f001 feb3 	bl	8002390 <HAL_I2C_Master_Receive>
    HAL_Delay(5);
 800062a:	2005      	movs	r0, #5
 800062c:	f001 f942 	bl	80018b4 <HAL_Delay>
}
 8000630:	bf00      	nop
 8000632:	379c      	adds	r7, #156	; 0x9c
 8000634:	46bd      	mov	sp, r7
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	08004490 	.word	0x08004490
 800063c:	20000098 	.word	0x20000098

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8000646:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000648:	f001 f8d2 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 fa2e 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 facc 	bl	8000bec <MX_GPIO_Init>
  MX_USART1_Init();
 8000654:	f000 fa9e 	bl	8000b94 <MX_USART1_Init>
  MX_I2C2_Init();
 8000658:	f000 fa6e 	bl	8000b38 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  uint8_t readCommand0[8] = {0x03, 0x07, 0x02, 0x80, 0x00, 0x00, 0x09, 0xAD};
 800065c:	4ac1      	ldr	r2, [pc, #772]	; (8000964 <main+0x324>)
 800065e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8000662:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000666:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand1[8] = {0x03, 0x07, 0x02, 0x80, 0x08, 0x00, 0x0a, 0x4d};
 800066a:	4abf      	ldr	r2, [pc, #764]	; (8000968 <main+0x328>)
 800066c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000674:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand2[8] = {0x03, 0x07, 0x02, 0x00, 0x10, 0x00, 0x1d, 0x9d};
 8000678:	4abc      	ldr	r2, [pc, #752]	; (800096c <main+0x32c>)
 800067a:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800067e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000682:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand3[8] = {0x03, 0x07, 0x02, 0x00, 0x11, 0x00, 0x14, 0x1d};
 8000686:	4aba      	ldr	r2, [pc, #744]	; (8000970 <main+0x330>)
 8000688:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800068c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000690:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand4[8] = {0x03, 0x07, 0x02, 0x00, 0x12, 0x00, 0x1b, 0x1d};
 8000694:	4ab7      	ldr	r2, [pc, #732]	; (8000974 <main+0x334>)
 8000696:	f507 7342 	add.w	r3, r7, #776	; 0x308
 800069a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand5[8] = {0x03, 0x07, 0x02, 0x00, 0x13, 0x00, 0x12, 0x9d};
 80006a2:	4ab5      	ldr	r2, [pc, #724]	; (8000978 <main+0x338>)
 80006a4:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80006a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ac:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand6[8] = {0x03, 0x07, 0x02, 0x00, 0x14, 0x00, 0x1e, 0xdd};
 80006b0:	4ab2      	ldr	r2, [pc, #712]	; (800097c <main+0x33c>)
 80006b2:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand7[8] = {0x03, 0x07, 0x02, 0x00, 0x15, 0x00, 0x17, 0x5d};
 80006be:	4ab0      	ldr	r2, [pc, #704]	; (8000980 <main+0x340>)
 80006c0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t LOBBYKEY_2[8] =		 {0x03, 0x07, 0x02,  0x82, 0x20, 0x00, 0x09, 0xb0};
 80006cc:	4aad      	ldr	r2, [pc, #692]	; (8000984 <main+0x344>)
 80006ce:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80006d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t SECRET_KEY[8] =	{0x03, 0x07, 0x02,  0x82, 0x08, 0x00, 0x09, 0xc8};
 80006da:	4aab      	ldr	r2, [pc, #684]	; (8000988 <main+0x348>)
 80006dc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80006e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e4:	e883 0003 	stmia.w	r3, {r0, r1}
  // NONCE
  uint8_t NumIn[20] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
 80006e8:	4ba8      	ldr	r3, [pc, #672]	; (800098c <main+0x34c>)
 80006ea:	f507 7433 	add.w	r4, r7, #716	; 0x2cc
 80006ee:	461d      	mov	r5, r3
 80006f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f4:	682b      	ldr	r3, [r5, #0]
 80006f6:	6023      	str	r3, [r4, #0]
		  	  	  	  	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
						// 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
						//  0x00, 0x01};
  uint8_t slot0[32] =	{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
 80006f8:	4ba5      	ldr	r3, [pc, #660]	; (8000990 <main+0x350>)
 80006fa:	f507 742b 	add.w	r4, r7, #684	; 0x2ac
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slot2[32] =	{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29};
 800070c:	4ba1      	ldr	r3, [pc, #644]	; (8000994 <main+0x354>)
 800070e:	f507 7423 	add.w	r4, r7, #652	; 0x28c
 8000712:	461d      	mov	r5, r3
 8000714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000718:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800071c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slot4[32] =	{0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44,  0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49};
 8000720:	4b9d      	ldr	r3, [pc, #628]	; (8000998 <main+0x358>)
 8000722:	f507 741b 	add.w	r4, r7, #620	; 0x26c
 8000726:	461d      	mov	r5, r3
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slotf[] = 		{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4,  0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9};
 8000734:	4b99      	ldr	r3, [pc, #612]	; (800099c <main+0x35c>)
 8000736:	f507 7413 	add.w	r4, r7, #588	; 0x24c
 800073a:	461d      	mov	r5, r3
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000740:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slot5[] =		{0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54,  0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};
 8000748:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800074c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000750:	4a93      	ldr	r2, [pc, #588]	; (80009a0 <main+0x360>)
 8000752:	461c      	mov	r4, r3
 8000754:	4615      	mov	r5, r2
 8000756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800075e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t aux[35] = {0};
 8000762:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000766:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	3304      	adds	r3, #4
 8000770:	221f      	movs	r2, #31
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fcdb 	bl	8004130 <memset>
  uint8_t randout[35] = {0};
 800077a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800077e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	3304      	adds	r3, #4
 8000788:	221f      	movs	r2, #31
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fccf 	bl	8004130 <memset>
  uint8_t tempkey[32] = {0};
 8000792:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000796:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	3304      	adds	r3, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]
  uint8_t DATA_rec[35];

  uint8_t receiv_sha256[35];

  // SHA-256
  uint8_t sha_init[1] = {0};
 80007b0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  uint8_t SHA_receiv[35] = {0};
 80007bc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007c0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	3304      	adds	r3, #4
 80007ca:	221f      	movs	r2, #31
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fcae 	bl	8004130 <memset>

  // GENDIG
  uint8_t gendig_receiv[4] = {0};
 80007d4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007d8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]


  //MAC
  uint8_t MAC_receiv[35] = {0};
 80007e0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	3304      	adds	r3, #4
 80007ee:	221f      	movs	r2, #31
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 fc9c 	bl	8004130 <memset>
  uint8_t gendig_calc[32] = {0};
 80007f8:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007fc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	3304      	adds	r3, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]
  uint8_t MAC_calc[32] = {0};
 8000816:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800081a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	3304      	adds	r3, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	619a      	str	r2, [r3, #24]
  uint8_t CheckMAC_receiv[4] = {0};
 8000834:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000838:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
  uint8_t dado[32] = {0};
 8000840:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000844:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	3304      	adds	r3, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	619a      	str	r2, [r3, #24]


  uint8_t read_byte[4];
  uint8_t receiv_ack[4] = {0};
 800085e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000862:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]

  //uint8_t read_config[32] = {0};
  uint8_t read_config0[35] = {0};
 800086a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800086e:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	3304      	adds	r3, #4
 8000878:	221f      	movs	r2, #31
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 fc57 	bl	8004130 <memset>
  uint8_t read_config1[35] = {0};
 8000882:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000886:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	3304      	adds	r3, #4
 8000890:	221f      	movs	r2, #31
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fc4b 	bl	8004130 <memset>
  uint8_t read_config2[7] = {0};
 800089a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800089e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	3304      	adds	r3, #4
 80008a8:	2100      	movs	r1, #0
 80008aa:	460a      	mov	r2, r1
 80008ac:	801a      	strh	r2, [r3, #0]
 80008ae:	460a      	mov	r2, r1
 80008b0:	709a      	strb	r2, [r3, #2]
  uint8_t read_config3[7] = {0};
 80008b2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008b6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	2100      	movs	r1, #0
 80008c2:	460a      	mov	r2, r1
 80008c4:	801a      	strh	r2, [r3, #0]
 80008c6:	460a      	mov	r2, r1
 80008c8:	709a      	strb	r2, [r3, #2]
  uint8_t read_config4[7] = {0};
 80008ca:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008ce:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	3304      	adds	r3, #4
 80008d8:	2100      	movs	r1, #0
 80008da:	460a      	mov	r2, r1
 80008dc:	801a      	strh	r2, [r3, #0]
 80008de:	460a      	mov	r2, r1
 80008e0:	709a      	strb	r2, [r3, #2]
  uint8_t read_config5[7] = {0};
 80008e2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008e6:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	3304      	adds	r3, #4
 80008f0:	2100      	movs	r1, #0
 80008f2:	460a      	mov	r2, r1
 80008f4:	801a      	strh	r2, [r3, #0]
 80008f6:	460a      	mov	r2, r1
 80008f8:	709a      	strb	r2, [r3, #2]
  uint8_t read_config6[7] = {0};
 80008fa:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008fe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	3304      	adds	r3, #4
 8000908:	2100      	movs	r1, #0
 800090a:	460a      	mov	r2, r1
 800090c:	801a      	strh	r2, [r3, #0]
 800090e:	460a      	mov	r2, r1
 8000910:	709a      	strb	r2, [r3, #2]
  uint8_t read_config7[7] = {0};
 8000912:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000916:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	3304      	adds	r3, #4
 8000920:	2100      	movs	r1, #0
 8000922:	460a      	mov	r2, r1
 8000924:	801a      	strh	r2, [r3, #0]
 8000926:	460a      	mov	r2, r1
 8000928:	709a      	strb	r2, [r3, #2]
  uint8_t read_config8[7] = {0};
 800092a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800092e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	3304      	adds	r3, #4
 8000938:	2100      	movs	r1, #0
 800093a:	460a      	mov	r2, r1
 800093c:	801a      	strh	r2, [r3, #0]
 800093e:	460a      	mov	r2, r1
 8000940:	709a      	strb	r2, [r3, #2]


  uint8_t data[32] = {0x00};
 8000942:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000946:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	3304      	adds	r3, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]
 8000960:	e020      	b.n	80009a4 <main+0x364>
 8000962:	bf00      	nop
 8000964:	080044c8 	.word	0x080044c8
 8000968:	080044d0 	.word	0x080044d0
 800096c:	080044d8 	.word	0x080044d8
 8000970:	080044e0 	.word	0x080044e0
 8000974:	080044e8 	.word	0x080044e8
 8000978:	080044f0 	.word	0x080044f0
 800097c:	080044f8 	.word	0x080044f8
 8000980:	08004500 	.word	0x08004500
 8000984:	08004508 	.word	0x08004508
 8000988:	08004510 	.word	0x08004510
 800098c:	08004518 	.word	0x08004518
 8000990:	0800452c 	.word	0x0800452c
 8000994:	0800454c 	.word	0x0800454c
 8000998:	0800456c 	.word	0x0800456c
 800099c:	0800458c 	.word	0x0800458c
 80009a0:	080045ac 	.word	0x080045ac

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WakeUp(read_byte);
 80009a4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc1b 	bl	80001e4 <WakeUp>
	  //BlockConfigZone(receiv_ack);
	  //WriteDataZone();
	  //WriteOTPZone();
	  //BlockDataZone();

	  ReadConfig(readCommand0, 35, read_config0);
 80009ae:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80009b2:	f507 734a 	add.w	r3, r7, #808	; 0x328
 80009b6:	2123      	movs	r1, #35	; 0x23
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fc53 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand1, 35, read_config1);
 80009be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80009c2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80009c6:	2123      	movs	r1, #35	; 0x23
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fc4b 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand2, 7, read_config2);
 80009ce:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80009d2:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80009d6:	2107      	movs	r1, #7
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fc43 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand3, 7, read_config3);
 80009de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80009e2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80009e6:	2107      	movs	r1, #7
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc3b 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand4, 7, read_config4);
 80009ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80009f2:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80009f6:	2107      	movs	r1, #7
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fc33 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand5, 7, read_config5);
 80009fe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000a02:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8000a06:	2107      	movs	r1, #7
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc2b 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand6, 7, read_config6);
 8000a0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000a12:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000a16:	2107      	movs	r1, #7
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fc23 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand7, 7, read_config7);
 8000a1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000a22:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000a26:	2107      	movs	r1, #7
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fc1b 	bl	8000264 <ReadConfig>

	  CommandNonce(NumIn, 35, randout);
 8000a2e:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8000a32:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8000a36:	2123      	movs	r1, #35	; 0x23
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fc39 	bl	80002b0 <CommandNonce>
	  GendigCommand(0x02, 0x00, 4, gendig_receiv);
 8000a3e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000a42:	2204      	movs	r2, #4
 8000a44:	2100      	movs	r1, #0
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff fc8c 	bl	8000364 <GendigCommand>
	  //SHACommandInit(1, sha_init);
	  //SHACommandCompute(35, SHA_receiv);

	 NonceSHA256Hash(randout, NumIn, tempkey);
 8000a4c:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000a50:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 8000a54:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 fc05 	bl	8001268 <NonceSHA256Hash>
	 GenDigSHA256Hash(slot2, tempkey, gendig_calc);
 8000a5e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000a62:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8000a66:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fc44 	bl	80012f8 <GenDigSHA256Hash>
	 MACSHA256Hash(slot4, gendig_calc, MAC_calc);
 8000a70:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8000a74:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000a78:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fcab 	bl	80013d8 <MACSHA256Hash>
	 CheckMacCommand(0x04, 0x00, MAC_calc, 4, CheckMAC_receiv);
 8000a82:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8000a86:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2004      	movs	r0, #4
 8000a92:	f7ff fd1b 	bl	80004cc <CheckMacCommand>

	  MacCommand(0x02, 0x00, 35, MAC_receiv);
 8000a96:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000a9a:	2223      	movs	r2, #35	; 0x23
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff fca2 	bl	80003e8 <MacCommand>

	 // CommandNonce(NumIn, 35, randout);
	  //GendigCommand(0x02, 0x00, 4, gendig_receiv);
	  //ReadEncript(SECRET_KEY, 35, DATA_rec);

	  HAL_Delay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f000 ff05 	bl	80018b4 <HAL_Delay>
	  WakeUp(read_byte);
 8000aaa:	e77b      	b.n	80009a4 <main+0x364>

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b090      	sub	sp, #64	; 0x40
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0318 	add.w	r3, r7, #24
 8000ab6:	2228      	movs	r2, #40	; 0x28
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fb38 	bl	8004130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 f9d7 	bl	8002ea8 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b00:	f000 f8ae 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fc44 	bl	80033ac <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b2a:	f000 f899 	bl	8000c60 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3740      	adds	r7, #64	; 0x40
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C2_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C2_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C2_Init+0x50>)
 8000b76:	f001 f9c9 	bl	8001f0c <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 f86e 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000098 	.word	0x20000098
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_USART1_Init+0x50>)
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <MX_USART1_Init+0x54>)
 8000b9c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART1_Init+0x50>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USART1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <MX_USART1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_USART1_Init+0x50>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_USART1_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART1_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_USART1_Init+0x50>)
 8000bd2:	f002 fd83 	bl	80036dc <HAL_USART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000bdc:	f000 f840 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000ec 	.word	0x200000ec
 8000be8:	40013800 	.word	0x40013800

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6193      	str	r3, [r2, #24]
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c10:	f043 0320 	orr.w	r3, r3, #32
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <MX_GPIO_Init+0x70>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <sha256_init>:
};

SHA256 ctx;

// Implementação do construtor SHA256::SHA256()
void sha256_init(SHA256 *ctx) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    // Inicialize m_blocklen e m_bitlen
    ctx->m_blocklen = 0;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	669a      	str	r2, [r3, #104]	; 0x68
    ctx->m_bitlen = 0;
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    // Inicialize o estado do hash
    ctx->m_state[0] = 0x6a09e667;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <sha256_init+0x58>)
 8000c8c:	601a      	str	r2, [r3, #0]
    ctx->m_state[1] = 0xbb67ae85;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <sha256_init+0x5c>)
 8000c92:	605a      	str	r2, [r3, #4]
    ctx->m_state[2] = 0x3c6ef372;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <sha256_init+0x60>)
 8000c98:	609a      	str	r2, [r3, #8]
    ctx->m_state[3] = 0xa54ff53a;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <sha256_init+0x64>)
 8000c9e:	60da      	str	r2, [r3, #12]
    ctx->m_state[4] = 0x510e527f;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <sha256_init+0x68>)
 8000ca4:	611a      	str	r2, [r3, #16]
    ctx->m_state[5] = 0x9b05688c;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <sha256_init+0x6c>)
 8000caa:	615a      	str	r2, [r3, #20]
    ctx->m_state[6] = 0x1f83d9ab;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <sha256_init+0x70>)
 8000cb0:	619a      	str	r2, [r3, #24]
    ctx->m_state[7] = 0x5be0cd19;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <sha256_init+0x74>)
 8000cb6:	61da      	str	r2, [r3, #28]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	6a09e667 	.word	0x6a09e667
 8000cc8:	bb67ae85 	.word	0xbb67ae85
 8000ccc:	3c6ef372 	.word	0x3c6ef372
 8000cd0:	a54ff53a 	.word	0xa54ff53a
 8000cd4:	510e527f 	.word	0x510e527f
 8000cd8:	9b05688c 	.word	0x9b05688c
 8000cdc:	1f83d9ab 	.word	0x1f83d9ab
 8000ce0:	5be0cd19 	.word	0x5be0cd19

08000ce4 <sha256_update>:

void sha256_update(SHA256 *ctx, const uint8_t *data, uint8_t length) {
 8000ce4:	b5b0      	push	{r4, r5, r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	71fb      	strb	r3, [r7, #7]
    for (size_t i = 0; i < length; i++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e024      	b.n	8000d42 <sha256_update+0x5e>
        ctx->m_data[ctx->m_blocklen++] = data[i];
 8000cf8:	68ba      	ldr	r2, [r7, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	441a      	add	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d02:	1c58      	adds	r0, r3, #1
 8000d04:	68f9      	ldr	r1, [r7, #12]
 8000d06:	6688      	str	r0, [r1, #104]	; 0x68
 8000d08:	7811      	ldrb	r1, [r2, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	460a      	mov	r2, r1
 8000d10:	f883 2020 	strb.w	r2, [r3, #32]
        if (ctx->m_blocklen == 64) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d18:	2b40      	cmp	r3, #64	; 0x40
 8000d1a:	d10f      	bne.n	8000d3c <sha256_update+0x58>
        	sha256_transform(ctx);
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 f893 	bl	8000e48 <sha256_transform>


            // Fim do bloco
            ctx->m_bitlen += 512;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000d28:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8000d2c:	f143 0500 	adc.w	r5, r3, #0
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	e9c3 4518 	strd	r4, r5, [r3, #96]	; 0x60
            ctx->m_blocklen = 0;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	669a      	str	r2, [r3, #104]	; 0x68
    for (size_t i = 0; i < length; i++) {
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3d6      	bcc.n	8000cf8 <sha256_update+0x14>
        }
    }
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bdb0      	pop	{r4, r5, r7, pc}

08000d54 <sha256_digest>:
    size_t length = strlen(data);
    sha256_update(ctx, (const uint8_t *)data, length);
}


uint8_t *sha256_digest(SHA256 *ctx) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    uint8_t *hash = (uint8_t *)malloc(32 * sizeof(uint8_t));
 8000d5c:	2020      	movs	r0, #32
 8000d5e:	f003 f933 	bl	8003fc8 <malloc>
 8000d62:	4603      	mov	r3, r0
 8000d64:	60fb      	str	r3, [r7, #12]
    if (hash == NULL) {
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <sha256_digest+0x1c>
        // Tratamento de erro, não foi possível alocar memória
        return NULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e004      	b.n	8000d7a <sha256_digest+0x26>
    }

    //sha256_pad(ctx);
    sha256_revert(ctx, hash);
 8000d70:	68f9      	ldr	r1, [r7, #12]
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 fa48 	bl	8001208 <sha256_revert>

    return hash;
 8000d78:	68fb      	ldr	r3, [r7, #12]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <sha256_rotr>:


uint32_t sha256_rotr(uint32_t x, uint32_t n) {
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
    return (x >> n) | (x << (32 - n));
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	fa62 f303 	ror.w	r3, r2, r3
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <sha256_choose>:

uint32_t sha256_choose(uint32_t e, uint32_t f, uint32_t g) {
 8000d9e:	b480      	push	{r7}
 8000da0:	b085      	sub	sp, #20
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
    return (e & f) ^ (~e & g);
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
 8000db8:	4053      	eors	r3, r2
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <sha256_majority>:

uint32_t sha256_majority(uint32_t a, uint32_t b, uint32_t c) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
    return (a & (b | c)) | (b & c);
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	401a      	ands	r2, r3
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
 8000de0:	4313      	orrs	r3, r2
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <sha256_sig0>:

uint32_t sha256_sig0(uint32_t x) {
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    return sha256_rotr(x, 7) ^ sha256_rotr(x, 18) ^ (x >> 3);
 8000df4:	2107      	movs	r1, #7
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffc3 	bl	8000d82 <sha256_rotr>
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	2112      	movs	r1, #18
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffbe 	bl	8000d82 <sha256_rotr>
 8000e06:	4603      	mov	r3, r0
 8000e08:	ea84 0203 	eor.w	r2, r4, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	4053      	eors	r3, r2
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}

08000e1a <sha256_sig1>:

uint32_t sha256_sig1(uint32_t x) {
 8000e1a:	b590      	push	{r4, r7, lr}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
    return sha256_rotr(x, 17) ^ sha256_rotr(x, 19) ^ (x >> 10);
 8000e22:	2111      	movs	r1, #17
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffac 	bl	8000d82 <sha256_rotr>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	2113      	movs	r1, #19
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffa7 	bl	8000d82 <sha256_rotr>
 8000e34:	4603      	mov	r3, r0
 8000e36:	ea84 0203 	eor.w	r2, r4, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0a9b      	lsrs	r3, r3, #10
 8000e3e:	4053      	eors	r3, r2
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <sha256_transform>:

void sha256_transform(SHA256 *ctx) {
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b0d5      	sub	sp, #340	; 0x154
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000e56:	6018      	str	r0, [r3, #0]
    uint32_t maj, xorA, ch, xorE, sum, newA, newE, m[64];
    uint32_t state[8];

    for (uint8_t i = 0, j = 0; i < 16; i++, j += 4) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8000e64:	e043      	b.n	8000eee <sha256_transform+0xa6>
        m[i] = (ctx->m_data[j] << 24) | (ctx->m_data[j + 1] << 16) | (ctx->m_data[j + 2] << 8) | (ctx->m_data[j + 3]);
 8000e66:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000e6a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000e6e:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7a:	061a      	lsls	r2, r3, #24
 8000e7c:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000e80:	3301      	adds	r3, #1
 8000e82:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000e86:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000e8a:	6809      	ldr	r1, [r1, #0]
 8000e8c:	440b      	add	r3, r1
 8000e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e92:	041b      	lsls	r3, r3, #16
 8000e94:	431a      	orrs	r2, r3
 8000e96:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000ea0:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000ea4:	6809      	ldr	r1, [r1, #0]
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
 8000eb4:	3203      	adds	r2, #3
 8000eb6:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000eba:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000ebe:	6809      	ldr	r1, [r1, #0]
 8000ec0:	440a      	add	r2, r1
 8000ec2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ed2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0, j = 0; i < 16; i++, j += 4) {
 8000eda:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8000ede:	3301      	adds	r3, #1
 8000ee0:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8000ee4:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000ee8:	3304      	adds	r3, #4
 8000eea:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8000eee:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	d9b7      	bls.n	8000e66 <sha256_transform+0x1e>
    }

    for (uint8_t k = 16; k < 64; k++) {
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8000efc:	e03d      	b.n	8000f7a <sha256_transform+0x132>
        m[k] = sha256_sig1(m[k - 2]) + m[k - 7] + sha256_sig0(m[k - 15]) + m[k - 16];
 8000efe:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f02:	1e9a      	subs	r2, r3, #2
 8000f04:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff82 	bl	8000e1a <sha256_sig1>
 8000f16:	4601      	mov	r1, r0
 8000f18:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f1c:	1fda      	subs	r2, r3, #7
 8000f1e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f22:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2a:	18cc      	adds	r4, r1, r3
 8000f2c:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f30:	f1a3 020f 	sub.w	r2, r3, #15
 8000f34:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff53 	bl	8000dec <sha256_sig0>
 8000f46:	4603      	mov	r3, r0
 8000f48:	18e1      	adds	r1, r4, r3
 8000f4a:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f4e:	f1a3 0210 	sub.w	r2, r3, #16
 8000f52:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f56:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5e:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 8000f62:	4419      	add	r1, r3
 8000f64:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t k = 16; k < 64; k++) {
 8000f70:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f74:	3301      	adds	r3, #1
 8000f76:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8000f7a:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f80:	d9bd      	bls.n	8000efe <sha256_transform+0xb6>
    }

    for (uint8_t i = 0; i < 8; i++) {
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8000f88:	e015      	b.n	8000fb6 <sha256_transform+0x16e>
        state[i] = ctx->m_state[i];
 8000f8a:	f897 114c 	ldrb.w	r1, [r7, #332]	; 0x14c
 8000f8e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8000f92:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000fa0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fa4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 8000fac:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8000fb6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	d9e5      	bls.n	8000f8a <sha256_transform+0x142>
    }

    for (uint8_t i = 0; i < 64; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8000fc4:	e0ea      	b.n	800119c <sha256_transform+0x354>
        maj = sha256_majority(state[0], state[1], state[2]);
 8000fc6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fd4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fd8:	6859      	ldr	r1, [r3, #4]
 8000fda:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f7ff feed 	bl	8000dc4 <sha256_majority>
 8000fea:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
        xorA = sha256_rotr(state[0], 2) ^ sha256_rotr(state[0], 13) ^ sha256_rotr(state[0], 22);
 8000fee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ff2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fec1 	bl	8000d82 <sha256_rotr>
 8001000:	4604      	mov	r4, r0
 8001002:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	210d      	movs	r1, #13
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff feb7 	bl	8000d82 <sha256_rotr>
 8001014:	4603      	mov	r3, r0
 8001016:	405c      	eors	r4, r3
 8001018:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800101c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2116      	movs	r1, #22
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff feac 	bl	8000d82 <sha256_rotr>
 800102a:	4603      	mov	r3, r0
 800102c:	4063      	eors	r3, r4
 800102e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        ch = sha256_choose(state[4], state[5], state[6]);
 8001032:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001036:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800103a:	6918      	ldr	r0, [r3, #16]
 800103c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001040:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001044:	6959      	ldr	r1, [r3, #20]
 8001046:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800104a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	461a      	mov	r2, r3
 8001052:	f7ff fea4 	bl	8000d9e <sha256_choose>
 8001056:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

        xorE = sha256_rotr(state[4], 6) ^ sha256_rotr(state[4], 11) ^ sha256_rotr(state[4], 25);
 800105a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800105e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2106      	movs	r1, #6
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe8b 	bl	8000d82 <sha256_rotr>
 800106c:	4604      	mov	r4, r0
 800106e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001072:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	210b      	movs	r1, #11
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe81 	bl	8000d82 <sha256_rotr>
 8001080:	4603      	mov	r3, r0
 8001082:	405c      	eors	r4, r3
 8001084:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001088:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2119      	movs	r1, #25
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fe76 	bl	8000d82 <sha256_rotr>
 8001096:	4603      	mov	r3, r0
 8001098:	4063      	eors	r3, r4
 800109a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

        sum = m[i] + K[i] + state[7] + ch + xorE;
 800109e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 80010a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010ae:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80010b2:	4954      	ldr	r1, [pc, #336]	; (8001204 <sha256_transform+0x3bc>)
 80010b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010b8:	441a      	add	r2, r3
 80010ba:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	441a      	add	r2, r3
 80010c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010ca:	4413      	add	r3, r2
 80010cc:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80010d0:	4413      	add	r3, r2
 80010d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        newA = xorA + maj + sum;
 80010d6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80010da:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80010de:	4413      	add	r3, r2
 80010e0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80010e4:	4413      	add	r3, r2
 80010e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        newE = state[3] + sum;
 80010ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80010f8:	4413      	add	r3, r2
 80010fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        state[7] = state[6];
 80010fe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001102:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800110c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001110:	61da      	str	r2, [r3, #28]
        state[6] = state[5];
 8001112:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001116:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800111a:	695a      	ldr	r2, [r3, #20]
 800111c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001120:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001124:	619a      	str	r2, [r3, #24]
        state[5] = state[4];
 8001126:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800112a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001134:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001138:	615a      	str	r2, [r3, #20]
        state[4] = newE;
 800113a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800113e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001142:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001146:	611a      	str	r2, [r3, #16]
        state[3] = state[2];
 8001148:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800114c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001156:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800115a:	60da      	str	r2, [r3, #12]
        state[2] = state[1];
 800115c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001160:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800116a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800116e:	609a      	str	r2, [r3, #8]
        state[1] = state[0];
 8001170:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001174:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800117e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001182:	605a      	str	r2, [r3, #4]
        state[0] = newA;
 8001184:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001188:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800118c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001190:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 64; i++) {
 8001192:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001196:	3301      	adds	r3, #1
 8001198:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 800119c:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 80011a0:	2b3f      	cmp	r3, #63	; 0x3f
 80011a2:	f67f af10 	bls.w	8000fc6 <sha256_transform+0x17e>
    }

    for (uint8_t i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 80011ac:	e01f      	b.n	80011ee <sha256_transform+0x3a6>
        ctx->m_state[i] += state[i];
 80011ae:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 80011b2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80011c0:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 80011c4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011c8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 80011d4:	4419      	add	r1, r3
 80011d6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 80011e4:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80011e8:	3301      	adds	r3, #1
 80011ea:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 80011ee:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	d9db      	bls.n	80011ae <sha256_transform+0x366>
    }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
 8001202:	bf00      	nop
 8001204:	08004648 	.word	0x08004648

08001208 <sha256_revert>:
    ctx->m_data[57] = (uint8_t)(ctx->m_bitlen >> 48);
    ctx->m_data[56] = (uint8_t)(ctx->m_bitlen >> 56);
    sha256_transform(ctx);
}

void sha256_revert( SHA256 *ctx, uint8_t*hash) {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
    // O SHA usa ordenação de bytes big-endian
    // Reverter todos os bytes
    for (uint8_t i = 0; i < 4; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	e01e      	b.n	8001256 <sha256_revert+0x4e>
        for (uint8_t j = 0; j < 8; j++) {
 8001218:	2300      	movs	r3, #0
 800121a:	73bb      	strb	r3, [r7, #14]
 800121c:	e015      	b.n	800124a <sha256_revert+0x42>
            hash[i + (j * 4)] = (ctx->m_state[j] >> (24 - i * 8)) & 0x000000ff;
 800121e:	7bba      	ldrb	r2, [r7, #14]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	f1c3 0303 	rsb	r3, r3, #3
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	fa22 f103 	lsr.w	r1, r2, r3
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	461a      	mov	r2, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	b2ca      	uxtb	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	3301      	adds	r3, #1
 8001248:	73bb      	strb	r3, [r7, #14]
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	2b07      	cmp	r3, #7
 800124e:	d9e6      	bls.n	800121e <sha256_revert+0x16>
    for (uint8_t i = 0; i < 4; i++) {
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3301      	adds	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d9dd      	bls.n	8001218 <sha256_revert+0x10>
        }
    }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <NonceSHA256Hash>:


void NonceSHA256Hash(uint8_t *data, uint8_t *NumIn, uint8_t *aux) {
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b0a0      	sub	sp, #128	; 0x80
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]

	uint8_t nonce[64];
	uint8_t nonce_aux[32];
	uint8_t pad[] = {0x16, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8};
 8001274:	4a1f      	ldr	r2, [pc, #124]	; (80012f4 <NonceSHA256Hash+0x8c>)
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	ca07      	ldmia	r2, {r0, r1, r2}
 800127c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    for (int i = 1; i<=32;i++){
 8001280:	2301      	movs	r3, #1
 8001282:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001284:	e00c      	b.n	80012a0 <NonceSHA256Hash+0x38>
    	nonce_aux[i-1] =data[i];
 8001286:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	441a      	add	r2, r3
 800128c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800128e:	3b01      	subs	r3, #1
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	3380      	adds	r3, #128	; 0x80
 8001294:	443b      	add	r3, r7
 8001296:	f803 2c64 	strb.w	r2, [r3, #-100]
    for (int i = 1; i<=32;i++){
 800129a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800129c:	3301      	adds	r3, #1
 800129e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	ddef      	ble.n	8001286 <NonceSHA256Hash+0x1e>
    }
	 memcpy(nonce, nonce_aux, sizeof(nonce_aux));
 80012a6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80012aa:	f107 051c 	add.w	r5, r7, #28
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 memcpy(nonce + 32, NumIn, 32);
 80012ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012be:	3320      	adds	r3, #32
 80012c0:	2220      	movs	r2, #32
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 ff77 	bl	80041b8 <memcpy>
	 memcpy(nonce + 52, pad, sizeof(pad));
 80012ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ce:	3334      	adds	r3, #52	; 0x34
 80012d0:	461c      	mov	r4, r3
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012d8:	6020      	str	r0, [r4, #0]
 80012da:	6061      	str	r1, [r4, #4]
 80012dc:	60a2      	str	r2, [r4, #8]

	 calculateSHA256Hash(nonce, sizeof(nonce), aux);
 80012de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	2140      	movs	r1, #64	; 0x40
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f8f0 	bl	80014cc <calculateSHA256Hash>
}
 80012ec:	bf00      	nop
 80012ee:	3780      	adds	r7, #128	; 0x80
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}
 80012f4:	080045cc 	.word	0x080045cc

080012f8 <GenDigSHA256Hash>:

void GenDigSHA256Hash(uint8_t *slot , uint8_t *data, uint8_t *aux) {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b0b6      	sub	sp, #216	; 0xd8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]

	uint8_t gendig[128];
	uint8_t aux_gen[32];
	uint8_t config_gendig[32] = {	0x15, 0x02, /**/0x02, 0x00, 0xEE, 0x01, 0x23, 0x00,
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <GenDigSHA256Hash+0xd8>)
 8001306:	f107 0414 	add.w	r4, r7, #20
 800130a:	461d      	mov	r5, r3
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	 */

    memcpy(gendig, slot, 32);
 8001318:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800131c:	2220      	movs	r2, #32
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	4618      	mov	r0, r3
 8001322:	f002 ff49 	bl	80041b8 <memcpy>
    memcpy(gendig + 32, config_gendig, 32);
 8001326:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800132a:	3320      	adds	r3, #32
 800132c:	461d      	mov	r5, r3
 800132e:	f107 0414 	add.w	r4, r7, #20
 8001332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001334:	6028      	str	r0, [r5, #0]
 8001336:	6069      	str	r1, [r5, #4]
 8001338:	60aa      	str	r2, [r5, #8]
 800133a:	60eb      	str	r3, [r5, #12]
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	6128      	str	r0, [r5, #16]
 8001340:	6169      	str	r1, [r5, #20]
 8001342:	61aa      	str	r2, [r5, #24]
 8001344:	61eb      	str	r3, [r5, #28]
    for (int i = 0; i<32;i++){
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800134c:	e010      	b.n	8001370 <GenDigSHA256Hash+0x78>
    	aux_gen[i] =data[i];
 800134e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	4413      	add	r3, r2
 8001356:	7819      	ldrb	r1, [r3, #0]
 8001358:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800135c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001360:	4413      	add	r3, r2
 8001362:	460a      	mov	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<32;i++){
 8001366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800136a:	3301      	adds	r3, #1
 800136c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001374:	2b1f      	cmp	r3, #31
 8001376:	ddea      	ble.n	800134e <GenDigSHA256Hash+0x56>
    }
    memcpy(gendig + 64, aux_gen, sizeof(aux_gen));
 8001378:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800137c:	3340      	adds	r3, #64	; 0x40
 800137e:	461d      	mov	r5, r3
 8001380:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	6028      	str	r0, [r5, #0]
 8001388:	6069      	str	r1, [r5, #4]
 800138a:	60aa      	str	r2, [r5, #8]
 800138c:	60eb      	str	r3, [r5, #12]
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	6128      	str	r0, [r5, #16]
 8001392:	6169      	str	r1, [r5, #20]
 8001394:	61aa      	str	r2, [r5, #24]
 8001396:	61eb      	str	r3, [r5, #28]
    memcpy(gendig + 96, general_conf,  sizeof(general_conf));
 8001398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800139c:	3360      	adds	r3, #96	; 0x60
 800139e:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <GenDigSHA256Hash+0xdc>)
 80013a0:	461c      	mov	r4, r3
 80013a2:	4615      	mov	r5, r2
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	6020      	str	r0, [r4, #0]
 80013a8:	6061      	str	r1, [r4, #4]
 80013aa:	60a2      	str	r2, [r4, #8]
 80013ac:	60e3      	str	r3, [r4, #12]
 80013ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b0:	6120      	str	r0, [r4, #16]
 80013b2:	6161      	str	r1, [r4, #20]
 80013b4:	61a2      	str	r2, [r4, #24]
 80013b6:	61e3      	str	r3, [r4, #28]

    calculateSHA256Hash(gendig, sizeof(gendig), aux);
 80013b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f883 	bl	80014cc <calculateSHA256Hash>

}
 80013c6:	bf00      	nop
 80013c8:	37d8      	adds	r7, #216	; 0xd8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bdb0      	pop	{r4, r5, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	080045d8 	.word	0x080045d8
 80013d4:	20000000 	.word	0x20000000

080013d8 <MACSHA256Hash>:


void MACSHA256Hash(uint8_t *slot ,uint8_t *data, uint8_t *aux){
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b0be      	sub	sp, #248	; 0xf8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]

	uint8_t mac[128];
	uint8_t aux_mac[32];
	uint8_t config_mac[32] = {	0x08, 0x01, /**/0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MACSHA256Hash+0xec>)
 80013e6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80013ea:	461d      	mov	r5, r3
 80013ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE,
													0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x00, 0x00,
													0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	uint8_t mac_pad[32] = 	{	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 80013f8:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <MACSHA256Hash+0xf0>)
 80013fa:	f107 0414 	add.w	r4, r7, #20
 80013fe:	461d      	mov	r5, r3
 8001400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001404:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	  	  							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0};

    memcpy(mac, slot, 32);
 800140c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001410:	2220      	movs	r2, #32
 8001412:	68f9      	ldr	r1, [r7, #12]
 8001414:	4618      	mov	r0, r3
 8001416:	f002 fecf 	bl	80041b8 <memcpy>
    for (int i = 0; i<32;i++){
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001420:	e010      	b.n	8001444 <MACSHA256Hash+0x6c>
    	aux_mac[i] =data[i];
 8001422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	7819      	ldrb	r1, [r3, #0]
 800142c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001434:	4413      	add	r3, r2
 8001436:	460a      	mov	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<32;i++){
 800143a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800143e:	3301      	adds	r3, #1
 8001440:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001448:	2b1f      	cmp	r3, #31
 800144a:	ddea      	ble.n	8001422 <MACSHA256Hash+0x4a>
    }
    memcpy(mac + 32, aux_mac,  sizeof(aux_mac));
 800144c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001450:	3320      	adds	r3, #32
 8001452:	461d      	mov	r5, r3
 8001454:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	6028      	str	r0, [r5, #0]
 800145c:	6069      	str	r1, [r5, #4]
 800145e:	60aa      	str	r2, [r5, #8]
 8001460:	60eb      	str	r3, [r5, #12]
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	6128      	str	r0, [r5, #16]
 8001466:	6169      	str	r1, [r5, #20]
 8001468:	61aa      	str	r2, [r5, #24]
 800146a:	61eb      	str	r3, [r5, #28]
    memcpy(mac + 64, config_mac,  sizeof(config_mac));
 800146c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001470:	3340      	adds	r3, #64	; 0x40
 8001472:	461d      	mov	r5, r3
 8001474:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	6028      	str	r0, [r5, #0]
 800147c:	6069      	str	r1, [r5, #4]
 800147e:	60aa      	str	r2, [r5, #8]
 8001480:	60eb      	str	r3, [r5, #12]
 8001482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001484:	6128      	str	r0, [r5, #16]
 8001486:	6169      	str	r1, [r5, #20]
 8001488:	61aa      	str	r2, [r5, #24]
 800148a:	61eb      	str	r3, [r5, #28]
    memcpy(mac + 96, mac_pad, sizeof(mac_pad));
 800148c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001490:	3360      	adds	r3, #96	; 0x60
 8001492:	461d      	mov	r5, r3
 8001494:	f107 0414 	add.w	r4, r7, #20
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	6028      	str	r0, [r5, #0]
 800149c:	6069      	str	r1, [r5, #4]
 800149e:	60aa      	str	r2, [r5, #8]
 80014a0:	60eb      	str	r3, [r5, #12]
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	6128      	str	r0, [r5, #16]
 80014a6:	6169      	str	r1, [r5, #20]
 80014a8:	61aa      	str	r2, [r5, #24]
 80014aa:	61eb      	str	r3, [r5, #28]

    calculateSHA256Hash(mac, sizeof(mac), aux);
 80014ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f809 	bl	80014cc <calculateSHA256Hash>
}
 80014ba:	bf00      	nop
 80014bc:	37f8      	adds	r7, #248	; 0xf8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}
 80014c2:	bf00      	nop
 80014c4:	080045f8 	.word	0x080045f8
 80014c8:	08004618 	.word	0x08004618

080014cc <calculateSHA256Hash>:


void calculateSHA256Hash(uint8_t *data, uint8_t dataSize, uint8_t *aux) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b0a2      	sub	sp, #136	; 0x88
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	460b      	mov	r3, r1
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	72fb      	strb	r3, [r7, #11]
    SHA256 sha;

    sha256_init(&sha);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fbc4 	bl	8000c6c <sha256_init>
    sha256_update(&sha, data, dataSize);
 80014e4:	7afa      	ldrb	r2, [r7, #11]
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	68f9      	ldr	r1, [r7, #12]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fbf9 	bl	8000ce4 <sha256_update>
    uint8_t *digest = sha256_digest(&sha);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc2c 	bl	8000d54 <sha256_digest>
 80014fc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

    for (int i =0; i<32;i++){
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001506:	e00f      	b.n	8001528 <calculateSHA256Hash+0x5c>
    	aux[i] = digest[i];
 8001508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800150c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001510:	441a      	add	r2, r3
 8001512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	440b      	add	r3, r1
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
    for (int i =0; i<32;i++){
 800151e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001522:	3301      	adds	r3, #1
 8001524:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001528:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800152c:	2b1f      	cmp	r3, #31
 800152e:	ddeb      	ble.n	8001508 <calculateSHA256Hash+0x3c>
    }

    //free(digest);
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3788      	adds	r7, #136	; 0x88
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_MspInit+0x5c>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_MspInit+0x5c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <HAL_MspInit+0x5c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_MspInit+0x5c>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_MspInit+0x60>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_MspInit+0x60>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	40021000 	.word	0x40021000
 800159c:	40010000 	.word	0x40010000

080015a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <HAL_I2C_MspInit+0x74>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d124      	bne.n	800160a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_I2C_MspInit+0x78>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_I2C_MspInit+0x78>)
 80015c6:	f043 0308 	orr.w	r3, r3, #8
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_I2C_MspInit+0x78>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0308 	and.w	r3, r3, #8
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015de:	2312      	movs	r3, #18
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	4619      	mov	r1, r3
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <HAL_I2C_MspInit+0x7c>)
 80015ee:	f000 fb09 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_I2C_MspInit+0x78>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_I2C_MspInit+0x78>)
 80015f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_I2C_MspInit+0x78>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40005800 	.word	0x40005800
 8001618:	40021000 	.word	0x40021000
 800161c:	40010c00 	.word	0x40010c00

08001620 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_USART_MspInit+0x9c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d139      	bne.n	80016b4 <HAL_USART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_USART_MspInit+0xa0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_USART_MspInit+0xa0>)
 8001646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_USART_MspInit+0xa0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_USART_MspInit+0xa0>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_USART_MspInit+0xa0>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_USART_MspInit+0xa0>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	480f      	ldr	r0, [pc, #60]	; (80016c4 <HAL_USART_MspInit+0xa4>)
 8001686:	f000 fabd 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800168a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4619      	mov	r1, r3
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_USART_MspInit+0xa4>)
 80016a0:	f000 fab0 	bl	8001c04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2025      	movs	r0, #37	; 0x25
 80016aa:	f000 f9fe 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ae:	2025      	movs	r0, #37	; 0x25
 80016b0:	f000 fa17 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170e:	f000 f8b5 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <USART1_IRQHandler+0x10>)
 800171e:	f002 f81f 	bl	8003760 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200000ec 	.word	0x200000ec

0800172c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001734:	4a14      	ldr	r2, [pc, #80]	; (8001788 <_sbrk+0x5c>)
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <_sbrk+0x60>)
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <_sbrk+0x64>)
 800174a:	4a12      	ldr	r2, [pc, #72]	; (8001794 <_sbrk+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <_sbrk+0x64>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	429a      	cmp	r2, r3
 800175a:	d207      	bcs.n	800176c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800175c:	f002 fd00 	bl	8004160 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	220c      	movs	r2, #12
 8001764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	e009      	b.n	8001780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_sbrk+0x64>)
 800177c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20005000 	.word	0x20005000
 800178c:	00000400 	.word	0x00000400
 8001790:	20000130 	.word	0x20000130
 8001794:	20000280 	.word	0x20000280

08001798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	; (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	; (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ca:	f7ff ffe5 	bl	8001798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f002 fccd 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d2:	f7fe ff35 	bl	8000640 <main>
  bx lr
 80017d6:	4770      	bx	lr
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80017e0:	08004768 	.word	0x08004768
  ldr r2, =_sbss
 80017e4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80017e8:	20000280 	.word	0x20000280

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x28>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f947 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fe96 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f95f 	bl	8001afe <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f927 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000020 	.word	0x20000020
 8001874:	20000028 	.word	0x20000028
 8001878:	20000024 	.word	0x20000024

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x1c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x20>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_IncTick+0x20>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000028 	.word	0x20000028
 800189c:	20000134 	.word	0x20000134

080018a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <HAL_GetTick+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000134 	.word	0x20000134

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff fff0 	bl	80018a0 <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffe0 	bl	80018a0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000028 	.word	0x20000028

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4906      	ldr	r1, [pc, #24]	; (8001994 <__NVIC_EnableIRQ+0x34>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	; (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	; (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff90 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff2d 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff42 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff90 	bl	80019ec <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5f 	bl	8001998 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff35 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d005      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2204      	movs	r2, #4
 8001b32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e051      	b.n	8001bde <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 020e 	bic.w	r2, r2, #14
 8001b48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a22      	ldr	r2, [pc, #136]	; (8001be8 <HAL_DMA_Abort_IT+0xd0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d029      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0xa0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a20      	ldr	r2, [pc, #128]	; (8001bec <HAL_DMA_Abort_IT+0xd4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d022      	beq.n	8001bb4 <HAL_DMA_Abort_IT+0x9c>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <HAL_DMA_Abort_IT+0xd8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d01a      	beq.n	8001bae <HAL_DMA_Abort_IT+0x96>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_DMA_Abort_IT+0xdc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d012      	beq.n	8001ba8 <HAL_DMA_Abort_IT+0x90>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_DMA_Abort_IT+0xe0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_DMA_Abort_IT+0x8a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <HAL_DMA_Abort_IT+0xe4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d102      	bne.n	8001b9c <HAL_DMA_Abort_IT+0x84>
 8001b96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b9a:	e00e      	b.n	8001bba <HAL_DMA_Abort_IT+0xa2>
 8001b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba0:	e00b      	b.n	8001bba <HAL_DMA_Abort_IT+0xa2>
 8001ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba6:	e008      	b.n	8001bba <HAL_DMA_Abort_IT+0xa2>
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	e005      	b.n	8001bba <HAL_DMA_Abort_IT+0xa2>
 8001bae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb2:	e002      	b.n	8001bba <HAL_DMA_Abort_IT+0xa2>
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	e000      	b.n	8001bba <HAL_DMA_Abort_IT+0xa2>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_DMA_Abort_IT+0xe8>)
 8001bbc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	4798      	blx	r3
    } 
  }
  return status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40020008 	.word	0x40020008
 8001bec:	4002001c 	.word	0x4002001c
 8001bf0:	40020030 	.word	0x40020030
 8001bf4:	40020044 	.word	0x40020044
 8001bf8:	40020058 	.word	0x40020058
 8001bfc:	4002006c 	.word	0x4002006c
 8001c00:	40020000 	.word	0x40020000

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b08b      	sub	sp, #44	; 0x2c
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c16:	e169      	b.n	8001eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 8158 	bne.w	8001ee6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4a9a      	ldr	r2, [pc, #616]	; (8001ea4 <HAL_GPIO_Init+0x2a0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d05e      	beq.n	8001cfe <HAL_GPIO_Init+0xfa>
 8001c40:	4a98      	ldr	r2, [pc, #608]	; (8001ea4 <HAL_GPIO_Init+0x2a0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d875      	bhi.n	8001d32 <HAL_GPIO_Init+0x12e>
 8001c46:	4a98      	ldr	r2, [pc, #608]	; (8001ea8 <HAL_GPIO_Init+0x2a4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d058      	beq.n	8001cfe <HAL_GPIO_Init+0xfa>
 8001c4c:	4a96      	ldr	r2, [pc, #600]	; (8001ea8 <HAL_GPIO_Init+0x2a4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d86f      	bhi.n	8001d32 <HAL_GPIO_Init+0x12e>
 8001c52:	4a96      	ldr	r2, [pc, #600]	; (8001eac <HAL_GPIO_Init+0x2a8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d052      	beq.n	8001cfe <HAL_GPIO_Init+0xfa>
 8001c58:	4a94      	ldr	r2, [pc, #592]	; (8001eac <HAL_GPIO_Init+0x2a8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d869      	bhi.n	8001d32 <HAL_GPIO_Init+0x12e>
 8001c5e:	4a94      	ldr	r2, [pc, #592]	; (8001eb0 <HAL_GPIO_Init+0x2ac>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d04c      	beq.n	8001cfe <HAL_GPIO_Init+0xfa>
 8001c64:	4a92      	ldr	r2, [pc, #584]	; (8001eb0 <HAL_GPIO_Init+0x2ac>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d863      	bhi.n	8001d32 <HAL_GPIO_Init+0x12e>
 8001c6a:	4a92      	ldr	r2, [pc, #584]	; (8001eb4 <HAL_GPIO_Init+0x2b0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d046      	beq.n	8001cfe <HAL_GPIO_Init+0xfa>
 8001c70:	4a90      	ldr	r2, [pc, #576]	; (8001eb4 <HAL_GPIO_Init+0x2b0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d85d      	bhi.n	8001d32 <HAL_GPIO_Init+0x12e>
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d82a      	bhi.n	8001cd0 <HAL_GPIO_Init+0xcc>
 8001c7a:	2b12      	cmp	r3, #18
 8001c7c:	d859      	bhi.n	8001d32 <HAL_GPIO_Init+0x12e>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <HAL_GPIO_Init+0x80>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001cff 	.word	0x08001cff
 8001c88:	08001cd9 	.word	0x08001cd9
 8001c8c:	08001ceb 	.word	0x08001ceb
 8001c90:	08001d2d 	.word	0x08001d2d
 8001c94:	08001d33 	.word	0x08001d33
 8001c98:	08001d33 	.word	0x08001d33
 8001c9c:	08001d33 	.word	0x08001d33
 8001ca0:	08001d33 	.word	0x08001d33
 8001ca4:	08001d33 	.word	0x08001d33
 8001ca8:	08001d33 	.word	0x08001d33
 8001cac:	08001d33 	.word	0x08001d33
 8001cb0:	08001d33 	.word	0x08001d33
 8001cb4:	08001d33 	.word	0x08001d33
 8001cb8:	08001d33 	.word	0x08001d33
 8001cbc:	08001d33 	.word	0x08001d33
 8001cc0:	08001d33 	.word	0x08001d33
 8001cc4:	08001d33 	.word	0x08001d33
 8001cc8:	08001ce1 	.word	0x08001ce1
 8001ccc:	08001cf5 	.word	0x08001cf5
 8001cd0:	4a79      	ldr	r2, [pc, #484]	; (8001eb8 <HAL_GPIO_Init+0x2b4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d013      	beq.n	8001cfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cd6:	e02c      	b.n	8001d32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	623b      	str	r3, [r7, #32]
          break;
 8001cde:	e029      	b.n	8001d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	623b      	str	r3, [r7, #32]
          break;
 8001ce8:	e024      	b.n	8001d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	3308      	adds	r3, #8
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e01f      	b.n	8001d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	330c      	adds	r3, #12
 8001cfa:	623b      	str	r3, [r7, #32]
          break;
 8001cfc:	e01a      	b.n	8001d34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d06:	2304      	movs	r3, #4
 8001d08:	623b      	str	r3, [r7, #32]
          break;
 8001d0a:	e013      	b.n	8001d34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d14:	2308      	movs	r3, #8
 8001d16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	611a      	str	r2, [r3, #16]
          break;
 8001d1e:	e009      	b.n	8001d34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d20:	2308      	movs	r3, #8
 8001d22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	615a      	str	r2, [r3, #20]
          break;
 8001d2a:	e003      	b.n	8001d34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
          break;
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x130>
          break;
 8001d32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d801      	bhi.n	8001d3e <HAL_GPIO_Init+0x13a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_Init+0x13e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3304      	adds	r3, #4
 8001d42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2bff      	cmp	r3, #255	; 0xff
 8001d48:	d802      	bhi.n	8001d50 <HAL_GPIO_Init+0x14c>
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x152>
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3b08      	subs	r3, #8
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	210f      	movs	r1, #15
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	401a      	ands	r2, r3
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	431a      	orrs	r2, r3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80b1 	beq.w	8001ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d84:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <HAL_GPIO_Init+0x2b8>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	; (8001ebc <HAL_GPIO_Init+0x2b8>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6193      	str	r3, [r2, #24]
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_GPIO_Init+0x2b8>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d9c:	4a48      	ldr	r2, [pc, #288]	; (8001ec0 <HAL_GPIO_Init+0x2bc>)
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a40      	ldr	r2, [pc, #256]	; (8001ec4 <HAL_GPIO_Init+0x2c0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d013      	beq.n	8001df0 <HAL_GPIO_Init+0x1ec>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a3f      	ldr	r2, [pc, #252]	; (8001ec8 <HAL_GPIO_Init+0x2c4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00d      	beq.n	8001dec <HAL_GPIO_Init+0x1e8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <HAL_GPIO_Init+0x2c8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a3d      	ldr	r2, [pc, #244]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_GPIO_Init+0x1e0>
 8001de0:	2303      	movs	r3, #3
 8001de2:	e006      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de4:	2304      	movs	r3, #4
 8001de6:	e004      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_GPIO_Init+0x1ee>
 8001df0:	2300      	movs	r3, #0
 8001df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	0092      	lsls	r2, r2, #2
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e02:	492f      	ldr	r1, [pc, #188]	; (8001ec0 <HAL_GPIO_Init+0x2bc>)
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	492c      	ldr	r1, [pc, #176]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4928      	ldr	r1, [pc, #160]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4922      	ldr	r1, [pc, #136]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	491e      	ldr	r1, [pc, #120]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	4918      	ldr	r1, [pc, #96]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4914      	ldr	r1, [pc, #80]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d021      	beq.n	8001ed8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e021      	b.n	8001ee6 <HAL_GPIO_Init+0x2e2>
 8001ea2:	bf00      	nop
 8001ea4:	10320000 	.word	0x10320000
 8001ea8:	10310000 	.word	0x10310000
 8001eac:	10220000 	.word	0x10220000
 8001eb0:	10210000 	.word	0x10210000
 8001eb4:	10120000 	.word	0x10120000
 8001eb8:	10110000 	.word	0x10110000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000
 8001ec4:	40010800 	.word	0x40010800
 8001ec8:	40010c00 	.word	0x40010c00
 8001ecc:	40011000 	.word	0x40011000
 8001ed0:	40011400 	.word	0x40011400
 8001ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_GPIO_Init+0x304>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <HAL_GPIO_Init+0x304>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f47f ae8e 	bne.w	8001c18 <HAL_GPIO_Init+0x14>
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	372c      	adds	r7, #44	; 0x2c
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e12b      	b.n	8002176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fb34 	bl	80015a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2224      	movs	r2, #36	; 0x24
 8001f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f70:	f001 fb6e 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 8001f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a81      	ldr	r2, [pc, #516]	; (8002180 <HAL_I2C_Init+0x274>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d807      	bhi.n	8001f90 <HAL_I2C_Init+0x84>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4a80      	ldr	r2, [pc, #512]	; (8002184 <HAL_I2C_Init+0x278>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	bf94      	ite	ls
 8001f88:	2301      	movls	r3, #1
 8001f8a:	2300      	movhi	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	e006      	b.n	8001f9e <HAL_I2C_Init+0x92>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4a7d      	ldr	r2, [pc, #500]	; (8002188 <HAL_I2C_Init+0x27c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	bf94      	ite	ls
 8001f98:	2301      	movls	r3, #1
 8001f9a:	2300      	movhi	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0e7      	b.n	8002176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a78      	ldr	r2, [pc, #480]	; (800218c <HAL_I2C_Init+0x280>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	; (8002180 <HAL_I2C_Init+0x274>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d802      	bhi.n	8001fe0 <HAL_I2C_Init+0xd4>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	e009      	b.n	8001ff4 <HAL_I2C_Init+0xe8>
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_I2C_Init+0x284>)
 8001fec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002006:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	495c      	ldr	r1, [pc, #368]	; (8002180 <HAL_I2C_Init+0x274>)
 8002010:	428b      	cmp	r3, r1
 8002012:	d819      	bhi.n	8002048 <HAL_I2C_Init+0x13c>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1e59      	subs	r1, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002028:	400b      	ands	r3, r1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_I2C_Init+0x138>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e59      	subs	r1, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fbb1 f3f3 	udiv	r3, r1, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002042:	e051      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002044:	2304      	movs	r3, #4
 8002046:	e04f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d111      	bne.n	8002074 <HAL_I2C_Init+0x168>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e012      	b.n	800209a <HAL_I2C_Init+0x18e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Init+0x196>
 800209e:	2301      	movs	r3, #1
 80020a0:	e022      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10e      	bne.n	80020c8 <HAL_I2C_Init+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1e58      	subs	r0, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	460b      	mov	r3, r1
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	440b      	add	r3, r1
 80020b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c6:	e00f      	b.n	80020e8 <HAL_I2C_Init+0x1dc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	1e58      	subs	r0, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6859      	ldr	r1, [r3, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	0099      	lsls	r1, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	fbb0 f3f3 	udiv	r3, r0, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6809      	ldr	r1, [r1, #0]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002116:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6911      	ldr	r1, [r2, #16]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68d2      	ldr	r2, [r2, #12]
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	000186a0 	.word	0x000186a0
 8002184:	001e847f 	.word	0x001e847f
 8002188:	003d08ff 	.word	0x003d08ff
 800218c:	431bde83 	.word	0x431bde83
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
 80021a4:	4613      	mov	r3, r2
 80021a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fb7a 	bl	80018a0 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	f040 80e0 	bne.w	800237c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2319      	movs	r3, #25
 80021c2:	2201      	movs	r2, #1
 80021c4:	4970      	ldr	r1, [pc, #448]	; (8002388 <HAL_I2C_Master_Transmit+0x1f4>)
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fc92 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e0d3      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_I2C_Master_Transmit+0x50>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0cc      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d007      	beq.n	800220a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002218:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2210      	movs	r2, #16
 8002226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a50      	ldr	r2, [pc, #320]	; (800238c <HAL_I2C_Master_Transmit+0x1f8>)
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800224c:	8979      	ldrh	r1, [r7, #10]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fafc 	bl	8002850 <I2C_MasterRequestWrite>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e08d      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002278:	e066      	b.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fd0c 	bl	8002c9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e06b      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d11b      	bne.n	800231c <HAL_I2C_Master_Transmit+0x188>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d017      	beq.n	800231c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	781a      	ldrb	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6a39      	ldr	r1, [r7, #32]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fcfc 	bl	8002d1e <I2C_WaitOnBTFFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00d      	beq.n	8002348 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	2b04      	cmp	r3, #4
 8002332:	d107      	bne.n	8002344 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002342:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01a      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d194      	bne.n	800227a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002
 800238c:	ffff0000 	.word	0xffff0000

08002390 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	; 0x30
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	460b      	mov	r3, r1
 800239e:	817b      	strh	r3, [r7, #10]
 80023a0:	4613      	mov	r3, r2
 80023a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff fa7a 	bl	80018a0 <HAL_GetTick>
 80023ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	f040 823f 	bne.w	800283a <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2319      	movs	r3, #25
 80023c2:	2201      	movs	r2, #1
 80023c4:	497f      	ldr	r1, [pc, #508]	; (80025c4 <HAL_I2C_Master_Receive+0x234>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fb92 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	e232      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_I2C_Master_Receive+0x54>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e22b      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d007      	beq.n	800240a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002418:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2222      	movs	r2, #34	; 0x22
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2210      	movs	r2, #16
 8002426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	893a      	ldrh	r2, [r7, #8]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <HAL_I2C_Master_Receive+0x238>)
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fa7e 	bl	8002954 <I2C_MasterRequestRead>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e1ec      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d113      	bne.n	8002492 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e1c0      	b.n	8002814 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	2b01      	cmp	r3, #1
 8002498:	d11e      	bne.n	80024d8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024aa:	b672      	cpsid	i
}
 80024ac:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024d4:	b662      	cpsie	i
}
 80024d6:	e035      	b.n	8002544 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11e      	bne.n	800251e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f0:	b672      	cpsid	i
}
 80024f2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002518:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800251a:	b662      	cpsie	i
}
 800251c:	e012      	b.n	8002544 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800252c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002544:	e166      	b.n	8002814 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b03      	cmp	r3, #3
 800254c:	f200 811f 	bhi.w	800278e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002554:	2b01      	cmp	r3, #1
 8002556:	d123      	bne.n	80025a0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fc1f 	bl	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e167      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800259e:	e139      	b.n	8002814 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d152      	bne.n	800264e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	2200      	movs	r2, #0
 80025b0:	4906      	ldr	r1, [pc, #24]	; (80025cc <HAL_I2C_Master_Receive+0x23c>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fa9c 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e13c      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
 80025c2:	bf00      	nop
 80025c4:	00100002 	.word	0x00100002
 80025c8:	ffff0000 	.word	0xffff0000
 80025cc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025d0:	b672      	cpsid	i
}
 80025d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691a      	ldr	r2, [r3, #16]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002616:	b662      	cpsie	i
}
 8002618:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800264c:	e0e2      	b.n	8002814 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	2200      	movs	r2, #0
 8002656:	497b      	ldr	r1, [pc, #492]	; (8002844 <HAL_I2C_Master_Receive+0x4b4>)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 fa49 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0e9      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002676:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002678:	b672      	cpsid	i
}
 800267a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_I2C_Master_Receive+0x4b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_I2C_Master_Receive+0x4bc>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0a1a      	lsrs	r2, r3, #8
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00da      	lsls	r2, r3, #3
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d118      	bne.n	8002706 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0220 	orr.w	r2, r3, #32
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026f6:	b662      	cpsie	i
}
 80026f8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e09a      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d1d9      	bne.n	80026c8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002756:	b662      	cpsie	i
}
 8002758:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800278c:	e042      	b.n	8002814 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fb04 	bl	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e04c      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d118      	bne.n	8002814 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f ae94 	bne.w	8002546 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	00010004 	.word	0x00010004
 8002848:	20000020 	.word	0x20000020
 800284c:	14f8b589 	.word	0x14f8b589

08002850 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	460b      	mov	r3, r1
 800285e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b08      	cmp	r3, #8
 800286a:	d006      	beq.n	800287a <I2C_MasterRequestWrite+0x2a>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d003      	beq.n	800287a <I2C_MasterRequestWrite+0x2a>
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002878:	d108      	bne.n	800288c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e00b      	b.n	80028a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	2b12      	cmp	r3, #18
 8002892:	d107      	bne.n	80028a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f91d 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ca:	d103      	bne.n	80028d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e035      	b.n	8002944 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e0:	d108      	bne.n	80028f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028e2:	897b      	ldrh	r3, [r7, #10]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028f0:	611a      	str	r2, [r3, #16]
 80028f2:	e01b      	b.n	800292c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028f4:	897b      	ldrh	r3, [r7, #10]
 80028f6:	11db      	asrs	r3, r3, #7
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f003 0306 	and.w	r3, r3, #6
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f063 030f 	orn	r3, r3, #15
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	490e      	ldr	r1, [pc, #56]	; (800294c <I2C_MasterRequestWrite+0xfc>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f943 	bl	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e010      	b.n	8002944 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <I2C_MasterRequestWrite+0x100>)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f933 	bl	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	00010008 	.word	0x00010008
 8002950:	00010002 	.word	0x00010002

08002954 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	460b      	mov	r3, r1
 8002962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002978:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b08      	cmp	r3, #8
 800297e:	d006      	beq.n	800298e <I2C_MasterRequestRead+0x3a>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d003      	beq.n	800298e <I2C_MasterRequestRead+0x3a>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e00b      	b.n	80029b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	2b11      	cmp	r3, #17
 80029a6:	d107      	bne.n	80029b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 f893 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029de:	d103      	bne.n	80029e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e079      	b.n	8002ae0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	611a      	str	r2, [r3, #16]
 8002a06:	e05f      	b.n	8002ac8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a08:	897b      	ldrh	r3, [r7, #10]
 8002a0a:	11db      	asrs	r3, r3, #7
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	f003 0306 	and.w	r3, r3, #6
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f063 030f 	orn	r3, r3, #15
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4930      	ldr	r1, [pc, #192]	; (8002ae8 <I2C_MasterRequestRead+0x194>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f8b9 	bl	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e054      	b.n	8002ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4929      	ldr	r1, [pc, #164]	; (8002aec <I2C_MasterRequestRead+0x198>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f8a9 	bl	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e044      	b.n	8002ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f831 	bl	8002af0 <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa2:	d103      	bne.n	8002aac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e017      	b.n	8002ae0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	11db      	asrs	r3, r3, #7
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	f003 0306 	and.w	r3, r3, #6
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f063 030e 	orn	r3, r3, #14
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4907      	ldr	r1, [pc, #28]	; (8002aec <I2C_MasterRequestRead+0x198>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f865 	bl	8002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	00010008 	.word	0x00010008
 8002aec:	00010002 	.word	0x00010002

08002af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b00:	e025      	b.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d021      	beq.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fe fec9 	bl	80018a0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d116      	bne.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0220 	orr.w	r2, r3, #32
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e023      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d10d      	bne.n	8002b74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4013      	ands	r3, r2
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	e00c      	b.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf0c      	ite	eq
 8002b86:	2301      	moveq	r3, #1
 8002b88:	2300      	movne	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d0b6      	beq.n	8002b02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bac:	e051      	b.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbc:	d123      	bne.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f043 0204 	orr.w	r2, r3, #4
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e046      	b.n	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d021      	beq.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe fe47 	bl	80018a0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e020      	b.n	8002c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10c      	bne.n	8002c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e00b      	b.n	8002c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d18d      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ca8:	e02d      	b.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f8ce 	bl	8002e4c <I2C_IsAcknowledgeFailed>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e02d      	b.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d021      	beq.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fe fded 	bl	80018a0 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d116      	bne.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e007      	b.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d1ca      	bne.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d2a:	e02d      	b.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f88d 	bl	8002e4c <I2C_IsAcknowledgeFailed>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e02d      	b.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d021      	beq.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d44:	f7fe fdac 	bl	80018a0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d302      	bcc.n	8002d5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e007      	b.n	8002d98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d1ca      	bne.n	8002d2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dac:	e042      	b.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d119      	bne.n	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0210 	mvn.w	r2, #16
 8002dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e029      	b.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df0:	f7fe fd56 	bl	80018a0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d302      	bcc.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d1b5      	bne.n	8002dae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e62:	d11b      	bne.n	8002e9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e272      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8087 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d00c      	beq.n	8002eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d112      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
 8002ee0:	4b8c      	ldr	r3, [pc, #560]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eec:	d10b      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eee:	4b89      	ldr	r3, [pc, #548]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d06c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d168      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e24c      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x76>
 8002f10:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e02e      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b7b      	ldr	r3, [pc, #492]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7a      	ldr	r2, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b78      	ldr	r3, [pc, #480]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a77      	ldr	r2, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xbc>
 8002f4a:	4b72      	ldr	r3, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a71      	ldr	r2, [pc, #452]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f64:	4b6b      	ldr	r3, [pc, #428]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b68      	ldr	r3, [pc, #416]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a67      	ldr	r2, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fc8c 	bl	80018a0 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fc88 	bl	80018a0 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e200      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe4>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fc78 	bl	80018a0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fc74 	bl	80018a0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1ec      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x10c>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1c0      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4939      	ldr	r1, [pc, #228]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCC_OscConfig+0x270>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe fc2d 	bl	80018a0 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe fc29 	bl	80018a0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1a1      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4927      	ldr	r1, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_RCC_OscConfig+0x270>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fc0c 	bl	80018a0 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe fc08 	bl	80018a0 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e180      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03a      	beq.n	800312c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d019      	beq.n	80030f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_RCC_OscConfig+0x274>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fe fbec 	bl	80018a0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fbe8 	bl	80018a0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e160      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 fad8 	bl	80036a0 <RCC_Delay>
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_RCC_OscConfig+0x274>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fe fbd2 	bl	80018a0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003100:	f7fe fbce 	bl	80018a0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d908      	bls.n	8003120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e146      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	42420000 	.word	0x42420000
 800311c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b92      	ldr	r3, [pc, #584]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e9      	bne.n	8003100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a6 	beq.w	8003286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b8b      	ldr	r3, [pc, #556]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b88      	ldr	r3, [pc, #544]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a87      	ldr	r2, [pc, #540]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b85      	ldr	r3, [pc, #532]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b82      	ldr	r3, [pc, #520]	; (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b7f      	ldr	r3, [pc, #508]	; (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7e      	ldr	r2, [pc, #504]	; (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fb8f 	bl	80018a0 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fb8b 	bl	80018a0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e103      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b75      	ldr	r3, [pc, #468]	; (8003370 <HAL_RCC_OscConfig+0x4c8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x312>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a6e      	ldr	r2, [pc, #440]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031c2:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a66      	ldr	r2, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x356>
 80031e4:	4b61      	ldr	r3, [pc, #388]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a60      	ldr	r2, [pc, #384]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4b5e      	ldr	r3, [pc, #376]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031fe:	4b5b      	ldr	r3, [pc, #364]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a5a      	ldr	r2, [pc, #360]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b58      	ldr	r3, [pc, #352]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a57      	ldr	r2, [pc, #348]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe fb3f 	bl	80018a0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe fb3b 	bl	80018a0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	; 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0b1      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b4b      	ldr	r3, [pc, #300]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x37e>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe fb29 	bl	80018a0 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe fb25 	bl	80018a0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e09b      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b40      	ldr	r3, [pc, #256]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b3c      	ldr	r3, [pc, #240]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a3b      	ldr	r2, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b36      	ldr	r3, [pc, #216]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d061      	beq.n	8003360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d146      	bne.n	8003332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fe faf9 	bl	80018a0 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe faf5 	bl	80018a0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e06d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c4:	4b29      	ldr	r3, [pc, #164]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d108      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032da:	4b24      	ldr	r3, [pc, #144]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4921      	ldr	r1, [pc, #132]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a19      	ldr	r1, [r3, #32]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	491b      	ldr	r1, [pc, #108]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x4cc>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fe fac9 	bl	80018a0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe fac5 	bl	80018a0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e03d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x46a>
 8003330:	e035      	b.n	800339e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fab2 	bl	80018a0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe faae 	bl	80018a0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e026      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x498>
 800335e:	e01e      	b.n	800339e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e019      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_OscConfig+0x500>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	429a      	cmp	r2, r3
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0d0      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b6a      	ldr	r3, [pc, #424]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b67      	ldr	r3, [pc, #412]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	4965      	ldr	r1, [pc, #404]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b63      	ldr	r3, [pc, #396]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b8      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003408:	4b59      	ldr	r3, [pc, #356]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a58      	ldr	r2, [pc, #352]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800342a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	494d      	ldr	r1, [pc, #308]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d040      	beq.n	80034cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d115      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07f      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b41      	ldr	r3, [pc, #260]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e073      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06b      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4936      	ldr	r1, [pc, #216]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7fe fa00 	bl	80018a0 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe f9fc 	bl	80018a0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e053      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d210      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 0207 	bic.w	r2, r3, #7
 80034e2:	4922      	ldr	r1, [pc, #136]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e032      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4916      	ldr	r1, [pc, #88]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	490e      	ldr	r1, [pc, #56]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353a:	f000 f821 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800353e:	4602      	mov	r2, r0
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	490a      	ldr	r1, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	5ccb      	ldrb	r3, [r1, r3]
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1cc>)
 8003554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x1d0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe f95e 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40022000 	.word	0x40022000
 8003570:	40021000 	.word	0x40021000
 8003574:	08004748 	.word	0x08004748
 8003578:	20000020 	.word	0x20000020
 800357c:	20000024 	.word	0x20000024

08003580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b490      	push	{r4, r7}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <HAL_RCC_GetSysClockFreq+0xac>)
 8003588:	1d3c      	adds	r4, r7, #4
 800358a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800358c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003590:	f240 2301 	movw	r3, #513	; 0x201
 8003594:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035aa:	4b21      	ldr	r3, [pc, #132]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x40>
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x46>
 80035be:	e02b      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035c2:	623b      	str	r3, [r7, #32]
      break;
 80035c4:	e02b      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	0c9b      	lsrs	r3, r3, #18
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3328      	adds	r3, #40	; 0x28
 80035d0:	443b      	add	r3, r7
 80035d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d012      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	0c5b      	lsrs	r3, r3, #17
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	3328      	adds	r3, #40	; 0x28
 80035ee:	443b      	add	r3, r7
 80035f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035fa:	fb03 f202 	mul.w	r2, r3, r2
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
 8003606:	e004      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <HAL_RCC_GetSysClockFreq+0xb8>)
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	623b      	str	r3, [r7, #32]
      break;
 8003616:	e002      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb4>)
 800361a:	623b      	str	r3, [r7, #32]
      break;
 800361c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361e:	6a3b      	ldr	r3, [r7, #32]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc90      	pop	{r4, r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	08004638 	.word	0x08004638
 8003630:	40021000 	.word	0x40021000
 8003634:	007a1200 	.word	0x007a1200
 8003638:	003d0900 	.word	0x003d0900

0800363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <HAL_RCC_GetHCLKFreq+0x10>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr
 800364c:	20000020 	.word	0x20000020

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003654:	f7ff fff2 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	08004758 	.word	0x08004758

08003678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800367c:	f7ff ffde 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	0adb      	lsrs	r3, r3, #11
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4903      	ldr	r1, [pc, #12]	; (800369c <HAL_RCC_GetPCLK2Freq+0x24>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000
 800369c:	08004758 	.word	0x08004758

080036a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <RCC_Delay+0x34>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <RCC_Delay+0x38>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	0a5b      	lsrs	r3, r3, #9
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036bc:	bf00      	nop
  }
  while (Delay --);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	60fa      	str	r2, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f9      	bne.n	80036bc <RCC_Delay+0x1c>
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	20000020 	.word	0x20000020
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e033      	b.n	8003756 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fd ff8c 	bl	8001620 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb61 	bl	8003dd8 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003734:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003744:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d117      	bne.n	80037c6 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d012      	beq.n	80037c6 <HAL_USART_IRQHandler+0x66>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b22      	cmp	r3, #34	; 0x22
 80037b4:	d103      	bne.n	80037be <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9b4 	bl	8003b24 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 80037bc:	e0e9      	b.n	8003992 <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fa36 	bl	8003c30 <USART_TransmitReceive_IT>
      return;
 80037c4:	e0e5      	b.n	8003992 <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80bb 	beq.w	8003944 <HAL_USART_IRQHandler+0x1e4>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <HAL_USART_IRQHandler+0x84>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 80b0 	beq.w	8003944 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_USART_IRQHandler+0xa4>
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_USART_IRQHandler+0xc4>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_USART_IRQHandler+0xe4>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0204 	orr.w	r2, r3, #4
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00f      	beq.n	800386e <HAL_USART_IRQHandler+0x10e>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_USART_IRQHandler+0x102>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0208 	orr.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 808c 	beq.w	8003990 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d011      	beq.n	80038a6 <HAL_USART_IRQHandler+0x146>
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00c      	beq.n	80038a6 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b22      	cmp	r3, #34	; 0x22
 8003896:	d103      	bne.n	80038a0 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f943 	bl	8003b24 <USART_Receive_IT>
 800389e:	e002      	b.n	80038a6 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f9c5 	bl	8003c30 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf14      	ite	ne
 80038b4:	2301      	movne	r3, #1
 80038b6:	2300      	moveq	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <HAL_USART_IRQHandler+0x16e>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d031      	beq.n	8003932 <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f888 	bl	80039e4 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d023      	beq.n	800392a <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f0:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d013      	beq.n	8003922 <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	4a26      	ldr	r2, [pc, #152]	; (8003998 <HAL_USART_IRQHandler+0x238>)
 8003900:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe f906 	bl	8001b18 <HAL_DMA_Abort_IT>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d016      	beq.n	8003940 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800391c:	4610      	mov	r0, r2
 800391e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003920:	e00e      	b.n	8003940 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f855 	bl	80039d2 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003928:	e00a      	b.n	8003940 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f851 	bl	80039d2 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003930:	e006      	b.n	8003940 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f84d 	bl	80039d2 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800393e:	e027      	b.n	8003990 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003940:	bf00      	nop
    return;
 8003942:	e025      	b.n	8003990 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d012      	beq.n	8003974 <HAL_USART_IRQHandler+0x214>
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b12      	cmp	r3, #18
 8003962:	d103      	bne.n	800396c <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f86e 	bl	8003a46 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 800396a:	e012      	b.n	8003992 <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f95f 	bl	8003c30 <USART_TransmitReceive_IT>
    return;
 8003972:	e00e      	b.n	8003992 <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_USART_IRQHandler+0x232>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	2b00      	cmp	r3, #0
 8003986:	d004      	beq.n	8003992 <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8ab 	bl	8003ae4 <USART_EndTransmit_IT>
    return;
 800398e:	e000      	b.n	8003992 <HAL_USART_IRQHandler+0x232>
    return;
 8003990:	bf00      	nop
  }
}
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	08003a1f 	.word	0x08003a1f

0800399c <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr

08003a1e <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ffca 	bl	80039d2 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	d13e      	bne.n	8003ad8 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a62:	d114      	bne.n	8003a8e <USART_Transmit_IT+0x48>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d110      	bne.n	8003a8e <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a80:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
 8003a8c:	e008      	b.n	8003aa0 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c59      	adds	r1, r3, #1
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6251      	str	r1, [r2, #36]	; 0x24
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4619      	mov	r1, r3
 8003aae:	8551      	strh	r1, [r2, #42]	; 0x2a
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac2:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ad2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr

08003ae4 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003afa:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff41 	bl	800399c <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b22      	cmp	r3, #34	; 0x22
 8003b36:	d176      	bne.n	8003c26 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b40:	d117      	bne.n	8003b72 <USART_Receive_IT+0x4e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b70:	e026      	b.n	8003bc0 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b84:	d007      	beq.n	8003b96 <USART_Receive_IT+0x72>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <USART_Receive_IT+0x80>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e008      	b.n	8003bb6 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d120      	bne.n	8003c1a <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0220 	bic.w	r2, r2, #32
 8003be6:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf6:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fecc 	bl	80039ae <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e006      	b.n	8003c28 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	22ff      	movs	r2, #255	; 0xff
 8003c20:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e000      	b.n	8003c28 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b32      	cmp	r3, #50	; 0x32
 8003c42:	f040 80c4 	bne.w	8003dce <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03f      	beq.n	8003cd0 <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5a:	2b80      	cmp	r3, #128	; 0x80
 8003c5c:	d138      	bne.n	8003cd0 <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c66:	d116      	bne.n	8003c96 <USART_TransmitReceive_IT+0x66>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d112      	bne.n	8003c96 <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c88:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24
 8003c94:	e008      	b.n	8003ca8 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c59      	adds	r1, r3, #1
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6251      	str	r1, [r2, #36]	; 0x24
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cce:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d051      	beq.n	8003d7e <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d14a      	bne.n	8003d7e <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf0:	d117      	bne.n	8003d22 <USART_TransmitReceive_IT+0xf2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d113      	bne.n	8003d22 <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	1c9a      	adds	r2, r3, #2
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d20:	e026      	b.n	8003d70 <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d34:	d007      	beq.n	8003d46 <USART_TransmitReceive_IT+0x116>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <USART_TransmitReceive_IT+0x124>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	e008      	b.n	8003d66 <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d120      	bne.n	8003dca <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0220 	bic.w	r2, r2, #32
 8003d96:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da6:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fdfd 	bl	80039c0 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e002      	b.n	8003dd0 <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 020c 	bic.w	r2, r2, #12
 8003df2:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003e0c:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e3a:	f023 030c 	bic.w	r3, r3, #12
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695a      	ldr	r2, [r3, #20]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e6c:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a53      	ldr	r2, [pc, #332]	; (8003fc0 <USART_SetConfig+0x1e8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d14f      	bne.n	8003f18 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7ff fbfe 	bl	8003678 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009a      	lsls	r2, r3, #2
 8003e88:	441a      	add	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	4a4b      	ldr	r2, [pc, #300]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	0119      	lsls	r1, r3, #4
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009a      	lsls	r2, r3, #2
 8003ea8:	441a      	add	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003eb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	2064      	movs	r0, #100	; 0x64
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	3332      	adds	r3, #50	; 0x32
 8003ec8:	4a3e      	ldr	r2, [pc, #248]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003ed6:	4419      	add	r1, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	009a      	lsls	r2, r3, #2
 8003ee2:	441a      	add	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eee:	4b35      	ldr	r3, [pc, #212]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003ef0:	fba3 0302 	umull	r0, r3, r3, r2
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	2064      	movs	r0, #100	; 0x64
 8003ef8:	fb00 f303 	mul.w	r3, r0, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	3332      	adds	r3, #50	; 0x32
 8003f02:	4a30      	ldr	r2, [pc, #192]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	440a      	add	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003f16:	e04e      	b.n	8003fb6 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7ff fb9a 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009a      	lsls	r2, r3, #2
 8003f28:	441a      	add	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	0119      	lsls	r1, r3, #4
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f54:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003f56:	fba3 0302 	umull	r0, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2064      	movs	r0, #100	; 0x64
 8003f5e:	fb00 f303 	mul.w	r3, r0, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	3332      	adds	r3, #50	; 0x32
 8003f68:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003f76:	4419      	add	r1, r3
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009a      	lsls	r2, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003f90:	fba3 0302 	umull	r0, r3, r3, r2
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	2064      	movs	r0, #100	; 0x64
 8003f98:	fb00 f303 	mul.w	r3, r0, r3
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	3332      	adds	r3, #50	; 0x32
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <USART_SetConfig+0x1ec>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	f003 020f 	and.w	r2, r3, #15
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	51eb851f 	.word	0x51eb851f

08003fc8 <malloc>:
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <malloc+0xc>)
 8003fca:	4601      	mov	r1, r0
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	f000 b823 	b.w	8004018 <_malloc_r>
 8003fd2:	bf00      	nop
 8003fd4:	20000078 	.word	0x20000078

08003fd8 <sbrk_aligned>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4e0e      	ldr	r6, [pc, #56]	; (8004014 <sbrk_aligned+0x3c>)
 8003fdc:	460c      	mov	r4, r1
 8003fde:	6831      	ldr	r1, [r6, #0]
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	b911      	cbnz	r1, 8003fea <sbrk_aligned+0x12>
 8003fe4:	f000 f8ac 	bl	8004140 <_sbrk_r>
 8003fe8:	6030      	str	r0, [r6, #0]
 8003fea:	4621      	mov	r1, r4
 8003fec:	4628      	mov	r0, r5
 8003fee:	f000 f8a7 	bl	8004140 <_sbrk_r>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	d00a      	beq.n	800400c <sbrk_aligned+0x34>
 8003ff6:	1cc4      	adds	r4, r0, #3
 8003ff8:	f024 0403 	bic.w	r4, r4, #3
 8003ffc:	42a0      	cmp	r0, r4
 8003ffe:	d007      	beq.n	8004010 <sbrk_aligned+0x38>
 8004000:	1a21      	subs	r1, r4, r0
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f89c 	bl	8004140 <_sbrk_r>
 8004008:	3001      	adds	r0, #1
 800400a:	d101      	bne.n	8004010 <sbrk_aligned+0x38>
 800400c:	f04f 34ff 	mov.w	r4, #4294967295
 8004010:	4620      	mov	r0, r4
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	2000013c 	.word	0x2000013c

08004018 <_malloc_r>:
 8004018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800401c:	1ccd      	adds	r5, r1, #3
 800401e:	f025 0503 	bic.w	r5, r5, #3
 8004022:	3508      	adds	r5, #8
 8004024:	2d0c      	cmp	r5, #12
 8004026:	bf38      	it	cc
 8004028:	250c      	movcc	r5, #12
 800402a:	2d00      	cmp	r5, #0
 800402c:	4607      	mov	r7, r0
 800402e:	db01      	blt.n	8004034 <_malloc_r+0x1c>
 8004030:	42a9      	cmp	r1, r5
 8004032:	d905      	bls.n	8004040 <_malloc_r+0x28>
 8004034:	230c      	movs	r3, #12
 8004036:	2600      	movs	r6, #0
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	4630      	mov	r0, r6
 800403c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004040:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004114 <_malloc_r+0xfc>
 8004044:	f000 f868 	bl	8004118 <__malloc_lock>
 8004048:	f8d8 3000 	ldr.w	r3, [r8]
 800404c:	461c      	mov	r4, r3
 800404e:	bb5c      	cbnz	r4, 80040a8 <_malloc_r+0x90>
 8004050:	4629      	mov	r1, r5
 8004052:	4638      	mov	r0, r7
 8004054:	f7ff ffc0 	bl	8003fd8 <sbrk_aligned>
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	4604      	mov	r4, r0
 800405c:	d155      	bne.n	800410a <_malloc_r+0xf2>
 800405e:	f8d8 4000 	ldr.w	r4, [r8]
 8004062:	4626      	mov	r6, r4
 8004064:	2e00      	cmp	r6, #0
 8004066:	d145      	bne.n	80040f4 <_malloc_r+0xdc>
 8004068:	2c00      	cmp	r4, #0
 800406a:	d048      	beq.n	80040fe <_malloc_r+0xe6>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	4631      	mov	r1, r6
 8004070:	4638      	mov	r0, r7
 8004072:	eb04 0903 	add.w	r9, r4, r3
 8004076:	f000 f863 	bl	8004140 <_sbrk_r>
 800407a:	4581      	cmp	r9, r0
 800407c:	d13f      	bne.n	80040fe <_malloc_r+0xe6>
 800407e:	6821      	ldr	r1, [r4, #0]
 8004080:	4638      	mov	r0, r7
 8004082:	1a6d      	subs	r5, r5, r1
 8004084:	4629      	mov	r1, r5
 8004086:	f7ff ffa7 	bl	8003fd8 <sbrk_aligned>
 800408a:	3001      	adds	r0, #1
 800408c:	d037      	beq.n	80040fe <_malloc_r+0xe6>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	442b      	add	r3, r5
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	f8d8 3000 	ldr.w	r3, [r8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d038      	beq.n	800410e <_malloc_r+0xf6>
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	42a2      	cmp	r2, r4
 80040a0:	d12b      	bne.n	80040fa <_malloc_r+0xe2>
 80040a2:	2200      	movs	r2, #0
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e00f      	b.n	80040c8 <_malloc_r+0xb0>
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	1b52      	subs	r2, r2, r5
 80040ac:	d41f      	bmi.n	80040ee <_malloc_r+0xd6>
 80040ae:	2a0b      	cmp	r2, #11
 80040b0:	d917      	bls.n	80040e2 <_malloc_r+0xca>
 80040b2:	1961      	adds	r1, r4, r5
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	6025      	str	r5, [r4, #0]
 80040b8:	bf18      	it	ne
 80040ba:	6059      	strne	r1, [r3, #4]
 80040bc:	6863      	ldr	r3, [r4, #4]
 80040be:	bf08      	it	eq
 80040c0:	f8c8 1000 	streq.w	r1, [r8]
 80040c4:	5162      	str	r2, [r4, r5]
 80040c6:	604b      	str	r3, [r1, #4]
 80040c8:	4638      	mov	r0, r7
 80040ca:	f104 060b 	add.w	r6, r4, #11
 80040ce:	f000 f829 	bl	8004124 <__malloc_unlock>
 80040d2:	f026 0607 	bic.w	r6, r6, #7
 80040d6:	1d23      	adds	r3, r4, #4
 80040d8:	1af2      	subs	r2, r6, r3
 80040da:	d0ae      	beq.n	800403a <_malloc_r+0x22>
 80040dc:	1b9b      	subs	r3, r3, r6
 80040de:	50a3      	str	r3, [r4, r2]
 80040e0:	e7ab      	b.n	800403a <_malloc_r+0x22>
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	6862      	ldr	r2, [r4, #4]
 80040e6:	d1dd      	bne.n	80040a4 <_malloc_r+0x8c>
 80040e8:	f8c8 2000 	str.w	r2, [r8]
 80040ec:	e7ec      	b.n	80040c8 <_malloc_r+0xb0>
 80040ee:	4623      	mov	r3, r4
 80040f0:	6864      	ldr	r4, [r4, #4]
 80040f2:	e7ac      	b.n	800404e <_malloc_r+0x36>
 80040f4:	4634      	mov	r4, r6
 80040f6:	6876      	ldr	r6, [r6, #4]
 80040f8:	e7b4      	b.n	8004064 <_malloc_r+0x4c>
 80040fa:	4613      	mov	r3, r2
 80040fc:	e7cc      	b.n	8004098 <_malloc_r+0x80>
 80040fe:	230c      	movs	r3, #12
 8004100:	4638      	mov	r0, r7
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	f000 f80e 	bl	8004124 <__malloc_unlock>
 8004108:	e797      	b.n	800403a <_malloc_r+0x22>
 800410a:	6025      	str	r5, [r4, #0]
 800410c:	e7dc      	b.n	80040c8 <_malloc_r+0xb0>
 800410e:	605b      	str	r3, [r3, #4]
 8004110:	deff      	udf	#255	; 0xff
 8004112:	bf00      	nop
 8004114:	20000138 	.word	0x20000138

08004118 <__malloc_lock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_lock+0x8>)
 800411a:	f000 b84b 	b.w	80041b4 <__retarget_lock_acquire_recursive>
 800411e:	bf00      	nop
 8004120:	2000027c 	.word	0x2000027c

08004124 <__malloc_unlock>:
 8004124:	4801      	ldr	r0, [pc, #4]	; (800412c <__malloc_unlock+0x8>)
 8004126:	f000 b846 	b.w	80041b6 <__retarget_lock_release_recursive>
 800412a:	bf00      	nop
 800412c:	2000027c 	.word	0x2000027c

08004130 <memset>:
 8004130:	4603      	mov	r3, r0
 8004132:	4402      	add	r2, r0
 8004134:	4293      	cmp	r3, r2
 8004136:	d100      	bne.n	800413a <memset+0xa>
 8004138:	4770      	bx	lr
 800413a:	f803 1b01 	strb.w	r1, [r3], #1
 800413e:	e7f9      	b.n	8004134 <memset+0x4>

08004140 <_sbrk_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	2300      	movs	r3, #0
 8004144:	4d05      	ldr	r5, [pc, #20]	; (800415c <_sbrk_r+0x1c>)
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fd faee 	bl	800172c <_sbrk>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_sbrk_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_sbrk_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000278 	.word	0x20000278

08004160 <__errno>:
 8004160:	4b01      	ldr	r3, [pc, #4]	; (8004168 <__errno+0x8>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000078 	.word	0x20000078

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2600      	movs	r6, #0
 8004170:	4d0c      	ldr	r5, [pc, #48]	; (80041a4 <__libc_init_array+0x38>)
 8004172:	4c0d      	ldr	r4, [pc, #52]	; (80041a8 <__libc_init_array+0x3c>)
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	f000 f82a 	bl	80041d4 <_init>
 8004180:	2600      	movs	r6, #0
 8004182:	4d0a      	ldr	r5, [pc, #40]	; (80041ac <__libc_init_array+0x40>)
 8004184:	4c0a      	ldr	r4, [pc, #40]	; (80041b0 <__libc_init_array+0x44>)
 8004186:	1b64      	subs	r4, r4, r5
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	08004760 	.word	0x08004760
 80041a8:	08004760 	.word	0x08004760
 80041ac:	08004760 	.word	0x08004760
 80041b0:	08004764 	.word	0x08004764

080041b4 <__retarget_lock_acquire_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <__retarget_lock_release_recursive>:
 80041b6:	4770      	bx	lr

080041b8 <memcpy>:
 80041b8:	440a      	add	r2, r1
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80041c0:	d100      	bne.n	80041c4 <memcpy+0xc>
 80041c2:	4770      	bx	lr
 80041c4:	b510      	push	{r4, lr}
 80041c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ca:	4291      	cmp	r1, r2
 80041cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041d0:	d1f9      	bne.n	80041c6 <memcpy+0xe>
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
