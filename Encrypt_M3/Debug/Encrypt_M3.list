
Encrypt_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800459c  0800459c  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800459c  0800459c  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800459c  0800459c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080045a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200000bc  08004660  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004660  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009852  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf5  00000000  00000000  0002997a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bc  00000000  00000000  0002c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000176b9  00000000  00000000  0002c82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf4d  00000000  00000000  00043ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084815  00000000  00000000  00050e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c10  00000000  00000000  000d5648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d8258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	080040a0 	.word	0x080040a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	080040a0 	.word	0x080040a0

0800014c <atCRC>:
uint8_t CRC_LSB = 0x00;
uint8_t CRC_MSB = 0x00;


void atCRC(uint8_t *data, uint8_t size, uint8_t *crc_le)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]
    uint8_t counter;
    uint16_t crc_register = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	83bb      	strh	r3, [r7, #28]
    uint16_t polynom = 0x8005;
 800015e:	f248 0305 	movw	r3, #32773	; 0x8005
 8000162:	833b      	strh	r3, [r7, #24]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 1; counter < (size - 2); counter++)
 8000164:	2301      	movs	r3, #1
 8000166:	77fb      	strb	r3, [r7, #31]
 8000168:	e027      	b.n	80001ba <atCRC+0x6e>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 800016a:	2301      	movs	r3, #1
 800016c:	76fb      	strb	r3, [r7, #27]
 800016e:	e01e      	b.n	80001ae <atCRC+0x62>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 8000170:	7ffb      	ldrb	r3, [r7, #31]
 8000172:	68fa      	ldr	r2, [r7, #12]
 8000174:	4413      	add	r3, r2
 8000176:	781a      	ldrb	r2, [r3, #0]
 8000178:	7efb      	ldrb	r3, [r7, #27]
 800017a:	4013      	ands	r3, r2
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b00      	cmp	r3, #0
 8000180:	bf14      	ite	ne
 8000182:	2301      	movne	r3, #1
 8000184:	2300      	moveq	r3, #0
 8000186:	b2db      	uxtb	r3, r3
 8000188:	75fb      	strb	r3, [r7, #23]
            crc_bit = crc_register >> 15;
 800018a:	8bbb      	ldrh	r3, [r7, #28]
 800018c:	0bdb      	lsrs	r3, r3, #15
 800018e:	b29b      	uxth	r3, r3
 8000190:	75bb      	strb	r3, [r7, #22]
            crc_register <<= 1;
 8000192:	8bbb      	ldrh	r3, [r7, #28]
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	83bb      	strh	r3, [r7, #28]
            if (data_bit != crc_bit)
 8000198:	7dfa      	ldrb	r2, [r7, #23]
 800019a:	7dbb      	ldrb	r3, [r7, #22]
 800019c:	429a      	cmp	r2, r3
 800019e:	d003      	beq.n	80001a8 <atCRC+0x5c>
            {
                crc_register ^= polynom;
 80001a0:	8bba      	ldrh	r2, [r7, #28]
 80001a2:	8b3b      	ldrh	r3, [r7, #24]
 80001a4:	4053      	eors	r3, r2
 80001a6:	83bb      	strh	r3, [r7, #28]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80001a8:	7efb      	ldrb	r3, [r7, #27]
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	76fb      	strb	r3, [r7, #27]
 80001ae:	7efb      	ldrb	r3, [r7, #27]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d1dd      	bne.n	8000170 <atCRC+0x24>
    for (counter = 1; counter < (size - 2); counter++)
 80001b4:	7ffb      	ldrb	r3, [r7, #31]
 80001b6:	3301      	adds	r3, #1
 80001b8:	77fb      	strb	r3, [r7, #31]
 80001ba:	7ffa      	ldrb	r2, [r7, #31]
 80001bc:	7afb      	ldrb	r3, [r7, #11]
 80001be:	3b02      	subs	r3, #2
 80001c0:	429a      	cmp	r2, r3
 80001c2:	dbd2      	blt.n	800016a <atCRC+0x1e>
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
 80001c4:	8bbb      	ldrh	r3, [r7, #28]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
 80001cc:	8bbb      	ldrh	r3, [r7, #28]
 80001ce:	0a1b      	lsrs	r3, r3, #8
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3301      	adds	r3, #1
 80001d6:	b2d2      	uxtb	r2, r2
 80001d8:	701a      	strb	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	3724      	adds	r7, #36	; 0x24
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <WakeUp>:


void WakeUp(uint8_t *receiv){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af02      	add	r7, sp, #8
 80001ea:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Receive(&hi2c2, 0xFE, &data, sizeof(data), 1000);
 80001f0:	f107 020f 	add.w	r2, r7, #15
 80001f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2301      	movs	r3, #1
 80001fc:	21fe      	movs	r1, #254	; 0xfe
 80001fe:	4818      	ldr	r0, [pc, #96]	; (8000260 <WakeUp+0x7c>)
 8000200:	f002 f82c 	bl	800225c <HAL_I2C_Master_Receive>
	HAL_Delay(5); // 2.5 ms para acordar; 45 ms para entrar em sleep
 8000204:	2005      	movs	r0, #5
 8000206:	f001 fabb 	bl	8001780 <HAL_Delay>
	// first read: 0 byte read - should receive an ACK

	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, &data, 1, 1000);
 800020a:	f107 020f 	add.w	r2, r7, #15
 800020e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2301      	movs	r3, #1
 8000216:	21c8      	movs	r1, #200	; 0xc8
 8000218:	4811      	ldr	r0, [pc, #68]	; (8000260 <WakeUp+0x7c>)
 800021a:	f002 f81f 	bl	800225c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 800021e:	2005      	movs	r0, #5
 8000220:	f001 faae 	bl	8001780 <HAL_Delay>

	// Read 88bytes
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, &data, sizeof(data), 1000);	// Send 1 byte
 8000224:	f107 020f 	add.w	r2, r7, #15
 8000228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2301      	movs	r3, #1
 8000230:	21c8      	movs	r1, #200	; 0xc8
 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <WakeUp+0x7c>)
 8000234:	f001 ff14 	bl	8002060 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000238:	2005      	movs	r0, #5
 800023a:	f001 faa1 	bl	8001780 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, 4, 1000); 		    	// Receiv: 0x04, 0x11, 0x33, 0x43.
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	2304      	movs	r3, #4
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	21c8      	movs	r1, #200	; 0xc8
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <WakeUp+0x7c>)
 800024c:	f002 f806 	bl	800225c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000250:	2005      	movs	r0, #5
 8000252:	f001 fa95 	bl	8001780 <HAL_Delay>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	200000d8 	.word	0x200000d8

08000264 <ReadConfig>:


void ReadConfig(uint8_t *data, uint16_t size, uint8_t *receiv) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af02      	add	r7, sp, #8
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	460b      	mov	r3, r1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, data, 8, 1000); 		    // Send read command
 8000272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2308      	movs	r3, #8
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	480b      	ldr	r0, [pc, #44]	; (80002ac <ReadConfig+0x48>)
 8000280:	f001 feee 	bl	8002060 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000284:	2005      	movs	r0, #5
 8000286:	f001 fa7b 	bl	8001780 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000); 	    // Receive: data packet size, 0x01 0x23..., CRC_LSB, CRC_MSB
 800028a:	897b      	ldrh	r3, [r7, #10]
 800028c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000290:	9200      	str	r2, [sp, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	21c8      	movs	r1, #200	; 0xc8
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <ReadConfig+0x48>)
 8000298:	f001 ffe0 	bl	800225c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 800029c:	2005      	movs	r0, #5
 800029e:	f001 fa6f 	bl	8001780 <HAL_Delay>
}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000d8 	.word	0x200000d8

080002b0 <CommandNonce>:
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
	HAL_Delay(5);
}


void CommandNonce(uint8_t *NumIn, uint16_t size, uint8_t *receiv){ //OK
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	460b      	mov	r3, r1
 80002ba:	607a      	str	r2, [r7, #4]
 80002bc:	817b      	strh	r3, [r7, #10]

	// NONCE command: {COMMAND, COUNT, OPCODE, Param1_mode, 0x00, 0x00, NumIn[20], CRC_LSB, CRC_MSB}
	uint8_t noncecommand[28]; //40
	uint8_t CRC_receiv[2];

    noncecommand[0] = COMMAND;
 80002be:	2303      	movs	r3, #3
 80002c0:	763b      	strb	r3, [r7, #24]
    noncecommand[1] = SIZE_WRITE_NONCE20; //SIZE_WRITE_NONCE32;
 80002c2:	231b      	movs	r3, #27
 80002c4:	767b      	strb	r3, [r7, #25]
    noncecommand[2] = COMMAND_NONCE;
 80002c6:	2316      	movs	r3, #22
 80002c8:	76bb      	strb	r3, [r7, #26]
    noncecommand[3] = 0x00; // modo3
 80002ca:	2300      	movs	r3, #0
 80002cc:	76fb      	strb	r3, [r7, #27]
    noncecommand[4] = 0x00;
 80002ce:	2300      	movs	r3, #0
 80002d0:	773b      	strb	r3, [r7, #28]
    noncecommand[5] = 0x00;
 80002d2:	2300      	movs	r3, #0
 80002d4:	777b      	strb	r3, [r7, #29]

	for(uint8_t i = 0; i <= 20; i++){  // <=32
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002dc:	e010      	b.n	8000300 <CommandNonce+0x50>
		 noncecommand[6 + i] = NumIn[i];
 80002de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	441a      	add	r2, r3
 80002e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002ea:	3306      	adds	r3, #6
 80002ec:	7812      	ldrb	r2, [r2, #0]
 80002ee:	3338      	adds	r3, #56	; 0x38
 80002f0:	443b      	add	r3, r7
 80002f2:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(uint8_t i = 0; i <= 20; i++){  // <=32
 80002f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002fa:	3301      	adds	r3, #1
 80002fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000304:	2b14      	cmp	r3, #20
 8000306:	d9ea      	bls.n	80002de <CommandNonce+0x2e>
	}

	atCRC(noncecommand,sizeof(noncecommand), CRC_receiv);
 8000308:	f107 0214 	add.w	r2, r7, #20
 800030c:	f107 0318 	add.w	r3, r7, #24
 8000310:	211c      	movs	r1, #28
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff1a 	bl	800014c <atCRC>
	noncecommand[sizeof(noncecommand) - 2] = CRC_receiv[0] ;
 8000318:	7d3b      	ldrb	r3, [r7, #20]
 800031a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	noncecommand[sizeof(noncecommand) - 1] = CRC_receiv[1] ;
 800031e:	7d7b      	ldrb	r3, [r7, #21]
 8000320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, noncecommand, sizeof(noncecommand), 1000);
 8000324:	f107 0218 	add.w	r2, r7, #24
 8000328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	231c      	movs	r3, #28
 8000330:	21c8      	movs	r1, #200	; 0xc8
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <CommandNonce+0xb0>)
 8000334:	f001 fe94 	bl	8002060 <HAL_I2C_Master_Transmit>
	HAL_Delay(40);
 8000338:	2028      	movs	r0, #40	; 0x28
 800033a:	f001 fa21 	bl	8001780 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 800033e:	897b      	ldrh	r3, [r7, #10]
 8000340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	21c8      	movs	r1, #200	; 0xc8
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <CommandNonce+0xb0>)
 800034c:	f001 ff86 	bl	800225c <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 8000350:	200a      	movs	r0, #10
 8000352:	f001 fa15 	bl	8001780 <HAL_Delay>
}
 8000356:	bf00      	nop
 8000358:	3738      	adds	r7, #56	; 0x38
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	200000d8 	.word	0x200000d8

08000364 <GendigCommand>:


void GendigCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t size, uint8_t *receiv){
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af02      	add	r7, sp, #8
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	4603      	mov	r3, r0
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	460b      	mov	r3, r1
 8000372:	71bb      	strb	r3, [r7, #6]
 8000374:	4613      	mov	r3, r2
 8000376:	717b      	strb	r3, [r7, #5]
	uint8_t GenDig[8];
	uint8_t CRC_receiv[2];
	//{COMMAND, SIZE_WRITE_GENDIG, COMMAND_GENDIG, ZONE_DATA, SlotID_LSB, SlotID_MSB, /*0x33, 0xe8*/ 0x00, 0x00};
	//atCRC(GenDig,sizeof(GenDig));

	GenDig[0] = COMMAND;
 8000378:	2303      	movs	r3, #3
 800037a:	743b      	strb	r3, [r7, #16]
	GenDig[1] = SIZE_WRITE_GENDIG;
 800037c:	2307      	movs	r3, #7
 800037e:	747b      	strb	r3, [r7, #17]
	GenDig[2] = COMMAND_GENDIG;
 8000380:	2315      	movs	r3, #21
 8000382:	74bb      	strb	r3, [r7, #18]
	GenDig[3] = ZONE_DATA;
 8000384:	2302      	movs	r3, #2
 8000386:	74fb      	strb	r3, [r7, #19]
	GenDig[4] = SlotID_LSB;
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	753b      	strb	r3, [r7, #20]
	GenDig[5] = SlotID_MSB;
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	757b      	strb	r3, [r7, #21]

	atCRC(GenDig,sizeof(GenDig), CRC_receiv);
 8000390:	f107 020c 	add.w	r2, r7, #12
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2108      	movs	r1, #8
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fed6 	bl	800014c <atCRC>
	GenDig[6] = CRC_receiv[0] ;
 80003a0:	7b3b      	ldrb	r3, [r7, #12]
 80003a2:	75bb      	strb	r3, [r7, #22]
	GenDig[7] = CRC_receiv[1] ;
 80003a4:	7b7b      	ldrb	r3, [r7, #13]
 80003a6:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, GenDig, sizeof(GenDig), 1000);
 80003a8:	f107 0210 	add.w	r2, r7, #16
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2308      	movs	r3, #8
 80003b4:	21c8      	movs	r1, #200	; 0xc8
 80003b6:	480b      	ldr	r0, [pc, #44]	; (80003e4 <GendigCommand+0x80>)
 80003b8:	f001 fe52 	bl	8002060 <HAL_I2C_Master_Transmit>
	HAL_Delay(30);
 80003bc:	201e      	movs	r0, #30
 80003be:	f001 f9df 	bl	8001780 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 80003c2:	797b      	ldrb	r3, [r7, #5]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	21c8      	movs	r1, #200	; 0xc8
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <GendigCommand+0x80>)
 80003d2:	f001 ff43 	bl	800225c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80003d6:	2005      	movs	r0, #5
 80003d8:	f001 f9d2 	bl	8001780 <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200000d8 	.word	0x200000d8

080003e8 <CheckMacCommand>:
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
	HAL_Delay(5);
}


void CheckMacCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t *ClientResp, uint16_t size, uint8_t *receiv) {
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b0a9      	sub	sp, #164	; 0xa4
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	603a      	str	r2, [r7, #0]
 80003f0:	461a      	mov	r2, r3
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
 80003f6:	460b      	mov	r3, r1
 80003f8:	71bb      	strb	r3, [r7, #6]
 80003fa:	4613      	mov	r3, r2
 80003fc:	80bb      	strh	r3, [r7, #4]
    uint8_t CheckMAC[85] = {0};
 80003fe:	2300      	movs	r3, #0
 8000400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000406:	2251      	movs	r2, #81	; 0x51
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 fdf6 	bl	8003ffc <memset>
    uint8_t CRC_receiv[2];
    uint8_t size_att = 0; // Inicializado para 0
 8000410:	2300      	movs	r3, #0
 8000412:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    uint8_t ClientChal[32] = {0x00};
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
 800041a:	f107 031c 	add.w	r3, r7, #28
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	619a      	str	r2, [r3, #24]
    uint8_t OtherData[13] = {0x08, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 800042e:	4b49      	ldr	r3, [pc, #292]	; (8000554 <CheckMacCommand+0x16c>)
 8000430:	f107 0408 	add.w	r4, r7, #8
 8000434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000436:	c407      	stmia	r4!, {r0, r1, r2}
 8000438:	7023      	strb	r3, [r4, #0]

    CheckMAC[0] = 0x03;
 800043a:	2303      	movs	r3, #3
 800043c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    CheckMAC[1] = 0x54;
 8000440:	2354      	movs	r3, #84	; 0x54
 8000442:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    CheckMAC[2] = COMMAND_CHECKMAC;
 8000446:	2328      	movs	r3, #40	; 0x28
 8000448:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    CheckMAC[3] = 0x01;    // mode
 800044c:	2301      	movs	r3, #1
 800044e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    CheckMAC[4] = SlotID_LSB;
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    CheckMAC[5] = SlotID_MSB;
 8000458:	79bb      	ldrb	r3, [r7, #6]
 800045a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            size_att++;
        }
      }
 */

    for (uint8_t i = 0; i <32; i++) {
 800045e:	2300      	movs	r3, #0
 8000460:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000464:	e011      	b.n	800048a <CheckMacCommand+0xa2>
            CheckMAC[6 + i] = ClientChal[i];
 8000466:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800046a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800046e:	3306      	adds	r3, #6
 8000470:	3298      	adds	r2, #152	; 0x98
 8000472:	443a      	add	r2, r7
 8000474:	f812 2c80 	ldrb.w	r2, [r2, #-128]
 8000478:	3398      	adds	r3, #152	; 0x98
 800047a:	443b      	add	r3, r7
 800047c:	f803 2c5c 	strb.w	r2, [r3, #-92]
    for (uint8_t i = 0; i <32; i++) {
 8000480:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000484:	3301      	adds	r3, #1
 8000486:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800048a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800048e:	2b1f      	cmp	r3, #31
 8000490:	d9e9      	bls.n	8000466 <CheckMacCommand+0x7e>
    }
    for (uint8_t i = 0; i <32; i++) {
 8000492:	2300      	movs	r3, #0
 8000494:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000498:	e010      	b.n	80004bc <CheckMacCommand+0xd4>
            CheckMAC[6+32+i] = ClientResp[i];
 800049a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800049e:	683a      	ldr	r2, [r7, #0]
 80004a0:	441a      	add	r2, r3
 80004a2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80004a6:	3326      	adds	r3, #38	; 0x26
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	3398      	adds	r3, #152	; 0x98
 80004ac:	443b      	add	r3, r7
 80004ae:	f803 2c5c 	strb.w	r2, [r3, #-92]
    for (uint8_t i = 0; i <32; i++) {
 80004b2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80004b6:	3301      	adds	r3, #1
 80004b8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80004bc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80004c0:	2b1f      	cmp	r3, #31
 80004c2:	d9ea      	bls.n	800049a <CheckMacCommand+0xb2>
    }
    for (uint8_t i = 0; i <13; i++) {
 80004c4:	2300      	movs	r3, #0
 80004c6:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80004ca:	e011      	b.n	80004f0 <CheckMacCommand+0x108>
            CheckMAC[6+64+i] = OtherData[i];
 80004cc:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80004d0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80004d4:	3346      	adds	r3, #70	; 0x46
 80004d6:	3298      	adds	r2, #152	; 0x98
 80004d8:	443a      	add	r2, r7
 80004da:	f812 2c90 	ldrb.w	r2, [r2, #-144]
 80004de:	3398      	adds	r3, #152	; 0x98
 80004e0:	443b      	add	r3, r7
 80004e2:	f803 2c5c 	strb.w	r2, [r3, #-92]
    for (uint8_t i = 0; i <13; i++) {
 80004e6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80004ea:	3301      	adds	r3, #1
 80004ec:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80004f0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80004f4:	2b0c      	cmp	r3, #12
 80004f6:	d9e9      	bls.n	80004cc <CheckMacCommand+0xe4>
    }

    atCRC(CheckMAC, sizeof(CheckMAC), CRC_receiv);
 80004f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80004fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000500:	2155      	movs	r1, #85	; 0x55
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe22 	bl	800014c <atCRC>
    CheckMAC[sizeof(CheckMAC) - 2] = CRC_receiv[0];
 8000508:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800050c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    CheckMAC[sizeof(CheckMAC) - 1] = CRC_receiv[1];
 8000510:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000514:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, CheckMAC, sizeof(CheckMAC), 1000);
 8000518:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2355      	movs	r3, #85	; 0x55
 8000524:	21c8      	movs	r1, #200	; 0xc8
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <CheckMacCommand+0x170>)
 8000528:	f001 fd9a 	bl	8002060 <HAL_I2C_Master_Transmit>
    HAL_Delay(40);
 800052c:	2028      	movs	r0, #40	; 0x28
 800052e:	f001 f927 	bl	8001780 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000538:	9200      	str	r2, [sp, #0]
 800053a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800053e:	21c8      	movs	r1, #200	; 0xc8
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <CheckMacCommand+0x170>)
 8000542:	f001 fe8b 	bl	800225c <HAL_I2C_Master_Receive>
    HAL_Delay(5);
 8000546:	2005      	movs	r0, #5
 8000548:	f001 f91a 	bl	8001780 <HAL_Delay>
}
 800054c:	bf00      	nop
 800054e:	379c      	adds	r7, #156	; 0x9c
 8000550:	46bd      	mov	sp, r7
 8000552:	bd90      	pop	{r4, r7, pc}
 8000554:	0800435c 	.word	0x0800435c
 8000558:	200000d8 	.word	0x200000d8

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8000562:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000564:	f001 f8aa 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f9fe 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 fa9c 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART1_Init();
 8000570:	f000 fa6e 	bl	8000a50 <MX_USART1_Init>
  MX_I2C2_Init();
 8000574:	f000 fa3e 	bl	80009f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  uint8_t readCommand0[8] = {0x03, 0x07, 0x02, 0x80, 0x00, 0x00, 0x09, 0xAD};
 8000578:	4ab0      	ldr	r2, [pc, #704]	; (800083c <main+0x2e0>)
 800057a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800057e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000582:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand1[8] = {0x03, 0x07, 0x02, 0x80, 0x08, 0x00, 0x0a, 0x4d};
 8000586:	4aae      	ldr	r2, [pc, #696]	; (8000840 <main+0x2e4>)
 8000588:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800058c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000590:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand2[8] = {0x03, 0x07, 0x02, 0x00, 0x10, 0x00, 0x1d, 0x9d};
 8000594:	4aab      	ldr	r2, [pc, #684]	; (8000844 <main+0x2e8>)
 8000596:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800059a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand3[8] = {0x03, 0x07, 0x02, 0x00, 0x11, 0x00, 0x14, 0x1d};
 80005a2:	4aa9      	ldr	r2, [pc, #676]	; (8000848 <main+0x2ec>)
 80005a4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80005a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ac:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand4[8] = {0x03, 0x07, 0x02, 0x00, 0x12, 0x00, 0x1b, 0x1d};
 80005b0:	4aa6      	ldr	r2, [pc, #664]	; (800084c <main+0x2f0>)
 80005b2:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80005b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand5[8] = {0x03, 0x07, 0x02, 0x00, 0x13, 0x00, 0x12, 0x9d};
 80005be:	4aa4      	ldr	r2, [pc, #656]	; (8000850 <main+0x2f4>)
 80005c0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80005c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand6[8] = {0x03, 0x07, 0x02, 0x00, 0x14, 0x00, 0x1e, 0xdd};
 80005cc:	4aa1      	ldr	r2, [pc, #644]	; (8000854 <main+0x2f8>)
 80005ce:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80005d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand7[8] = {0x03, 0x07, 0x02, 0x00, 0x15, 0x00, 0x17, 0x5d};
 80005da:	4a9f      	ldr	r2, [pc, #636]	; (8000858 <main+0x2fc>)
 80005dc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80005e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e4:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t readMASTERKEY[8] = {0x03, 0x07, 0x02, 0x82, 0x70, 0x00, 0x09, 0x8c};
 80005e8:	4a9c      	ldr	r2, [pc, #624]	; (800085c <main+0x300>)
 80005ea:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80005ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readDATA2[8] = {0x03, 0x07, 0x02, 0x82, 0x50, 0x00, 0x0a, 0x14};
 80005f6:	4a9a      	ldr	r2, [pc, #616]	; (8000860 <main+0x304>)
 80005f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80005fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000600:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t WritePwd2[8] =  {0x03, 0x07, 0x02, 0x82, 0x48, 0x00, 0x0a, 0x44};
 8000604:	4a97      	ldr	r2, [pc, #604]	; (8000864 <main+0x308>)
 8000606:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800060a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800060e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t LOBBYKEY_2[8] = {0x03, 0x07, 0x02,  0x82, 0x20, 0x00, 0x09, 0xb0};
 8000612:	4a95      	ldr	r2, [pc, #596]	; (8000868 <main+0x30c>)
 8000614:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t temp_nonce[] = {};

  uint8_t receiv_MASTERKEY[35] = {0};
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8000626:	f507 7312 	add.w	r3, r7, #584	; 0x248
 800062a:	221f      	movs	r2, #31
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fce4 	bl	8003ffc <memset>


  // NONCE
  uint8_t NumIn[20] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
 8000634:	4b8d      	ldr	r3, [pc, #564]	; (800086c <main+0x310>)
 8000636:	f507 740c 	add.w	r4, r7, #560	; 0x230
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	682b      	ldr	r3, [r5, #0]
 8000642:	6023      	str	r3, [r4, #0]
		  	  	  	  	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
						// 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
						//  0x00, 0x01};

  uint8_t aux[35] = {0};
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800064a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800064e:	221f      	movs	r2, #31
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fcd2 	bl	8003ffc <memset>
  uint8_t randout[35] = {0};
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800065e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8000662:	221f      	movs	r2, #31
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fcc8 	bl	8003ffc <memset>
  uint8_t tempkey[32] = {0};
 800066c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000670:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	3304      	adds	r3, #4
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	619a      	str	r2, [r3, #24]
  uint8_t LOBBYKEY_rec[35];

  uint8_t receiv_sha256[35];

  // SHA-256
  uint8_t sha_init[1] = {0};
 800068a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800068e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
  uint8_t SHA_receiv[35] = {0};
 8000696:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800069a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	3304      	adds	r3, #4
 80006a4:	221f      	movs	r2, #31
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fca7 	bl	8003ffc <memset>

  // GENDIG
  uint8_t gendig_receiv[4] = {0};
 80006ae:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80006b2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]


  //MAC
  uint8_t MAC_receiv[35] = {0};
 80006ba:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80006be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	221f      	movs	r2, #31
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f003 fc95 	bl	8003ffc <memset>
  uint8_t gendig_calc[32] = {0};
 80006d2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80006d6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	3304      	adds	r3, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]
 80006ee:	619a      	str	r2, [r3, #24]
  uint8_t MAC_calc[32] = {0};
 80006f0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80006f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	619a      	str	r2, [r3, #24]
  uint8_t CheckMAC_receiv[4] = {0};
 800070e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000712:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
  uint8_t dado[32] = {0};
 800071a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800071e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	3304      	adds	r3, #4
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
 8000736:	619a      	str	r2, [r3, #24]


  uint8_t read_byte[4];
  uint8_t receiv_ack[4] = {0};
 8000738:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800073c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]

  //uint8_t read_config[32] = {0};
  uint8_t read_config0[35] = {0};
 8000744:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000748:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	3304      	adds	r3, #4
 8000752:	221f      	movs	r2, #31
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fc50 	bl	8003ffc <memset>
  uint8_t read_config1[35] = {0};
 800075c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	3304      	adds	r3, #4
 800076a:	221f      	movs	r2, #31
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fc44 	bl	8003ffc <memset>
  uint8_t read_config2[7] = {0};
 8000774:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000778:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	3304      	adds	r3, #4
 8000782:	2100      	movs	r1, #0
 8000784:	460a      	mov	r2, r1
 8000786:	801a      	strh	r2, [r3, #0]
 8000788:	460a      	mov	r2, r1
 800078a:	709a      	strb	r2, [r3, #2]
  uint8_t read_config3[7] = {0};
 800078c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000790:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	2100      	movs	r1, #0
 800079c:	460a      	mov	r2, r1
 800079e:	801a      	strh	r2, [r3, #0]
 80007a0:	460a      	mov	r2, r1
 80007a2:	709a      	strb	r2, [r3, #2]
  uint8_t read_config4[7] = {0};
 80007a4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80007a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2100      	movs	r1, #0
 80007b4:	460a      	mov	r2, r1
 80007b6:	801a      	strh	r2, [r3, #0]
 80007b8:	460a      	mov	r2, r1
 80007ba:	709a      	strb	r2, [r3, #2]
  uint8_t read_config5[7] = {0};
 80007bc:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80007c0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2100      	movs	r1, #0
 80007cc:	460a      	mov	r2, r1
 80007ce:	801a      	strh	r2, [r3, #0]
 80007d0:	460a      	mov	r2, r1
 80007d2:	709a      	strb	r2, [r3, #2]
  uint8_t read_config6[7] = {0};
 80007d4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80007d8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2100      	movs	r1, #0
 80007e4:	460a      	mov	r2, r1
 80007e6:	801a      	strh	r2, [r3, #0]
 80007e8:	460a      	mov	r2, r1
 80007ea:	709a      	strb	r2, [r3, #2]
  uint8_t read_config7[7] = {0};
 80007ec:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80007f0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2100      	movs	r1, #0
 80007fc:	460a      	mov	r2, r1
 80007fe:	801a      	strh	r2, [r3, #0]
 8000800:	460a      	mov	r2, r1
 8000802:	709a      	strb	r2, [r3, #2]
  uint8_t read_config8[7] = {0};
 8000804:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000808:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	3304      	adds	r3, #4
 8000812:	2100      	movs	r1, #0
 8000814:	460a      	mov	r2, r1
 8000816:	801a      	strh	r2, [r3, #0]
 8000818:	460a      	mov	r2, r1
 800081a:	709a      	strb	r2, [r3, #2]


  uint8_t data[32] = {0x00};
 800081c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000820:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	3304      	adds	r3, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]
 800083a:	e019      	b.n	8000870 <main+0x314>
 800083c:	08004394 	.word	0x08004394
 8000840:	0800439c 	.word	0x0800439c
 8000844:	080043a4 	.word	0x080043a4
 8000848:	080043ac 	.word	0x080043ac
 800084c:	080043b4 	.word	0x080043b4
 8000850:	080043bc 	.word	0x080043bc
 8000854:	080043c4 	.word	0x080043c4
 8000858:	080043cc 	.word	0x080043cc
 800085c:	080043d4 	.word	0x080043d4
 8000860:	080043dc 	.word	0x080043dc
 8000864:	080043e4 	.word	0x080043e4
 8000868:	080043ec 	.word	0x080043ec
 800086c:	080043f4 	.word	0x080043f4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WakeUp(read_byte);
 8000870:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fcb5 	bl	80001e4 <WakeUp>
	  //BlockConfigZone(receiv_ack);
	  //WriteDataZone();
	  //WriteOTPZone();
	  //BlockDataZone();

	  ReadConfig(readCommand0, 35, read_config0);
 800087a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800087e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8000882:	2123      	movs	r1, #35	; 0x23
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fced 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand1, 35, read_config1);
 800088a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800088e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000892:	2123      	movs	r1, #35	; 0x23
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fce5 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand2, 7, read_config2);
 800089a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800089e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80008a2:	2107      	movs	r1, #7
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fcdd 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand3, 7, read_config3);
 80008aa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80008ae:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80008b2:	2107      	movs	r1, #7
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcd5 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand4, 7, read_config4);
 80008ba:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80008be:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80008c2:	2107      	movs	r1, #7
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fccd 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand5, 7, read_config5);
 80008ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80008ce:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80008d2:	2107      	movs	r1, #7
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fcc5 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand6, 7, read_config6);
 80008da:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80008de:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80008e2:	2107      	movs	r1, #7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fcbd 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand7, 7, read_config7);
 80008ea:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80008ee:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80008f2:	2107      	movs	r1, #7
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fcb5 	bl	8000264 <ReadConfig>

	  CommandNonce(NumIn, 35, randout);
 80008fa:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80008fe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000902:	2123      	movs	r1, #35	; 0x23
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fcd3 	bl	80002b0 <CommandNonce>
	  //TempKeyGen(nonce_receiv, NumIn, 0, 55, 35, tempnonce);
	  GendigCommand(0x02, 0x00, 4, gendig_receiv);
 800090a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800090e:	2204      	movs	r2, #4
 8000910:	2100      	movs	r1, #0
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff fd26 	bl	8000364 <GendigCommand>
	  //SHACommandInit(1, sha_init);
	  //SHACommandCompute(35, SHA_receiv);

	  //MacCommand(0x02, 0x00, 35, MAC_receiv);
	  //calculateSHA256Hash(data, 32, hashString);
	  NonceSHA256Hash(randout, NumIn, tempkey);
 8000918:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800091c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8000920:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fbfd 	bl	8001124 <NonceSHA256Hash>
	  GenDigSHA256Hash(tempkey, gendig_calc);
 800092a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800092e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fc3d 	bl	80011b4 <GenDigSHA256Hash>
	  MACSHA256Hash(gendig_calc, MAC_calc);
 800093a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800093e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fca9 	bl	800129c <MACSHA256Hash>
	  CheckMacCommand(0x04, 0x00, MAC_calc, 4, CheckMAC_receiv);
 800094a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800094e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2304      	movs	r3, #4
 8000956:	2100      	movs	r1, #0
 8000958:	2004      	movs	r0, #4
 800095a:	f7ff fd45 	bl	80003e8 <CheckMacCommand>

	  //ReadEncript(LOBBYKEY_2, 35, LOBBYKEY_rec);
	  HAL_Delay(10);
 800095e:	200a      	movs	r0, #10
 8000960:	f000 ff0e 	bl	8001780 <HAL_Delay>
	  WakeUp(read_byte);
 8000964:	e784      	b.n	8000870 <main+0x314>
 8000966:	bf00      	nop

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b090      	sub	sp, #64	; 0x40
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	2228      	movs	r2, #40	; 0x28
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fb40 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f9df 	bl	8002d74 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009bc:	f000 f8ae 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fc4c 	bl	8003278 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009e6:	f000 f899 	bl	8000b1c <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3740      	adds	r7, #64	; 0x40
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C2_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_I2C2_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_I2C2_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_I2C2_Init+0x50>)
 8000a32:	f001 f9d1 	bl	8001dd8 <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 f86e 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000d8 	.word	0x200000d8
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	000186a0 	.word	0x000186a0

08000a50 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a56:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_USART1_Init+0x54>)
 8000a58:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART1_Init+0x50>)
 8000a8e:	f002 fd8b 	bl	80035a8 <HAL_USART_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000a98:	f000 f840 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000012c 	.word	0x2000012c
 8000aa4:	40013800 	.word	0x40013800

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000ab4:	f043 0310 	orr.w	r3, r3, #16
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f003 0320 	and.w	r3, r3, #32
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <MX_GPIO_Init+0x70>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <sha256_init>:
};

SHA256 ctx;

// Implementação do construtor SHA256::SHA256()
void sha256_init(SHA256 *ctx) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
    // Inicialize m_blocklen e m_bitlen
    ctx->m_blocklen = 0;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	669a      	str	r2, [r3, #104]	; 0x68
    ctx->m_bitlen = 0;
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    // Inicialize o estado do hash
    ctx->m_state[0] = 0x6a09e667;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <sha256_init+0x58>)
 8000b48:	601a      	str	r2, [r3, #0]
    ctx->m_state[1] = 0xbb67ae85;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <sha256_init+0x5c>)
 8000b4e:	605a      	str	r2, [r3, #4]
    ctx->m_state[2] = 0x3c6ef372;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <sha256_init+0x60>)
 8000b54:	609a      	str	r2, [r3, #8]
    ctx->m_state[3] = 0xa54ff53a;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <sha256_init+0x64>)
 8000b5a:	60da      	str	r2, [r3, #12]
    ctx->m_state[4] = 0x510e527f;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <sha256_init+0x68>)
 8000b60:	611a      	str	r2, [r3, #16]
    ctx->m_state[5] = 0x9b05688c;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <sha256_init+0x6c>)
 8000b66:	615a      	str	r2, [r3, #20]
    ctx->m_state[6] = 0x1f83d9ab;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <sha256_init+0x70>)
 8000b6c:	619a      	str	r2, [r3, #24]
    ctx->m_state[7] = 0x5be0cd19;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <sha256_init+0x74>)
 8000b72:	61da      	str	r2, [r3, #28]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	6a09e667 	.word	0x6a09e667
 8000b84:	bb67ae85 	.word	0xbb67ae85
 8000b88:	3c6ef372 	.word	0x3c6ef372
 8000b8c:	a54ff53a 	.word	0xa54ff53a
 8000b90:	510e527f 	.word	0x510e527f
 8000b94:	9b05688c 	.word	0x9b05688c
 8000b98:	1f83d9ab 	.word	0x1f83d9ab
 8000b9c:	5be0cd19 	.word	0x5be0cd19

08000ba0 <sha256_update>:

void sha256_update(SHA256 *ctx, const uint8_t *data, uint8_t length) {
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	4613      	mov	r3, r2
 8000bac:	71fb      	strb	r3, [r7, #7]
    for (size_t i = 0; i < length; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	e024      	b.n	8000bfe <sha256_update+0x5e>
        ctx->m_data[ctx->m_blocklen++] = data[i];
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	441a      	add	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bbe:	1c58      	adds	r0, r3, #1
 8000bc0:	68f9      	ldr	r1, [r7, #12]
 8000bc2:	6688      	str	r0, [r1, #104]	; 0x68
 8000bc4:	7811      	ldrb	r1, [r2, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	460a      	mov	r2, r1
 8000bcc:	f883 2020 	strb.w	r2, [r3, #32]
        if (ctx->m_blocklen == 64) {
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000bd4:	2b40      	cmp	r3, #64	; 0x40
 8000bd6:	d10f      	bne.n	8000bf8 <sha256_update+0x58>
        	sha256_transform(ctx);
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f000 f893 	bl	8000d04 <sha256_transform>


            // Fim do bloco
            ctx->m_bitlen += 512;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000be4:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8000be8:	f143 0500 	adc.w	r5, r3, #0
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	e9c3 4518 	strd	r4, r5, [r3, #96]	; 0x60
            ctx->m_blocklen = 0;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	669a      	str	r2, [r3, #104]	; 0x68
    for (size_t i = 0; i < length; i++) {
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d3d6      	bcc.n	8000bb4 <sha256_update+0x14>
        }
    }
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bdb0      	pop	{r4, r5, r7, pc}

08000c10 <sha256_digest>:
    size_t length = strlen(data);
    sha256_update(ctx, (const uint8_t *)data, length);
}


uint8_t *sha256_digest(SHA256 *ctx) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    uint8_t *hash = (uint8_t *)malloc(32 * sizeof(uint8_t));
 8000c18:	2020      	movs	r0, #32
 8000c1a:	f003 f93b 	bl	8003e94 <malloc>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	60fb      	str	r3, [r7, #12]
    if (hash == NULL) {
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d101      	bne.n	8000c2c <sha256_digest+0x1c>
        // Tratamento de erro, não foi possível alocar memória
        return NULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e004      	b.n	8000c36 <sha256_digest+0x26>
    }

    //sha256_pad(ctx);
    sha256_revert(ctx, hash);
 8000c2c:	68f9      	ldr	r1, [r7, #12]
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 fa48 	bl	80010c4 <sha256_revert>

    return hash;
 8000c34:	68fb      	ldr	r3, [r7, #12]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <sha256_rotr>:


uint32_t sha256_rotr(uint32_t x, uint32_t n) {
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
    return (x >> n) | (x << (32 - n));
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	fa62 f303 	ror.w	r3, r2, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <sha256_choose>:

uint32_t sha256_choose(uint32_t e, uint32_t f, uint32_t g) {
 8000c5a:	b480      	push	{r7}
 8000c5c:	b085      	sub	sp, #20
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
    return (e & f) ^ (~e & g);
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
 8000c74:	4053      	eors	r3, r2
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <sha256_majority>:

uint32_t sha256_majority(uint32_t a, uint32_t b, uint32_t c) {
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
    return (a & (b | c)) | (b & c);
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	431a      	orrs	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	401a      	ands	r2, r3
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	4313      	orrs	r3, r2
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <sha256_sig0>:

uint32_t sha256_sig0(uint32_t x) {
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    return sha256_rotr(x, 7) ^ sha256_rotr(x, 18) ^ (x >> 3);
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ffc3 	bl	8000c3e <sha256_rotr>
 8000cb8:	4604      	mov	r4, r0
 8000cba:	2112      	movs	r1, #18
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ffbe 	bl	8000c3e <sha256_rotr>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	ea84 0203 	eor.w	r2, r4, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	08db      	lsrs	r3, r3, #3
 8000ccc:	4053      	eors	r3, r2
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}

08000cd6 <sha256_sig1>:

uint32_t sha256_sig1(uint32_t x) {
 8000cd6:	b590      	push	{r4, r7, lr}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
    return sha256_rotr(x, 17) ^ sha256_rotr(x, 19) ^ (x >> 10);
 8000cde:	2111      	movs	r1, #17
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ffac 	bl	8000c3e <sha256_rotr>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	2113      	movs	r1, #19
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffa7 	bl	8000c3e <sha256_rotr>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	ea84 0203 	eor.w	r2, r4, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	0a9b      	lsrs	r3, r3, #10
 8000cfa:	4053      	eors	r3, r2
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd90      	pop	{r4, r7, pc}

08000d04 <sha256_transform>:

void sha256_transform(SHA256 *ctx) {
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b0d5      	sub	sp, #340	; 0x154
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000d0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000d12:	6018      	str	r0, [r3, #0]
    uint32_t maj, xorA, ch, xorE, sum, newA, newE, m[64];
    uint32_t state[8];

    for (uint8_t i = 0, j = 0; i < 16; i++, j += 4) {
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8000d20:	e043      	b.n	8000daa <sha256_transform+0xa6>
        m[i] = (ctx->m_data[j] << 24) | (ctx->m_data[j + 1] << 16) | (ctx->m_data[j + 2] << 8) | (ctx->m_data[j + 3]);
 8000d22:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000d26:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000d2a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	4413      	add	r3, r2
 8000d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d36:	061a      	lsls	r2, r3, #24
 8000d38:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000d42:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000d46:	6809      	ldr	r1, [r1, #0]
 8000d48:	440b      	add	r3, r1
 8000d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d4e:	041b      	lsls	r3, r3, #16
 8000d50:	431a      	orrs	r2, r3
 8000d52:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000d56:	3302      	adds	r3, #2
 8000d58:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000d5c:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000d60:	6809      	ldr	r1, [r1, #0]
 8000d62:	440b      	add	r3, r1
 8000d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
 8000d70:	3203      	adds	r2, #3
 8000d72:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000d76:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000d7a:	6809      	ldr	r1, [r1, #0]
 8000d7c:	440a      	add	r2, r1
 8000d7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000d8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0, j = 0; i < 16; i++, j += 4) {
 8000d96:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8000da0:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000da4:	3304      	adds	r3, #4
 8000da6:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8000daa:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	d9b7      	bls.n	8000d22 <sha256_transform+0x1e>
    }

    for (uint8_t k = 16; k < 64; k++) {
 8000db2:	2310      	movs	r3, #16
 8000db4:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8000db8:	e03d      	b.n	8000e36 <sha256_transform+0x132>
        m[k] = sha256_sig1(m[k - 2]) + m[k - 7] + sha256_sig0(m[k - 15]) + m[k - 16];
 8000dba:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000dbe:	1e9a      	subs	r2, r3, #2
 8000dc0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000dc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff82 	bl	8000cd6 <sha256_sig1>
 8000dd2:	4601      	mov	r1, r0
 8000dd4:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000dd8:	1fda      	subs	r2, r3, #7
 8000dda:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000dde:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de6:	18cc      	adds	r4, r1, r3
 8000de8:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000dec:	f1a3 020f 	sub.w	r2, r3, #15
 8000df0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000df4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff53 	bl	8000ca8 <sha256_sig0>
 8000e02:	4603      	mov	r3, r0
 8000e04:	18e1      	adds	r1, r4, r3
 8000e06:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000e0a:	f1a3 0210 	sub.w	r2, r3, #16
 8000e0e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1a:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 8000e1e:	4419      	add	r1, r3
 8000e20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t k = 16; k < 64; k++) {
 8000e2c:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000e30:	3301      	adds	r3, #1
 8000e32:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8000e36:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000e3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e3c:	d9bd      	bls.n	8000dba <sha256_transform+0xb6>
    }

    for (uint8_t i = 0; i < 8; i++) {
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8000e44:	e015      	b.n	8000e72 <sha256_transform+0x16e>
        state[i] = ctx->m_state[i];
 8000e46:	f897 114c 	ldrb.w	r1, [r7, #332]	; 0x14c
 8000e4a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8000e4e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000e5c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e60:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 8000e68:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8000e72:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000e76:	2b07      	cmp	r3, #7
 8000e78:	d9e5      	bls.n	8000e46 <sha256_transform+0x142>
    }

    for (uint8_t i = 0; i < 64; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8000e80:	e0ea      	b.n	8001058 <sha256_transform+0x354>
        maj = sha256_majority(state[0], state[1], state[2]);
 8000e82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e90:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000e94:	6859      	ldr	r1, [r3, #4]
 8000e96:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f7ff feed 	bl	8000c80 <sha256_majority>
 8000ea6:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
        xorA = sha256_rotr(state[0], 2) ^ sha256_rotr(state[0], 13) ^ sha256_rotr(state[0], 22);
 8000eaa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000eae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fec1 	bl	8000c3e <sha256_rotr>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ec2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	210d      	movs	r1, #13
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff feb7 	bl	8000c3e <sha256_rotr>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	405c      	eors	r4, r3
 8000ed4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ed8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2116      	movs	r1, #22
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff feac 	bl	8000c3e <sha256_rotr>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4063      	eors	r3, r4
 8000eea:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        ch = sha256_choose(state[4], state[5], state[6]);
 8000eee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ef2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000ef6:	6918      	ldr	r0, [r3, #16]
 8000ef8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000efc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f00:	6959      	ldr	r1, [r3, #20]
 8000f02:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f06:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f7ff fea4 	bl	8000c5a <sha256_choose>
 8000f12:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

        xorE = sha256_rotr(state[4], 6) ^ sha256_rotr(state[4], 11) ^ sha256_rotr(state[4], 25);
 8000f16:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f1a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2106      	movs	r1, #6
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fe8b 	bl	8000c3e <sha256_rotr>
 8000f28:	4604      	mov	r4, r0
 8000f2a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	210b      	movs	r1, #11
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe81 	bl	8000c3e <sha256_rotr>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	405c      	eors	r4, r3
 8000f40:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f44:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2119      	movs	r1, #25
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe76 	bl	8000c3e <sha256_rotr>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4063      	eors	r3, r4
 8000f56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

        sum = m[i] + K[i] + state[7] + ch + xorE;
 8000f5a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8000f5e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f62:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000f6a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8000f6e:	4954      	ldr	r1, [pc, #336]	; (80010c0 <sha256_transform+0x3bc>)
 8000f70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f74:	441a      	add	r2, r3
 8000f76:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	441a      	add	r2, r3
 8000f82:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000f86:	4413      	add	r3, r2
 8000f88:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        newA = xorA + maj + sum;
 8000f92:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000f96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        newE = state[3] + sum;
 8000fa6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000faa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        state[7] = state[6];
 8000fba:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fbe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fc8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fcc:	61da      	str	r2, [r3, #28]
        state[6] = state[5];
 8000fce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fd2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fdc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fe0:	619a      	str	r2, [r3, #24]
        state[5] = state[4];
 8000fe2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fe6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fea:	691a      	ldr	r2, [r3, #16]
 8000fec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ff0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000ff4:	615a      	str	r2, [r3, #20]
        state[4] = newE;
 8000ff6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ffa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000ffe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001002:	611a      	str	r2, [r3, #16]
        state[3] = state[2];
 8001004:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001008:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001012:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001016:	60da      	str	r2, [r3, #12]
        state[2] = state[1];
 8001018:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800101c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001026:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800102a:	609a      	str	r2, [r3, #8]
        state[1] = state[0];
 800102c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001030:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800103a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800103e:	605a      	str	r2, [r3, #4]
        state[0] = newA;
 8001040:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001044:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001048:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800104c:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 64; i++) {
 800104e:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001052:	3301      	adds	r3, #1
 8001054:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8001058:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800105c:	2b3f      	cmp	r3, #63	; 0x3f
 800105e:	f67f af10 	bls.w	8000e82 <sha256_transform+0x17e>
    }

    for (uint8_t i = 0; i < 8; i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 8001068:	e01f      	b.n	80010aa <sha256_transform+0x3a6>
        ctx->m_state[i] += state[i];
 800106a:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 800106e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001072:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800107c:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8001080:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001084:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8001090:	4419      	add	r1, r3
 8001092:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001096:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 80010a0:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80010a4:	3301      	adds	r3, #1
 80010a6:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 80010aa:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80010ae:	2b07      	cmp	r3, #7
 80010b0:	d9db      	bls.n	800106a <sha256_transform+0x366>
    }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	08004484 	.word	0x08004484

080010c4 <sha256_revert>:
    ctx->m_data[57] = (uint8_t)(ctx->m_bitlen >> 48);
    ctx->m_data[56] = (uint8_t)(ctx->m_bitlen >> 56);
    sha256_transform(ctx);
}

void sha256_revert( SHA256 *ctx, uint8_t*hash) {
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    // O SHA usa ordenação de bytes big-endian
    // Reverter todos os bytes
    for (uint8_t i = 0; i < 4; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e01e      	b.n	8001112 <sha256_revert+0x4e>
        for (uint8_t j = 0; j < 8; j++) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	73bb      	strb	r3, [r7, #14]
 80010d8:	e015      	b.n	8001106 <sha256_revert+0x42>
            hash[i + (j * 4)] = (ctx->m_state[j] >> (24 - i * 8)) & 0x000000ff;
 80010da:	7bba      	ldrb	r2, [r7, #14]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f1c3 0303 	rsb	r3, r3, #3
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	fa22 f103 	lsr.w	r1, r2, r3
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	7bbb      	ldrb	r3, [r7, #14]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	461a      	mov	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	b2ca      	uxtb	r2, r1
 80010fe:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	3301      	adds	r3, #1
 8001104:	73bb      	strb	r3, [r7, #14]
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	2b07      	cmp	r3, #7
 800110a:	d9e6      	bls.n	80010da <sha256_revert+0x16>
    for (uint8_t i = 0; i < 4; i++) {
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	3301      	adds	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d9dd      	bls.n	80010d4 <sha256_revert+0x10>
        }
    }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <NonceSHA256Hash>:


void NonceSHA256Hash(uint8_t *data, uint8_t *NumIn, uint8_t *aux) {
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b0a0      	sub	sp, #128	; 0x80
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]

	uint8_t nonce[64];
	uint8_t nonce_aux[32];
	uint8_t pad[] = {0x16, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8};
 8001130:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <NonceSHA256Hash+0x8c>)
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	ca07      	ldmia	r2, {r0, r1, r2}
 8001138:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    for (int i = 1; i<=32;i++){
 800113c:	2301      	movs	r3, #1
 800113e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001140:	e00c      	b.n	800115c <NonceSHA256Hash+0x38>
    	nonce_aux[i-1] =data[i];
 8001142:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	441a      	add	r2, r3
 8001148:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800114a:	3b01      	subs	r3, #1
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	3380      	adds	r3, #128	; 0x80
 8001150:	443b      	add	r3, r7
 8001152:	f803 2c64 	strb.w	r2, [r3, #-100]
    for (int i = 1; i<=32;i++){
 8001156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001158:	3301      	adds	r3, #1
 800115a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800115c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800115e:	2b20      	cmp	r3, #32
 8001160:	ddef      	ble.n	8001142 <NonceSHA256Hash+0x1e>
    }
	 memcpy(nonce, nonce_aux, sizeof(nonce_aux));
 8001162:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001166:	f107 051c 	add.w	r5, r7, #28
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 memcpy(nonce + 32, NumIn, 32);
 8001176:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800117a:	3320      	adds	r3, #32
 800117c:	2220      	movs	r2, #32
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	4618      	mov	r0, r3
 8001182:	f002 ff7f 	bl	8004084 <memcpy>
	 memcpy(nonce + 52, pad, sizeof(pad));
 8001186:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800118a:	3334      	adds	r3, #52	; 0x34
 800118c:	461c      	mov	r4, r3
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001194:	6020      	str	r0, [r4, #0]
 8001196:	6061      	str	r1, [r4, #4]
 8001198:	60a2      	str	r2, [r4, #8]

	 calculateSHA256Hash(nonce, sizeof(nonce), aux);
 800119a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	2140      	movs	r1, #64	; 0x40
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f8f8 	bl	8001398 <calculateSHA256Hash>
}
 80011a8:	bf00      	nop
 80011aa:	3780      	adds	r7, #128	; 0x80
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}
 80011b0:	08004408 	.word	0x08004408

080011b4 <GenDigSHA256Hash>:


void GenDigSHA256Hash(uint8_t *data, uint8_t *aux) {
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b0b4      	sub	sp, #208	; 0xd0
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]

	uint8_t gendig[128];
	uint8_t aux_gen[32];
	uint8_t config_gendig[32] = {	0x15, 0x02, /**/0x02, 0x00, 0xEE, 0x01, 0x23, 0x00,
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <GenDigSHA256Hash+0xdc>)
 80011c0:	f107 040c 	add.w	r4, r7, #12
 80011c4:	461d      	mov	r5, r3
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	 */

    memcpy(gendig, slot2, sizeof(slot2));
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <GenDigSHA256Hash+0xe0>)
 80011d4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80011d8:	461d      	mov	r5, r3
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    memcpy(gendig + 32, config_gendig, 32);
 80011e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ea:	3320      	adds	r3, #32
 80011ec:	461d      	mov	r5, r3
 80011ee:	f107 040c 	add.w	r4, r7, #12
 80011f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f4:	6028      	str	r0, [r5, #0]
 80011f6:	6069      	str	r1, [r5, #4]
 80011f8:	60aa      	str	r2, [r5, #8]
 80011fa:	60eb      	str	r3, [r5, #12]
 80011fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fe:	6128      	str	r0, [r5, #16]
 8001200:	6169      	str	r1, [r5, #20]
 8001202:	61aa      	str	r2, [r5, #24]
 8001204:	61eb      	str	r3, [r5, #28]
    for (int i = 0; i<32;i++){
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800120c:	e010      	b.n	8001230 <GenDigSHA256Hash+0x7c>
    	aux_gen[i] =data[i];
 800120e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800121c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001220:	4413      	add	r3, r2
 8001222:	460a      	mov	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<32;i++){
 8001226:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001230:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001234:	2b1f      	cmp	r3, #31
 8001236:	ddea      	ble.n	800120e <GenDigSHA256Hash+0x5a>
    }
    memcpy(gendig + 64, aux_gen, sizeof(aux_gen));
 8001238:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800123c:	3340      	adds	r3, #64	; 0x40
 800123e:	461d      	mov	r5, r3
 8001240:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	6028      	str	r0, [r5, #0]
 8001248:	6069      	str	r1, [r5, #4]
 800124a:	60aa      	str	r2, [r5, #8]
 800124c:	60eb      	str	r3, [r5, #12]
 800124e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001250:	6128      	str	r0, [r5, #16]
 8001252:	6169      	str	r1, [r5, #20]
 8001254:	61aa      	str	r2, [r5, #24]
 8001256:	61eb      	str	r3, [r5, #28]
    memcpy(gendig + 96, general_conf,  sizeof(general_conf));
 8001258:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <GenDigSHA256Hash+0xe4>)
 8001260:	461c      	mov	r4, r3
 8001262:	4615      	mov	r5, r2
 8001264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001266:	6020      	str	r0, [r4, #0]
 8001268:	6061      	str	r1, [r4, #4]
 800126a:	60a2      	str	r2, [r4, #8]
 800126c:	60e3      	str	r3, [r4, #12]
 800126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001270:	6120      	str	r0, [r4, #16]
 8001272:	6161      	str	r1, [r4, #20]
 8001274:	61a2      	str	r2, [r4, #24]
 8001276:	61e3      	str	r3, [r4, #28]

    calculateSHA256Hash(gendig, sizeof(gendig), aux);
 8001278:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f889 	bl	8001398 <calculateSHA256Hash>

}
 8001286:	bf00      	nop
 8001288:	37d0      	adds	r7, #208	; 0xd0
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	08004414 	.word	0x08004414
 8001294:	20000020 	.word	0x20000020
 8001298:	20000000 	.word	0x20000000

0800129c <MACSHA256Hash>:

void MACSHA256Hash(uint8_t *data, uint8_t *aux){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b0bc      	sub	sp, #240	; 0xf0
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]

	uint8_t mac[128];
	uint8_t aux_mac[32];
	uint8_t config_mac[32] = {	0x08, 0x01, /**/0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
 80012a6:	4b39      	ldr	r3, [pc, #228]	; (800138c <MACSHA256Hash+0xf0>)
 80012a8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80012ac:	461d      	mov	r5, r3
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE,
													0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x00, 0x00,
													0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	uint8_t mac_pad[32] = 	{	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <MACSHA256Hash+0xf4>)
 80012bc:	f107 040c 	add.w	r4, r7, #12
 80012c0:	461d      	mov	r5, r3
 80012c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	  	  							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0};

    memcpy(mac, slot4, sizeof(slot4));
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <MACSHA256Hash+0xf8>)
 80012d0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80012d4:	461d      	mov	r5, r3
 80012d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i<32;i++){
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012e8:	e010      	b.n	800130c <MACSHA256Hash+0x70>
    	aux_mac[i] =data[i];
 80012ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	7819      	ldrb	r1, [r3, #0]
 80012f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80012f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80012fc:	4413      	add	r3, r2
 80012fe:	460a      	mov	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<32;i++){
 8001302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001306:	3301      	adds	r3, #1
 8001308:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800130c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001310:	2b1f      	cmp	r3, #31
 8001312:	ddea      	ble.n	80012ea <MACSHA256Hash+0x4e>
    }
    memcpy(mac + 32, aux_mac,  sizeof(aux_mac));
 8001314:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001318:	3320      	adds	r3, #32
 800131a:	461d      	mov	r5, r3
 800131c:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001322:	6028      	str	r0, [r5, #0]
 8001324:	6069      	str	r1, [r5, #4]
 8001326:	60aa      	str	r2, [r5, #8]
 8001328:	60eb      	str	r3, [r5, #12]
 800132a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800132c:	6128      	str	r0, [r5, #16]
 800132e:	6169      	str	r1, [r5, #20]
 8001330:	61aa      	str	r2, [r5, #24]
 8001332:	61eb      	str	r3, [r5, #28]
    memcpy(mac + 64, config_mac,  sizeof(config_mac));
 8001334:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001338:	3340      	adds	r3, #64	; 0x40
 800133a:	461d      	mov	r5, r3
 800133c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001342:	6028      	str	r0, [r5, #0]
 8001344:	6069      	str	r1, [r5, #4]
 8001346:	60aa      	str	r2, [r5, #8]
 8001348:	60eb      	str	r3, [r5, #12]
 800134a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134c:	6128      	str	r0, [r5, #16]
 800134e:	6169      	str	r1, [r5, #20]
 8001350:	61aa      	str	r2, [r5, #24]
 8001352:	61eb      	str	r3, [r5, #28]
    memcpy(mac + 96, mac_pad, sizeof(mac_pad));
 8001354:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001358:	3360      	adds	r3, #96	; 0x60
 800135a:	461d      	mov	r5, r3
 800135c:	f107 040c 	add.w	r4, r7, #12
 8001360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001362:	6028      	str	r0, [r5, #0]
 8001364:	6069      	str	r1, [r5, #4]
 8001366:	60aa      	str	r2, [r5, #8]
 8001368:	60eb      	str	r3, [r5, #12]
 800136a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136c:	6128      	str	r0, [r5, #16]
 800136e:	6169      	str	r1, [r5, #20]
 8001370:	61aa      	str	r2, [r5, #24]
 8001372:	61eb      	str	r3, [r5, #28]

    calculateSHA256Hash(mac, sizeof(mac), aux);
 8001374:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f80b 	bl	8001398 <calculateSHA256Hash>
}
 8001382:	bf00      	nop
 8001384:	37f0      	adds	r7, #240	; 0xf0
 8001386:	46bd      	mov	sp, r7
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	bf00      	nop
 800138c:	08004434 	.word	0x08004434
 8001390:	08004454 	.word	0x08004454
 8001394:	20000040 	.word	0x20000040

08001398 <calculateSHA256Hash>:


void calculateSHA256Hash(uint8_t *data, uint8_t dataSize, uint8_t *aux) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b0a2      	sub	sp, #136	; 0x88
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	460b      	mov	r3, r1
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	72fb      	strb	r3, [r7, #11]
    SHA256 sha;

    sha256_init(&sha);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbbc 	bl	8000b28 <sha256_init>
    sha256_update(&sha, data, dataSize);
 80013b0:	7afa      	ldrb	r2, [r7, #11]
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	68f9      	ldr	r1, [r7, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fbf1 	bl	8000ba0 <sha256_update>
    uint8_t *digest = sha256_digest(&sha);
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fc24 	bl	8000c10 <sha256_digest>
 80013c8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

    for (int i =0; i<32;i++){
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013d2:	e00f      	b.n	80013f4 <calculateSHA256Hash+0x5c>
    	aux[i] = digest[i];
 80013d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80013dc:	441a      	add	r2, r3
 80013de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	440b      	add	r3, r1
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	701a      	strb	r2, [r3, #0]
    for (int i =0; i<32;i++){
 80013ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013ee:	3301      	adds	r3, #1
 80013f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80013f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f8:	2b1f      	cmp	r3, #31
 80013fa:	ddeb      	ble.n	80013d4 <calculateSHA256Hash+0x3c>
    }

    //free(digest);
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3788      	adds	r7, #136	; 0x88
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_MspInit+0x5c>)
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_MspInit+0x5c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_MspInit+0x5c>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_MspInit+0x5c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_MspInit+0x5c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_MspInit+0x5c>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_MspInit+0x60>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_MspInit+0x60>)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000

0800146c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_I2C_MspInit+0x74>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d124      	bne.n	80014d6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_I2C_MspInit+0x78>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_I2C_MspInit+0x78>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_I2C_MspInit+0x78>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014aa:	2312      	movs	r3, #18
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	4619      	mov	r1, r3
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_I2C_MspInit+0x7c>)
 80014ba:	f000 fb09 	bl	8001ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_I2C_MspInit+0x78>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0x78>)
 80014c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_I2C_MspInit+0x78>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40005800 	.word	0x40005800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010c00 	.word	0x40010c00

080014ec <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a20      	ldr	r2, [pc, #128]	; (8001588 <HAL_USART_MspInit+0x9c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d139      	bne.n	8001580 <HAL_USART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <HAL_USART_MspInit+0xa0>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_USART_MspInit+0xa0>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_USART_MspInit+0xa0>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_USART_MspInit+0xa0>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a18      	ldr	r2, [pc, #96]	; (800158c <HAL_USART_MspInit+0xa0>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_USART_MspInit+0xa0>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	4619      	mov	r1, r3
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <HAL_USART_MspInit+0xa4>)
 8001552:	f000 fabd 	bl	8001ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	4809      	ldr	r0, [pc, #36]	; (8001590 <HAL_USART_MspInit+0xa4>)
 800156c:	f000 fab0 	bl	8001ad0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001570:	2200      	movs	r2, #0
 8001572:	2100      	movs	r1, #0
 8001574:	2025      	movs	r0, #37	; 0x25
 8001576:	f000 f9fe 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800157a:	2025      	movs	r0, #37	; 0x25
 800157c:	f000 fa17 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40013800 	.word	0x40013800
 800158c:	40021000 	.word	0x40021000
 8001590:	40010800 	.word	0x40010800

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015da:	f000 f8b5 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <USART1_IRQHandler+0x10>)
 80015ea:	f002 f81f 	bl	800362c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000012c 	.word	0x2000012c

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f002 fd00 	bl	800402c <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20005000 	.word	0x20005000
 8001658:	00000400 	.word	0x00000400
 800165c:	20000170 	.word	0x20000170
 8001660:	200002c0 	.word	0x200002c0

08001664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001672:	490d      	ldr	r1, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001688:	4c0a      	ldr	r4, [pc, #40]	; (80016b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001696:	f7ff ffe5 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f002 fccd 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7fe ff5d 	bl	800055c <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80016ac:	080045a4 	.word	0x080045a4
  ldr r2, =_sbss
 80016b0:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80016b4:	200002c0 	.word	0x200002c0

080016b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC1_2_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x28>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f947 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fe96 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f95f 	bl	80019ca <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f927 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000060 	.word	0x20000060
 8001740:	20000068 	.word	0x20000068
 8001744:	20000064 	.word	0x20000064

08001748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x1c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x20>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_IncTick+0x20>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000068 	.word	0x20000068
 8001768:	20000174 	.word	0x20000174

0800176c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <HAL_GetTick+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000174 	.word	0x20000174

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff fff0 	bl	800176c <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffe0 	bl	800176c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000068 	.word	0x20000068

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <__NVIC_EnableIRQ+0x34>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff90 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff2d 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff42 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff90 	bl	80018b8 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5f 	bl	8001864 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff35 	bl	800182c <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d005      	beq.n	8001a06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2204      	movs	r2, #4
 80019fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e051      	b.n	8001aaa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 020e 	bic.w	r2, r2, #14
 8001a14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <HAL_DMA_Abort_IT+0xd0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d029      	beq.n	8001a84 <HAL_DMA_Abort_IT+0xa0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_DMA_Abort_IT+0xd4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d022      	beq.n	8001a80 <HAL_DMA_Abort_IT+0x9c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <HAL_DMA_Abort_IT+0xd8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d01a      	beq.n	8001a7a <HAL_DMA_Abort_IT+0x96>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <HAL_DMA_Abort_IT+0xdc>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d012      	beq.n	8001a74 <HAL_DMA_Abort_IT+0x90>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1c      	ldr	r2, [pc, #112]	; (8001ac4 <HAL_DMA_Abort_IT+0xe0>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d00a      	beq.n	8001a6e <HAL_DMA_Abort_IT+0x8a>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_DMA_Abort_IT+0xe4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d102      	bne.n	8001a68 <HAL_DMA_Abort_IT+0x84>
 8001a62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a66:	e00e      	b.n	8001a86 <HAL_DMA_Abort_IT+0xa2>
 8001a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a6c:	e00b      	b.n	8001a86 <HAL_DMA_Abort_IT+0xa2>
 8001a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a72:	e008      	b.n	8001a86 <HAL_DMA_Abort_IT+0xa2>
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	e005      	b.n	8001a86 <HAL_DMA_Abort_IT+0xa2>
 8001a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7e:	e002      	b.n	8001a86 <HAL_DMA_Abort_IT+0xa2>
 8001a80:	2310      	movs	r3, #16
 8001a82:	e000      	b.n	8001a86 <HAL_DMA_Abort_IT+0xa2>
 8001a84:	2301      	movs	r3, #1
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <HAL_DMA_Abort_IT+0xe8>)
 8001a88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
    } 
  }
  return status;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40020008 	.word	0x40020008
 8001ab8:	4002001c 	.word	0x4002001c
 8001abc:	40020030 	.word	0x40020030
 8001ac0:	40020044 	.word	0x40020044
 8001ac4:	40020058 	.word	0x40020058
 8001ac8:	4002006c 	.word	0x4002006c
 8001acc:	40020000 	.word	0x40020000

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b08b      	sub	sp, #44	; 0x2c
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae2:	e169      	b.n	8001db8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8158 	bne.w	8001db2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a9a      	ldr	r2, [pc, #616]	; (8001d70 <HAL_GPIO_Init+0x2a0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d05e      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b0c:	4a98      	ldr	r2, [pc, #608]	; (8001d70 <HAL_GPIO_Init+0x2a0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d875      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b12:	4a98      	ldr	r2, [pc, #608]	; (8001d74 <HAL_GPIO_Init+0x2a4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d058      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b18:	4a96      	ldr	r2, [pc, #600]	; (8001d74 <HAL_GPIO_Init+0x2a4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d86f      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b1e:	4a96      	ldr	r2, [pc, #600]	; (8001d78 <HAL_GPIO_Init+0x2a8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d052      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b24:	4a94      	ldr	r2, [pc, #592]	; (8001d78 <HAL_GPIO_Init+0x2a8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d869      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b2a:	4a94      	ldr	r2, [pc, #592]	; (8001d7c <HAL_GPIO_Init+0x2ac>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d04c      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b30:	4a92      	ldr	r2, [pc, #584]	; (8001d7c <HAL_GPIO_Init+0x2ac>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d863      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b36:	4a92      	ldr	r2, [pc, #584]	; (8001d80 <HAL_GPIO_Init+0x2b0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d046      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b3c:	4a90      	ldr	r2, [pc, #576]	; (8001d80 <HAL_GPIO_Init+0x2b0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d85d      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d82a      	bhi.n	8001b9c <HAL_GPIO_Init+0xcc>
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d859      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b4a:	a201      	add	r2, pc, #4	; (adr r2, 8001b50 <HAL_GPIO_Init+0x80>)
 8001b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b50:	08001bcb 	.word	0x08001bcb
 8001b54:	08001ba5 	.word	0x08001ba5
 8001b58:	08001bb7 	.word	0x08001bb7
 8001b5c:	08001bf9 	.word	0x08001bf9
 8001b60:	08001bff 	.word	0x08001bff
 8001b64:	08001bff 	.word	0x08001bff
 8001b68:	08001bff 	.word	0x08001bff
 8001b6c:	08001bff 	.word	0x08001bff
 8001b70:	08001bff 	.word	0x08001bff
 8001b74:	08001bff 	.word	0x08001bff
 8001b78:	08001bff 	.word	0x08001bff
 8001b7c:	08001bff 	.word	0x08001bff
 8001b80:	08001bff 	.word	0x08001bff
 8001b84:	08001bff 	.word	0x08001bff
 8001b88:	08001bff 	.word	0x08001bff
 8001b8c:	08001bff 	.word	0x08001bff
 8001b90:	08001bff 	.word	0x08001bff
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001bc1 	.word	0x08001bc1
 8001b9c:	4a79      	ldr	r2, [pc, #484]	; (8001d84 <HAL_GPIO_Init+0x2b4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ba2:	e02c      	b.n	8001bfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	623b      	str	r3, [r7, #32]
          break;
 8001baa:	e029      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	623b      	str	r3, [r7, #32]
          break;
 8001bb4:	e024      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e01f      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	330c      	adds	r3, #12
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e01a      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e013      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be0:	2308      	movs	r3, #8
 8001be2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	611a      	str	r2, [r3, #16]
          break;
 8001bea:	e009      	b.n	8001c00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bec:	2308      	movs	r3, #8
 8001bee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	615a      	str	r2, [r3, #20]
          break;
 8001bf6:	e003      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e000      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          break;
 8001bfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d801      	bhi.n	8001c0a <HAL_GPIO_Init+0x13a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	e001      	b.n	8001c0e <HAL_GPIO_Init+0x13e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2bff      	cmp	r3, #255	; 0xff
 8001c14:	d802      	bhi.n	8001c1c <HAL_GPIO_Init+0x14c>
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x152>
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	3b08      	subs	r3, #8
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	210f      	movs	r1, #15
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	6a39      	ldr	r1, [r7, #32]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80b1 	beq.w	8001db2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c50:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <HAL_GPIO_Init+0x2b8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_GPIO_Init+0x2b8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <HAL_GPIO_Init+0x2b8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c68:	4a48      	ldr	r2, [pc, #288]	; (8001d8c <HAL_GPIO_Init+0x2bc>)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_GPIO_Init+0x1ec>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3f      	ldr	r2, [pc, #252]	; (8001d94 <HAL_GPIO_Init+0x2c4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_GPIO_Init+0x1e8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a3e      	ldr	r2, [pc, #248]	; (8001d98 <HAL_GPIO_Init+0x2c8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e4>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a3d      	ldr	r2, [pc, #244]	; (8001d9c <HAL_GPIO_Init+0x2cc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_GPIO_Init+0x1e0>
 8001cac:	2303      	movs	r3, #3
 8001cae:	e006      	b.n	8001cbe <HAL_GPIO_Init+0x1ee>
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	e004      	b.n	8001cbe <HAL_GPIO_Init+0x1ee>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e002      	b.n	8001cbe <HAL_GPIO_Init+0x1ee>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_GPIO_Init+0x1ee>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	f002 0203 	and.w	r2, r2, #3
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	4093      	lsls	r3, r2
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cce:	492f      	ldr	r1, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x2bc>)
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	492c      	ldr	r1, [pc, #176]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf6:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4928      	ldr	r1, [pc, #160]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4922      	ldr	r1, [pc, #136]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	491e      	ldr	r1, [pc, #120]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4918      	ldr	r1, [pc, #96]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	608b      	str	r3, [r1, #8]
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4914      	ldr	r1, [pc, #80]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d021      	beq.n	8001da4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <HAL_GPIO_Init+0x2d0>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
 8001d6c:	e021      	b.n	8001db2 <HAL_GPIO_Init+0x2e2>
 8001d6e:	bf00      	nop
 8001d70:	10320000 	.word	0x10320000
 8001d74:	10310000 	.word	0x10310000
 8001d78:	10220000 	.word	0x10220000
 8001d7c:	10210000 	.word	0x10210000
 8001d80:	10120000 	.word	0x10120000
 8001d84:	10110000 	.word	0x10110000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	40010800 	.word	0x40010800
 8001d94:	40010c00 	.word	0x40010c00
 8001d98:	40011000 	.word	0x40011000
 8001d9c:	40011400 	.word	0x40011400
 8001da0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	4909      	ldr	r1, [pc, #36]	; (8001dd4 <HAL_GPIO_Init+0x304>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	3301      	adds	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f47f ae8e 	bne.w	8001ae4 <HAL_GPIO_Init+0x14>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	372c      	adds	r7, #44	; 0x2c
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e12b      	b.n	8002042 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fb34 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2224      	movs	r2, #36	; 0x24
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e3c:	f001 fb6e 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a81      	ldr	r2, [pc, #516]	; (800204c <HAL_I2C_Init+0x274>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d807      	bhi.n	8001e5c <HAL_I2C_Init+0x84>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a80      	ldr	r2, [pc, #512]	; (8002050 <HAL_I2C_Init+0x278>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	bf94      	ite	ls
 8001e54:	2301      	movls	r3, #1
 8001e56:	2300      	movhi	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	e006      	b.n	8001e6a <HAL_I2C_Init+0x92>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4a7d      	ldr	r2, [pc, #500]	; (8002054 <HAL_I2C_Init+0x27c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf94      	ite	ls
 8001e64:	2301      	movls	r3, #1
 8001e66:	2300      	movhi	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0e7      	b.n	8002042 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a78      	ldr	r2, [pc, #480]	; (8002058 <HAL_I2C_Init+0x280>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0c9b      	lsrs	r3, r3, #18
 8001e7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	4a6a      	ldr	r2, [pc, #424]	; (800204c <HAL_I2C_Init+0x274>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d802      	bhi.n	8001eac <HAL_I2C_Init+0xd4>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	e009      	b.n	8001ec0 <HAL_I2C_Init+0xe8>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	4a69      	ldr	r2, [pc, #420]	; (800205c <HAL_I2C_Init+0x284>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ed2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	495c      	ldr	r1, [pc, #368]	; (800204c <HAL_I2C_Init+0x274>)
 8001edc:	428b      	cmp	r3, r1
 8001ede:	d819      	bhi.n	8001f14 <HAL_I2C_Init+0x13c>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	1e59      	subs	r1, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eee:	1c59      	adds	r1, r3, #1
 8001ef0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_I2C_Init+0x138>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e59      	subs	r1, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0e:	e051      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e04f      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d111      	bne.n	8001f40 <HAL_I2C_Init+0x168>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	440b      	add	r3, r1
 8001f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e012      	b.n	8001f66 <HAL_I2C_Init+0x18e>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1e58      	subs	r0, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	0099      	lsls	r1, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Init+0x196>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e022      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10e      	bne.n	8001f94 <HAL_I2C_Init+0x1bc>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1e58      	subs	r0, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6859      	ldr	r1, [r3, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	440b      	add	r3, r1
 8001f84:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f92:	e00f      	b.n	8001fb4 <HAL_I2C_Init+0x1dc>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6911      	ldr	r1, [r2, #16]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68d2      	ldr	r2, [r2, #12]
 8001fee:	4311      	orrs	r1, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	000186a0 	.word	0x000186a0
 8002050:	001e847f 	.word	0x001e847f
 8002054:	003d08ff 	.word	0x003d08ff
 8002058:	431bde83 	.word	0x431bde83
 800205c:	10624dd3 	.word	0x10624dd3

08002060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	461a      	mov	r2, r3
 800206c:	460b      	mov	r3, r1
 800206e:	817b      	strh	r3, [r7, #10]
 8002070:	4613      	mov	r3, r2
 8002072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff fb7a 	bl	800176c <HAL_GetTick>
 8002078:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b20      	cmp	r3, #32
 8002084:	f040 80e0 	bne.w	8002248 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2319      	movs	r3, #25
 800208e:	2201      	movs	r2, #1
 8002090:	4970      	ldr	r1, [pc, #448]	; (8002254 <HAL_I2C_Master_Transmit+0x1f4>)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fc92 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
 80020a0:	e0d3      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_I2C_Master_Transmit+0x50>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e0cc      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d007      	beq.n	80020d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0201 	orr.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2210      	movs	r2, #16
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	893a      	ldrh	r2, [r7, #8]
 8002106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_I2C_Master_Transmit+0x1f8>)
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002118:	8979      	ldrh	r1, [r7, #10]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	6a3a      	ldr	r2, [r7, #32]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fafc 	bl	800271c <I2C_MasterRequestWrite>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e08d      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002144:	e066      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fd0c 	bl	8002b68 <I2C_WaitOnTXEFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2b04      	cmp	r3, #4
 800215c:	d107      	bne.n	800216e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e06b      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	3b01      	subs	r3, #1
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d11b      	bne.n	80021e8 <HAL_I2C_Master_Transmit+0x188>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d017      	beq.n	80021e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	6a39      	ldr	r1, [r7, #32]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fcfc 	bl	8002bea <I2C_WaitOnBTFFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d107      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e01a      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d194      	bne.n	8002146 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	e000      	b.n	800224a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
  }
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	00100002 	.word	0x00100002
 8002258:	ffff0000 	.word	0xffff0000

0800225c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	460b      	mov	r3, r1
 800226a:	817b      	strh	r3, [r7, #10]
 800226c:	4613      	mov	r3, r2
 800226e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fa7a 	bl	800176c <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	f040 823f 	bne.w	8002706 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	497f      	ldr	r1, [pc, #508]	; (8002490 <HAL_I2C_Master_Receive+0x234>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb92 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e232      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Receive+0x54>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e22b      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2222      	movs	r2, #34	; 0x22
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2210      	movs	r2, #16
 80022f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a5f      	ldr	r2, [pc, #380]	; (8002494 <HAL_I2C_Master_Receive+0x238>)
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fa7e 	bl	8002820 <I2C_MasterRequestRead>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1ec      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e1c0      	b.n	80026e0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b01      	cmp	r3, #1
 8002364:	d11e      	bne.n	80023a4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002376:	b672      	cpsid	i
}
 8002378:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023a0:	b662      	cpsie	i
}
 80023a2:	e035      	b.n	8002410 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d11e      	bne.n	80023ea <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023bc:	b672      	cpsid	i
}
 80023be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023e6:	b662      	cpsie	i
}
 80023e8:	e012      	b.n	8002410 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002410:	e166      	b.n	80026e0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	2b03      	cmp	r3, #3
 8002418:	f200 811f 	bhi.w	800265a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b01      	cmp	r3, #1
 8002422:	d123      	bne.n	800246c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fc1f 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e167      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	855a      	strh	r2, [r3, #42]	; 0x2a
 800246a:	e139      	b.n	80026e0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	2b02      	cmp	r3, #2
 8002472:	d152      	bne.n	800251a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	2200      	movs	r2, #0
 800247c:	4906      	ldr	r1, [pc, #24]	; (8002498 <HAL_I2C_Master_Receive+0x23c>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fa9c 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e13c      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
 800248e:	bf00      	nop
 8002490:	00100002 	.word	0x00100002
 8002494:	ffff0000 	.word	0xffff0000
 8002498:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800249c:	b672      	cpsid	i
}
 800249e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691a      	ldr	r2, [r3, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024e2:	b662      	cpsie	i
}
 80024e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	3b01      	subs	r3, #1
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002518:	e0e2      	b.n	80026e0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	2200      	movs	r2, #0
 8002522:	497b      	ldr	r1, [pc, #492]	; (8002710 <HAL_I2C_Master_Receive+0x4b4>)
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fa49 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0e9      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800257a:	4b66      	ldr	r3, [pc, #408]	; (8002714 <HAL_I2C_Master_Receive+0x4b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	4a65      	ldr	r2, [pc, #404]	; (8002718 <HAL_I2C_Master_Receive+0x4bc>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0a1a      	lsrs	r2, r3, #8
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00da      	lsls	r2, r3, #3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	3b01      	subs	r3, #1
 8002598:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d118      	bne.n	80025d2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0220 	orr.w	r2, r3, #32
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80025c2:	b662      	cpsie	i
}
 80025c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e09a      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d1d9      	bne.n	8002594 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29b      	uxth	r3, r3
 800261a:	3b01      	subs	r3, #1
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002622:	b662      	cpsie	i
}
 8002624:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002658:	e042      	b.n	80026e0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fb04 	bl	8002c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e04c      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d118      	bne.n	80026e0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f ae94 	bne.w	8002412 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010004 	.word	0x00010004
 8002714:	20000060 	.word	0x20000060
 8002718:	14f8b589 	.word	0x14f8b589

0800271c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	460b      	mov	r3, r1
 800272a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d006      	beq.n	8002746 <I2C_MasterRequestWrite+0x2a>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d003      	beq.n	8002746 <I2C_MasterRequestWrite+0x2a>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002744:	d108      	bne.n	8002758 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e00b      	b.n	8002770 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	2b12      	cmp	r3, #18
 800275e:	d107      	bne.n	8002770 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f91d 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002796:	d103      	bne.n	80027a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e035      	b.n	8002810 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027ac:	d108      	bne.n	80027c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ae:	897b      	ldrh	r3, [r7, #10]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027bc:	611a      	str	r2, [r3, #16]
 80027be:	e01b      	b.n	80027f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027c0:	897b      	ldrh	r3, [r7, #10]
 80027c2:	11db      	asrs	r3, r3, #7
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f003 0306 	and.w	r3, r3, #6
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f063 030f 	orn	r3, r3, #15
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <I2C_MasterRequestWrite+0xfc>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f943 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e010      	b.n	8002810 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ee:	897b      	ldrh	r3, [r7, #10]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4907      	ldr	r1, [pc, #28]	; (800281c <I2C_MasterRequestWrite+0x100>)
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f933 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	00010008 	.word	0x00010008
 800281c:	00010002 	.word	0x00010002

08002820 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	460b      	mov	r3, r1
 800282e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002844:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d006      	beq.n	800285a <I2C_MasterRequestRead+0x3a>
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d003      	beq.n	800285a <I2C_MasterRequestRead+0x3a>
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002858:	d108      	bne.n	800286c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e00b      	b.n	8002884 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	2b11      	cmp	r3, #17
 8002872:	d107      	bne.n	8002884 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002882:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f893 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00d      	beq.n	80028b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	d103      	bne.n	80028b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e079      	b.n	80029ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028c0:	d108      	bne.n	80028d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	e05f      	b.n	8002994 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	11db      	asrs	r3, r3, #7
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0306 	and.w	r3, r3, #6
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f063 030f 	orn	r3, r3, #15
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4930      	ldr	r1, [pc, #192]	; (80029b4 <I2C_MasterRequestRead+0x194>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f8b9 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e054      	b.n	80029ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002902:	897b      	ldrh	r3, [r7, #10]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4929      	ldr	r1, [pc, #164]	; (80029b8 <I2C_MasterRequestRead+0x198>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 f8a9 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e044      	b.n	80029ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002946:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f831 	bl	80029bc <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00d      	beq.n	800297c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296e:	d103      	bne.n	8002978 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e017      	b.n	80029ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800297c:	897b      	ldrh	r3, [r7, #10]
 800297e:	11db      	asrs	r3, r3, #7
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0306 	and.w	r3, r3, #6
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f063 030e 	orn	r3, r3, #14
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <I2C_MasterRequestRead+0x198>)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f865 	bl	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	00010008 	.word	0x00010008
 80029b8:	00010002 	.word	0x00010002

080029bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029cc:	e025      	b.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d021      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe fec9 	bl	800176c <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f043 0220 	orr.w	r2, r3, #32
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e023      	b.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10d      	bne.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf0c      	ite	eq
 8002a36:	2301      	moveq	r3, #1
 8002a38:	2300      	movne	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	e00c      	b.n	8002a5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf0c      	ite	eq
 8002a52:	2301      	moveq	r3, #1
 8002a54:	2300      	movne	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d0b6      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a78:	e051      	b.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d123      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aa2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e046      	b.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d021      	beq.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ada:	f7fe fe47 	bl	800176c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d302      	bcc.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f043 0220 	orr.w	r2, r3, #32
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e020      	b.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10c      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e00b      	b.n	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d18d      	bne.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b74:	e02d      	b.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f8ce 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e02d      	b.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d021      	beq.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7fe fded 	bl	800176c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d116      	bne.n	8002bd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e007      	b.n	8002be2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d1ca      	bne.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf6:	e02d      	b.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f88d 	bl	8002d18 <I2C_IsAcknowledgeFailed>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e02d      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d021      	beq.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c10:	f7fe fdac 	bl	800176c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d302      	bcc.n	8002c26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d116      	bne.n	8002c54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e007      	b.n	8002c64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d1ca      	bne.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c78:	e042      	b.n	8002d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d119      	bne.n	8002cbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0210 	mvn.w	r2, #16
 8002c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e029      	b.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cbc:	f7fe fd56 	bl	800176c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d302      	bcc.n	8002cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e007      	b.n	8002d10 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d1b5      	bne.n	8002c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d2e:	d11b      	bne.n	8002d68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e272      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 8087 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d94:	4b92      	ldr	r3, [pc, #584]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d00c      	beq.n	8002dba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002da0:	4b8f      	ldr	r3, [pc, #572]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d112      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x5e>
 8002dac:	4b8c      	ldr	r3, [pc, #560]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d10b      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dba:	4b89      	ldr	r3, [pc, #548]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d06c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x12c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d168      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e24c      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dda:	d106      	bne.n	8002dea <HAL_RCC_OscConfig+0x76>
 8002ddc:	4b80      	ldr	r3, [pc, #512]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a7f      	ldr	r2, [pc, #508]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e02e      	b.n	8002e48 <HAL_RCC_OscConfig+0xd4>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x98>
 8002df2:	4b7b      	ldr	r3, [pc, #492]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a7a      	ldr	r2, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e01d      	b.n	8002e48 <HAL_RCC_OscConfig+0xd4>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0xbc>
 8002e16:	4b72      	ldr	r3, [pc, #456]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a71      	ldr	r2, [pc, #452]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e00b      	b.n	8002e48 <HAL_RCC_OscConfig+0xd4>
 8002e30:	4b6b      	ldr	r3, [pc, #428]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a6a      	ldr	r2, [pc, #424]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a67      	ldr	r2, [pc, #412]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fc8c 	bl	800176c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe fc88 	bl	800176c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e200      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0xe4>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fc78 	bl	800176c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e80:	f7fe fc74 	bl	800176c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1ec      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x10c>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d063      	beq.n	8002f76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eae:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eba:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d11c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x18c>
 8002ec6:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x176>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d001      	beq.n	8002eea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e1c0      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4939      	ldr	r1, [pc, #228]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	e03a      	b.n	8002f76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f08:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0e:	f7fe fc2d 	bl	800176c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f16:	f7fe fc29 	bl	800176c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e1a1      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4927      	ldr	r1, [pc, #156]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
 8002f48:	e015      	b.n	8002f76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f4a:	4b26      	ldr	r3, [pc, #152]	; (8002fe4 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fc0c 	bl	800176c <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f58:	f7fe fc08 	bl	800176c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e180      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d03a      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d019      	beq.n	8002fbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f8a:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f90:	f7fe fbec 	bl	800176c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f98:	f7fe fbe8 	bl	800176c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e160      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f000 fad8 	bl	800356c <RCC_Delay>
 8002fbc:	e01c      	b.n	8002ff8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe fbd2 	bl	800176c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fca:	e00f      	b.n	8002fec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fbce 	bl	800176c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d908      	bls.n	8002fec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e146      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	42420000 	.word	0x42420000
 8002fe8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e9      	bne.n	8002fcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a6 	beq.w	8003152 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003020:	61d3      	str	r3, [r2, #28]
 8003022:	4b85      	ldr	r3, [pc, #532]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003032:	4b82      	ldr	r3, [pc, #520]	; (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	2b00      	cmp	r3, #0
 800303c:	d118      	bne.n	8003070 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303e:	4b7f      	ldr	r3, [pc, #508]	; (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a7e      	ldr	r2, [pc, #504]	; (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003048:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304a:	f7fe fb8f 	bl	800176c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003052:	f7fe fb8b 	bl	800176c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	; 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e103      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	4b75      	ldr	r3, [pc, #468]	; (800323c <HAL_RCC_OscConfig+0x4c8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x312>
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a6e      	ldr	r2, [pc, #440]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	e02d      	b.n	80030e2 <HAL_RCC_OscConfig+0x36e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x334>
 800308e:	4b6a      	ldr	r3, [pc, #424]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a69      	ldr	r2, [pc, #420]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6213      	str	r3, [r2, #32]
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a66      	ldr	r2, [pc, #408]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6213      	str	r3, [r2, #32]
 80030a6:	e01c      	b.n	80030e2 <HAL_RCC_OscConfig+0x36e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d10c      	bne.n	80030ca <HAL_RCC_OscConfig+0x356>
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a60      	ldr	r2, [pc, #384]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	4b5e      	ldr	r3, [pc, #376]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a5d      	ldr	r2, [pc, #372]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6213      	str	r3, [r2, #32]
 80030c8:	e00b      	b.n	80030e2 <HAL_RCC_OscConfig+0x36e>
 80030ca:	4b5b      	ldr	r3, [pc, #364]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4a5a      	ldr	r2, [pc, #360]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030d0:	f023 0301 	bic.w	r3, r3, #1
 80030d4:	6213      	str	r3, [r2, #32]
 80030d6:	4b58      	ldr	r3, [pc, #352]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4a57      	ldr	r2, [pc, #348]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	f023 0304 	bic.w	r3, r3, #4
 80030e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d015      	beq.n	8003116 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7fe fb3f 	bl	800176c <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f0:	e00a      	b.n	8003108 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f2:	f7fe fb3b 	bl	800176c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e0b1      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ee      	beq.n	80030f2 <HAL_RCC_OscConfig+0x37e>
 8003114:	e014      	b.n	8003140 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fe fb29 	bl	800176c <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311c:	e00a      	b.n	8003134 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe fb25 	bl	800176c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e09b      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003134:	4b40      	ldr	r3, [pc, #256]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1ee      	bne.n	800311e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d105      	bne.n	8003152 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003146:	4b3c      	ldr	r3, [pc, #240]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4a3b      	ldr	r2, [pc, #236]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003150:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8087 	beq.w	800326a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800315c:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b08      	cmp	r3, #8
 8003166:	d061      	beq.n	800322c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d146      	bne.n	80031fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003170:	4b33      	ldr	r3, [pc, #204]	; (8003240 <HAL_RCC_OscConfig+0x4cc>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fe faf9 	bl	800176c <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe faf5 	bl	800176c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e06d      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d108      	bne.n	80031b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	4921      	ldr	r1, [pc, #132]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b8:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a19      	ldr	r1, [r3, #32]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	430b      	orrs	r3, r1
 80031ca:	491b      	ldr	r1, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fac9 	bl	800176c <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031de:	f7fe fac5 	bl	800176c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e03d      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x46a>
 80031fc:	e035      	b.n	800326a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b10      	ldr	r3, [pc, #64]	; (8003240 <HAL_RCC_OscConfig+0x4cc>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003204:	f7fe fab2 	bl	800176c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe faae 	bl	800176c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e026      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x498>
 800322a:	e01e      	b.n	800326a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d107      	bne.n	8003244 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e019      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
 8003238:	40021000 	.word	0x40021000
 800323c:	40007000 	.word	0x40007000
 8003240:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_OscConfig+0x500>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	429a      	cmp	r2, r3
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0d0      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b67      	ldr	r3, [pc, #412]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 0207 	bic.w	r2, r3, #7
 80032a2:	4965      	ldr	r1, [pc, #404]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b63      	ldr	r3, [pc, #396]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0b8      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d4:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a58      	ldr	r2, [pc, #352]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ec:	4b53      	ldr	r3, [pc, #332]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a52      	ldr	r2, [pc, #328]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d040      	beq.n	8003398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b47      	ldr	r3, [pc, #284]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e07f      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003336:	4b41      	ldr	r3, [pc, #260]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e073      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003346:	4b3d      	ldr	r3, [pc, #244]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e06b      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003356:	4b39      	ldr	r3, [pc, #228]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f023 0203 	bic.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4936      	ldr	r1, [pc, #216]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003368:	f7fe fa00 	bl	800176c <HAL_GetTick>
 800336c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	e00a      	b.n	8003386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003370:	f7fe f9fc 	bl	800176c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	f241 3288 	movw	r2, #5000	; 0x1388
 800337e:	4293      	cmp	r3, r2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e053      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 020c 	and.w	r2, r3, #12
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	429a      	cmp	r2, r3
 8003396:	d1eb      	bne.n	8003370 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003398:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d210      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b24      	ldr	r3, [pc, #144]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0207 	bic.w	r2, r3, #7
 80033ae:	4922      	ldr	r1, [pc, #136]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d001      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e032      	b.n	800342e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	4b19      	ldr	r3, [pc, #100]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4916      	ldr	r1, [pc, #88]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033f2:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	490e      	ldr	r1, [pc, #56]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003406:	f000 f821 	bl	800344c <HAL_RCC_GetSysClockFreq>
 800340a:	4602      	mov	r2, r0
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	490a      	ldr	r1, [pc, #40]	; (8003440 <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	5ccb      	ldrb	r3, [r1, r3]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_RCC_ClockConfig+0x1cc>)
 8003420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <HAL_RCC_ClockConfig+0x1d0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7fe f95e 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40022000 	.word	0x40022000
 800343c:	40021000 	.word	0x40021000
 8003440:	08004584 	.word	0x08004584
 8003444:	20000060 	.word	0x20000060
 8003448:	20000064 	.word	0x20000064

0800344c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b490      	push	{r4, r7}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003454:	1d3c      	adds	r4, r7, #4
 8003456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800345c:	f240 2301 	movw	r3, #513	; 0x201
 8003460:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	2300      	movs	r3, #0
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b04      	cmp	r3, #4
 8003484:	d002      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x40>
 8003486:	2b08      	cmp	r3, #8
 8003488:	d003      	beq.n	8003492 <HAL_RCC_GetSysClockFreq+0x46>
 800348a:	e02b      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <HAL_RCC_GetSysClockFreq+0xb4>)
 800348e:	623b      	str	r3, [r7, #32]
      break;
 8003490:	e02b      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	0c9b      	lsrs	r3, r3, #18
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3328      	adds	r3, #40	; 0x28
 800349c:	443b      	add	r3, r7
 800349e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0c5b      	lsrs	r3, r3, #17
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	3328      	adds	r3, #40	; 0x28
 80034ba:	443b      	add	r3, r7
 80034bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	4a0e      	ldr	r2, [pc, #56]	; (8003500 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034c6:	fb03 f202 	mul.w	r2, r3, r2
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	e004      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	623b      	str	r3, [r7, #32]
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034e6:	623b      	str	r3, [r7, #32]
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	6a3b      	ldr	r3, [r7, #32]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3728      	adds	r7, #40	; 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc90      	pop	{r4, r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	08004474 	.word	0x08004474
 80034fc:	40021000 	.word	0x40021000
 8003500:	007a1200 	.word	0x007a1200
 8003504:	003d0900 	.word	0x003d0900

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b02      	ldr	r3, [pc, #8]	; (8003518 <HAL_RCC_GetHCLKFreq+0x10>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	20000060 	.word	0x20000060

0800351c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003520:	f7ff fff2 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	08004594 	.word	0x08004594

08003544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003548:	f7ff ffde 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	0adb      	lsrs	r3, r3, #11
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4903      	ldr	r1, [pc, #12]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	08004594 	.word	0x08004594

0800356c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <RCC_Delay+0x34>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <RCC_Delay+0x38>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0a5b      	lsrs	r3, r3, #9
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003588:	bf00      	nop
  }
  while (Delay --);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e5a      	subs	r2, r3, #1
 800358e:	60fa      	str	r2, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f9      	bne.n	8003588 <RCC_Delay+0x1c>
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	20000060 	.word	0x20000060
 80035a4:	10624dd3 	.word	0x10624dd3

080035a8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e033      	b.n	8003622 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd ff8c 	bl	80014ec <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fb61 	bl	8003ca4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003600:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003610:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d117      	bne.n	8003692 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <HAL_USART_IRQHandler+0x66>
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b22      	cmp	r3, #34	; 0x22
 8003680:	d103      	bne.n	800368a <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9b4 	bl	80039f0 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8003688:	e0e9      	b.n	800385e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa36 	bl	8003afc <USART_TransmitReceive_IT>
      return;
 8003690:	e0e5      	b.n	800385e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80bb 	beq.w	8003810 <HAL_USART_IRQHandler+0x1e4>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_USART_IRQHandler+0x84>
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80b0 	beq.w	8003810 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_USART_IRQHandler+0xa4>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f043 0201 	orr.w	r2, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_USART_IRQHandler+0xc4>
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0202 	orr.w	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_USART_IRQHandler+0xe4>
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00f      	beq.n	800373a <HAL_USART_IRQHandler+0x10e>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <HAL_USART_IRQHandler+0x102>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0208 	orr.w	r2, r3, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 808c 	beq.w	800385c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d011      	beq.n	8003772 <HAL_USART_IRQHandler+0x146>
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00c      	beq.n	8003772 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b22      	cmp	r3, #34	; 0x22
 8003762:	d103      	bne.n	800376c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f943 	bl	80039f0 <USART_Receive_IT>
 800376a:	e002      	b.n	8003772 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f9c5 	bl	8003afc <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <HAL_USART_IRQHandler+0x16e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d031      	beq.n	80037fe <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f888 	bl	80038b0 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d023      	beq.n	80037f6 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037bc:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d013      	beq.n	80037ee <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	4a26      	ldr	r2, [pc, #152]	; (8003864 <HAL_USART_IRQHandler+0x238>)
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe f906 	bl	80019e4 <HAL_DMA_Abort_IT>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d016      	beq.n	800380c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037e8:	4610      	mov	r0, r2
 80037ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80037ec:	e00e      	b.n	800380c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f855 	bl	800389e <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	e00a      	b.n	800380c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f851 	bl	800389e <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e006      	b.n	800380c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f84d 	bl	800389e <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800380a:	e027      	b.n	800385c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800380c:	bf00      	nop
    return;
 800380e:	e025      	b.n	800385c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d012      	beq.n	8003840 <HAL_USART_IRQHandler+0x214>
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b12      	cmp	r3, #18
 800382e:	d103      	bne.n	8003838 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f86e 	bl	8003912 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8003836:	e012      	b.n	800385e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f95f 	bl	8003afc <USART_TransmitReceive_IT>
    return;
 800383e:	e00e      	b.n	800385e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_USART_IRQHandler+0x232>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d004      	beq.n	800385e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8ab 	bl	80039b0 <USART_EndTransmit_IT>
    return;
 800385a:	e000      	b.n	800385e <HAL_USART_IRQHandler+0x232>
    return;
 800385c:	bf00      	nop
  }
}
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	080038eb 	.word	0x080038eb

08003868 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr

0800389e <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff ffca 	bl	800389e <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b12      	cmp	r3, #18
 8003924:	d13e      	bne.n	80039a4 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392e:	d114      	bne.n	800395a <USART_Transmit_IT+0x48>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d110      	bne.n	800395a <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	1c9a      	adds	r2, r3, #2
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24
 8003958:	e008      	b.n	800396c <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6251      	str	r1, [r2, #36]	; 0x24
 8003964:	781a      	ldrb	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29b      	uxth	r3, r3
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4619      	mov	r1, r3
 800397a:	8551      	strh	r1, [r2, #42]	; 0x2a
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10f      	bne.n	80039a0 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398e:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c6:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ff41 	bl	8003868 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b22      	cmp	r3, #34	; 0x22
 8003a02:	d176      	bne.n	8003af2 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d117      	bne.n	8003a3e <USART_Receive_IT+0x4e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d113      	bne.n	8003a3e <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	1c9a      	adds	r2, r3, #2
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a3c:	e026      	b.n	8003a8c <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d007      	beq.n	8003a62 <USART_Receive_IT+0x72>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <USART_Receive_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e008      	b.n	8003a82 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d120      	bne.n	8003ae6 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0220 	bic.w	r2, r2, #32
 8003ab2:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac2:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0201 	bic.w	r2, r2, #1
 8003ad2:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fecc 	bl	800387a <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e006      	b.n	8003af4 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	22ff      	movs	r2, #255	; 0xff
 8003aec:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b32      	cmp	r3, #50	; 0x32
 8003b0e:	f040 80c4 	bne.w	8003c9a <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d03f      	beq.n	8003b9c <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d138      	bne.n	8003b9c <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b32:	d116      	bne.n	8003b62 <USART_TransmitReceive_IT+0x66>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d112      	bne.n	8003b62 <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b54:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	1c9a      	adds	r2, r3, #2
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8003b60:	e008      	b.n	8003b74 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	1c59      	adds	r1, r3, #1
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6251      	str	r1, [r2, #36]	; 0x24
 8003b6c:	781a      	ldrb	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b9a:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d051      	beq.n	8003c4a <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d14a      	bne.n	8003c4a <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbc:	d117      	bne.n	8003bee <USART_TransmitReceive_IT+0xf2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d113      	bne.n	8003bee <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	1c9a      	adds	r2, r3, #2
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bec:	e026      	b.n	8003c3c <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	d007      	beq.n	8003c12 <USART_TransmitReceive_IT+0x116>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <USART_TransmitReceive_IT+0x124>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e008      	b.n	8003c32 <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d120      	bne.n	8003c96 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0220 	bic.w	r2, r2, #32
 8003c62:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c72:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff fdfd 	bl	800388c <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	e002      	b.n	8003c9c <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 020c 	bic.w	r2, r2, #12
 8003cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003cd8:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cee:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d06:	f023 030c 	bic.w	r3, r3, #12
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d38:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a53      	ldr	r2, [pc, #332]	; (8003e8c <USART_SetConfig+0x1e8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d14f      	bne.n	8003de4 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d44:	f7ff fbfe 	bl	8003544 <HAL_RCC_GetPCLK2Freq>
 8003d48:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	009a      	lsls	r2, r3, #2
 8003d54:	441a      	add	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	4a4b      	ldr	r2, [pc, #300]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	0119      	lsls	r1, r3, #4
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009a      	lsls	r2, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d80:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003d82:	fba3 0302 	umull	r0, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2064      	movs	r0, #100	; 0x64
 8003d8a:	fb00 f303 	mul.w	r3, r0, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	4a3e      	ldr	r2, [pc, #248]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003da2:	4419      	add	r1, r3
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009a      	lsls	r2, r3, #2
 8003dae:	441a      	add	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dba:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003dbc:	fba3 0302 	umull	r0, r3, r3, r2
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	2064      	movs	r0, #100	; 0x64
 8003dc4:	fb00 f303 	mul.w	r3, r0, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	3332      	adds	r3, #50	; 0x32
 8003dce:	4a30      	ldr	r2, [pc, #192]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	440a      	add	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003de2:	e04e      	b.n	8003e82 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7ff fb9a 	bl	800351c <HAL_RCC_GetPCLK1Freq>
 8003de8:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009a      	lsls	r2, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	0119      	lsls	r1, r3, #4
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009a      	lsls	r2, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003e22:	fba3 0302 	umull	r0, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2064      	movs	r0, #100	; 0x64
 8003e2a:	fb00 f303 	mul.w	r3, r0, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003e42:	4419      	add	r1, r3
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009a      	lsls	r2, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003e5c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	2064      	movs	r0, #100	; 0x64
 8003e64:	fb00 f303 	mul.w	r3, r0, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	3332      	adds	r3, #50	; 0x32
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <USART_SetConfig+0x1ec>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	440a      	add	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40013800 	.word	0x40013800
 8003e90:	51eb851f 	.word	0x51eb851f

08003e94 <malloc>:
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <malloc+0xc>)
 8003e96:	4601      	mov	r1, r0
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	f000 b823 	b.w	8003ee4 <_malloc_r>
 8003e9e:	bf00      	nop
 8003ea0:	200000b8 	.word	0x200000b8

08003ea4 <sbrk_aligned>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	4e0e      	ldr	r6, [pc, #56]	; (8003ee0 <sbrk_aligned+0x3c>)
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	6831      	ldr	r1, [r6, #0]
 8003eac:	4605      	mov	r5, r0
 8003eae:	b911      	cbnz	r1, 8003eb6 <sbrk_aligned+0x12>
 8003eb0:	f000 f8ac 	bl	800400c <_sbrk_r>
 8003eb4:	6030      	str	r0, [r6, #0]
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f8a7 	bl	800400c <_sbrk_r>
 8003ebe:	1c43      	adds	r3, r0, #1
 8003ec0:	d00a      	beq.n	8003ed8 <sbrk_aligned+0x34>
 8003ec2:	1cc4      	adds	r4, r0, #3
 8003ec4:	f024 0403 	bic.w	r4, r4, #3
 8003ec8:	42a0      	cmp	r0, r4
 8003eca:	d007      	beq.n	8003edc <sbrk_aligned+0x38>
 8003ecc:	1a21      	subs	r1, r4, r0
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f000 f89c 	bl	800400c <_sbrk_r>
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d101      	bne.n	8003edc <sbrk_aligned+0x38>
 8003ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8003edc:	4620      	mov	r0, r4
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	2000017c 	.word	0x2000017c

08003ee4 <_malloc_r>:
 8003ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee8:	1ccd      	adds	r5, r1, #3
 8003eea:	f025 0503 	bic.w	r5, r5, #3
 8003eee:	3508      	adds	r5, #8
 8003ef0:	2d0c      	cmp	r5, #12
 8003ef2:	bf38      	it	cc
 8003ef4:	250c      	movcc	r5, #12
 8003ef6:	2d00      	cmp	r5, #0
 8003ef8:	4607      	mov	r7, r0
 8003efa:	db01      	blt.n	8003f00 <_malloc_r+0x1c>
 8003efc:	42a9      	cmp	r1, r5
 8003efe:	d905      	bls.n	8003f0c <_malloc_r+0x28>
 8003f00:	230c      	movs	r3, #12
 8003f02:	2600      	movs	r6, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4630      	mov	r0, r6
 8003f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003fe0 <_malloc_r+0xfc>
 8003f10:	f000 f868 	bl	8003fe4 <__malloc_lock>
 8003f14:	f8d8 3000 	ldr.w	r3, [r8]
 8003f18:	461c      	mov	r4, r3
 8003f1a:	bb5c      	cbnz	r4, 8003f74 <_malloc_r+0x90>
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	4638      	mov	r0, r7
 8003f20:	f7ff ffc0 	bl	8003ea4 <sbrk_aligned>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	4604      	mov	r4, r0
 8003f28:	d155      	bne.n	8003fd6 <_malloc_r+0xf2>
 8003f2a:	f8d8 4000 	ldr.w	r4, [r8]
 8003f2e:	4626      	mov	r6, r4
 8003f30:	2e00      	cmp	r6, #0
 8003f32:	d145      	bne.n	8003fc0 <_malloc_r+0xdc>
 8003f34:	2c00      	cmp	r4, #0
 8003f36:	d048      	beq.n	8003fca <_malloc_r+0xe6>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	eb04 0903 	add.w	r9, r4, r3
 8003f42:	f000 f863 	bl	800400c <_sbrk_r>
 8003f46:	4581      	cmp	r9, r0
 8003f48:	d13f      	bne.n	8003fca <_malloc_r+0xe6>
 8003f4a:	6821      	ldr	r1, [r4, #0]
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	1a6d      	subs	r5, r5, r1
 8003f50:	4629      	mov	r1, r5
 8003f52:	f7ff ffa7 	bl	8003ea4 <sbrk_aligned>
 8003f56:	3001      	adds	r0, #1
 8003f58:	d037      	beq.n	8003fca <_malloc_r+0xe6>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	442b      	add	r3, r5
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	f8d8 3000 	ldr.w	r3, [r8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d038      	beq.n	8003fda <_malloc_r+0xf6>
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	42a2      	cmp	r2, r4
 8003f6c:	d12b      	bne.n	8003fc6 <_malloc_r+0xe2>
 8003f6e:	2200      	movs	r2, #0
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	e00f      	b.n	8003f94 <_malloc_r+0xb0>
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	1b52      	subs	r2, r2, r5
 8003f78:	d41f      	bmi.n	8003fba <_malloc_r+0xd6>
 8003f7a:	2a0b      	cmp	r2, #11
 8003f7c:	d917      	bls.n	8003fae <_malloc_r+0xca>
 8003f7e:	1961      	adds	r1, r4, r5
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	6025      	str	r5, [r4, #0]
 8003f84:	bf18      	it	ne
 8003f86:	6059      	strne	r1, [r3, #4]
 8003f88:	6863      	ldr	r3, [r4, #4]
 8003f8a:	bf08      	it	eq
 8003f8c:	f8c8 1000 	streq.w	r1, [r8]
 8003f90:	5162      	str	r2, [r4, r5]
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	4638      	mov	r0, r7
 8003f96:	f104 060b 	add.w	r6, r4, #11
 8003f9a:	f000 f829 	bl	8003ff0 <__malloc_unlock>
 8003f9e:	f026 0607 	bic.w	r6, r6, #7
 8003fa2:	1d23      	adds	r3, r4, #4
 8003fa4:	1af2      	subs	r2, r6, r3
 8003fa6:	d0ae      	beq.n	8003f06 <_malloc_r+0x22>
 8003fa8:	1b9b      	subs	r3, r3, r6
 8003faa:	50a3      	str	r3, [r4, r2]
 8003fac:	e7ab      	b.n	8003f06 <_malloc_r+0x22>
 8003fae:	42a3      	cmp	r3, r4
 8003fb0:	6862      	ldr	r2, [r4, #4]
 8003fb2:	d1dd      	bne.n	8003f70 <_malloc_r+0x8c>
 8003fb4:	f8c8 2000 	str.w	r2, [r8]
 8003fb8:	e7ec      	b.n	8003f94 <_malloc_r+0xb0>
 8003fba:	4623      	mov	r3, r4
 8003fbc:	6864      	ldr	r4, [r4, #4]
 8003fbe:	e7ac      	b.n	8003f1a <_malloc_r+0x36>
 8003fc0:	4634      	mov	r4, r6
 8003fc2:	6876      	ldr	r6, [r6, #4]
 8003fc4:	e7b4      	b.n	8003f30 <_malloc_r+0x4c>
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	e7cc      	b.n	8003f64 <_malloc_r+0x80>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	4638      	mov	r0, r7
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	f000 f80e 	bl	8003ff0 <__malloc_unlock>
 8003fd4:	e797      	b.n	8003f06 <_malloc_r+0x22>
 8003fd6:	6025      	str	r5, [r4, #0]
 8003fd8:	e7dc      	b.n	8003f94 <_malloc_r+0xb0>
 8003fda:	605b      	str	r3, [r3, #4]
 8003fdc:	deff      	udf	#255	; 0xff
 8003fde:	bf00      	nop
 8003fe0:	20000178 	.word	0x20000178

08003fe4 <__malloc_lock>:
 8003fe4:	4801      	ldr	r0, [pc, #4]	; (8003fec <__malloc_lock+0x8>)
 8003fe6:	f000 b84b 	b.w	8004080 <__retarget_lock_acquire_recursive>
 8003fea:	bf00      	nop
 8003fec:	200002bc 	.word	0x200002bc

08003ff0 <__malloc_unlock>:
 8003ff0:	4801      	ldr	r0, [pc, #4]	; (8003ff8 <__malloc_unlock+0x8>)
 8003ff2:	f000 b846 	b.w	8004082 <__retarget_lock_release_recursive>
 8003ff6:	bf00      	nop
 8003ff8:	200002bc 	.word	0x200002bc

08003ffc <memset>:
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4402      	add	r2, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <_sbrk_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	2300      	movs	r3, #0
 8004010:	4d05      	ldr	r5, [pc, #20]	; (8004028 <_sbrk_r+0x1c>)
 8004012:	4604      	mov	r4, r0
 8004014:	4608      	mov	r0, r1
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fd faee 	bl	80015f8 <_sbrk>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d102      	bne.n	8004026 <_sbrk_r+0x1a>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	b103      	cbz	r3, 8004026 <_sbrk_r+0x1a>
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	bd38      	pop	{r3, r4, r5, pc}
 8004028:	200002b8 	.word	0x200002b8

0800402c <__errno>:
 800402c:	4b01      	ldr	r3, [pc, #4]	; (8004034 <__errno+0x8>)
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	200000b8 	.word	0x200000b8

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	2600      	movs	r6, #0
 800403c:	4d0c      	ldr	r5, [pc, #48]	; (8004070 <__libc_init_array+0x38>)
 800403e:	4c0d      	ldr	r4, [pc, #52]	; (8004074 <__libc_init_array+0x3c>)
 8004040:	1b64      	subs	r4, r4, r5
 8004042:	10a4      	asrs	r4, r4, #2
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	f000 f82a 	bl	80040a0 <_init>
 800404c:	2600      	movs	r6, #0
 800404e:	4d0a      	ldr	r5, [pc, #40]	; (8004078 <__libc_init_array+0x40>)
 8004050:	4c0a      	ldr	r4, [pc, #40]	; (800407c <__libc_init_array+0x44>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f855 3b04 	ldr.w	r3, [r5], #4
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	0800459c 	.word	0x0800459c
 8004074:	0800459c 	.word	0x0800459c
 8004078:	0800459c 	.word	0x0800459c
 800407c:	080045a0 	.word	0x080045a0

08004080 <__retarget_lock_acquire_recursive>:
 8004080:	4770      	bx	lr

08004082 <__retarget_lock_release_recursive>:
 8004082:	4770      	bx	lr

08004084 <memcpy>:
 8004084:	440a      	add	r2, r1
 8004086:	4291      	cmp	r1, r2
 8004088:	f100 33ff 	add.w	r3, r0, #4294967295
 800408c:	d100      	bne.n	8004090 <memcpy+0xc>
 800408e:	4770      	bx	lr
 8004090:	b510      	push	{r4, lr}
 8004092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004096:	4291      	cmp	r1, r2
 8004098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800409c:	d1f9      	bne.n	8004092 <memcpy+0xe>
 800409e:	bd10      	pop	{r4, pc}

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
