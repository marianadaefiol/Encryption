
Encrypt_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  080037f0  080037f0  000137f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c10  08003c10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c10  08003c10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c10  08003c10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003c24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003c24  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f39  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d4  00000000  00000000  00028f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002a848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  0002b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001666b  00000000  00000000  0002b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af42  00000000  00000000  00042003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080725  00000000  00000000  0004cf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd66a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000245c  00000000  00000000  000cd6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037d8 	.word	0x080037d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080037d8 	.word	0x080037d8

0800014c <WakeUp>:
						 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9};
uint8_t DATA4[] = 		{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4,
						 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9};


void WakeUp(uint8_t *data_rec){
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Receive(&hi2c2, 0xFE, &data, sizeof(data), 1000);
 8000158:	f107 020f 	add.w	r2, r7, #15
 800015c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000160:	9300      	str	r3, [sp, #0]
 8000162:	2301      	movs	r3, #1
 8000164:	21fe      	movs	r1, #254	; 0xfe
 8000166:	4818      	ldr	r0, [pc, #96]	; (80001c8 <WakeUp+0x7c>)
 8000168:	f001 fcee 	bl	8001b48 <HAL_I2C_Master_Receive>
	HAL_Delay(5); // 2.5 ms para acordar; 45 ms para entrar em sleep
 800016c:	2005      	movs	r0, #5
 800016e:	f000 ff7d 	bl	800106c <HAL_Delay>
	// first read: 0 byte read - should receive an ACK

	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, &data, 1, 1000);
 8000172:	f107 020f 	add.w	r2, r7, #15
 8000176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800017a:	9300      	str	r3, [sp, #0]
 800017c:	2301      	movs	r3, #1
 800017e:	21c8      	movs	r1, #200	; 0xc8
 8000180:	4811      	ldr	r0, [pc, #68]	; (80001c8 <WakeUp+0x7c>)
 8000182:	f001 fce1 	bl	8001b48 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000186:	2005      	movs	r0, #5
 8000188:	f000 ff70 	bl	800106c <HAL_Delay>

	// Read 88bytes
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, &data, sizeof(data), 1000);		// Send 1 byte
 800018c:	f107 020f 	add.w	r2, r7, #15
 8000190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000194:	9300      	str	r3, [sp, #0]
 8000196:	2301      	movs	r3, #1
 8000198:	21c8      	movs	r1, #200	; 0xc8
 800019a:	480b      	ldr	r0, [pc, #44]	; (80001c8 <WakeUp+0x7c>)
 800019c:	f001 fbd6 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80001a0:	2005      	movs	r0, #5
 80001a2:	f000 ff63 	bl	800106c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, data_rec, 4, 1000); 		    	// Receiv: 0x04, 0x11, 0x33, 0x43.
 80001a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2304      	movs	r3, #4
 80001ae:	687a      	ldr	r2, [r7, #4]
 80001b0:	21c8      	movs	r1, #200	; 0xc8
 80001b2:	4805      	ldr	r0, [pc, #20]	; (80001c8 <WakeUp+0x7c>)
 80001b4:	f001 fcc8 	bl	8001b48 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80001b8:	2005      	movs	r0, #5
 80001ba:	f000 ff57 	bl	800106c <HAL_Delay>
}
 80001be:	bf00      	nop
 80001c0:	3710      	adds	r7, #16
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028

080001cc <ReadConfig>:

void ReadConfig(uint8_t *readCommand, uint16_t size, uint8_t *data_config) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b086      	sub	sp, #24
 80001d0:	af02      	add	r7, sp, #8
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	460b      	mov	r3, r1
 80001d6:	607a      	str	r2, [r7, #4]
 80001d8:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, readCommand, 8, 1000); 		    // Send read command
 80001da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001de:	9300      	str	r3, [sp, #0]
 80001e0:	2308      	movs	r3, #8
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	21c8      	movs	r1, #200	; 0xc8
 80001e6:	480b      	ldr	r0, [pc, #44]	; (8000214 <ReadConfig+0x48>)
 80001e8:	f001 fbb0 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80001ec:	2005      	movs	r0, #5
 80001ee:	f000 ff3d 	bl	800106c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, data_config, size, 1000); 	        // Receive: data packet size, 0x01 0x23..., CRC_LSB, CRC_MSB
 80001f2:	897b      	ldrh	r3, [r7, #10]
 80001f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f8:	9200      	str	r2, [sp, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	21c8      	movs	r1, #200	; 0xc8
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <ReadConfig+0x48>)
 8000200:	f001 fca2 	bl	8001b48 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000204:	2005      	movs	r0, #5
 8000206:	f000 ff31 	bl	800106c <HAL_Delay>
}
 800020a:	bf00      	nop
 800020c:	3710      	adds	r7, #16
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000028 	.word	0x20000028

08000218 <BlockConfigZone>:
	uint8_t configSlot14_15[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x0C, 0x00, 0x0E, 0x0E, 0x49, 0x88, 0x2F, 0xE5 };
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot14_15, sizeof(configSlot14_15), 1000);
	HAL_Delay(5);
}

void BlockConfigZone(uint8_t *receiv_byte){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af02      	add	r7, sp, #8
 800021e:	6078      	str	r0, [r7, #4]
	// Lock command: {COMMAND, COUNT, OPCODE, ZONE, CRC_88_LSB,  CRC_88_MSB, CRC_LSB, CRC_MSB}
	uint8_t blockConfig[] = { COMMAND, SIZE_BLOCK_CONFIG, COMMAND_LOCK, ZONE_CONFIG_LOCK, 0x00, 0xc3, 0xa4, 0x0f};
 8000220:	4a11      	ldr	r2, [pc, #68]	; (8000268 <BlockConfigZone+0x50>)
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	e892 0003 	ldmia.w	r2, {r0, r1}
 800022a:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, blockConfig, sizeof(blockConfig), 1000);
 800022e:	f107 0208 	add.w	r2, r7, #8
 8000232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2308      	movs	r3, #8
 800023a:	21c8      	movs	r1, #200	; 0xc8
 800023c:	480b      	ldr	r0, [pc, #44]	; (800026c <BlockConfigZone+0x54>)
 800023e:	f001 fb85 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000242:	2005      	movs	r0, #5
 8000244:	f000 ff12 	bl	800106c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv_byte, 1, 1000);
 8000248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2301      	movs	r3, #1
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	21c8      	movs	r1, #200	; 0xc8
 8000254:	4805      	ldr	r0, [pc, #20]	; (800026c <BlockConfigZone+0x54>)
 8000256:	f001 fc77 	bl	8001b48 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 800025a:	2005      	movs	r0, #5
 800025c:	f000 ff06 	bl	800106c <HAL_Delay>
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	08003850 	.word	0x08003850
 800026c:	20000028 	.word	0x20000028

08000270 <WriteDataZone>:


void WriteDataZone(void){
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000276:	af02      	add	r7, sp, #8

	// Write command: {COMMAND, COUNT, OPCODE, Param1 + Param2_LSB + Param2_MSB + DADOS + CRC_LSB + CRC_MSB}
	uint8_t writeData0[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x00, 0x00 , 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04,
 8000278:	4bc9      	ldr	r3, [pc, #804]	; (80005a0 <WriteDataZone+0x330>)
 800027a:	f507 7416 	add.w	r4, r7, #600	; 0x258
 800027e:	461d      	mov	r5, r3
 8000280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000288:	e895 0003 	ldmia.w	r5, {r0, r1}
 800028c:	e884 0003 	stmia.w	r4, {r0, r1}
		 	 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,  0x3a, 0x04};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData0, sizeof(writeData0), 1000);
 8000290:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8000294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2328      	movs	r3, #40	; 0x28
 800029c:	21c8      	movs	r1, #200	; 0xc8
 800029e:	48c1      	ldr	r0, [pc, #772]	; (80005a4 <WriteDataZone+0x334>)
 80002a0:	f001 fb54 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80002a4:	2005      	movs	r0, #5
 80002a6:	f000 fee1 	bl	800106c <HAL_Delay>

	uint8_t writeData1[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x08, 0x00 , 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x10, 0x11, 0x12, 0x13, 0x14,
 80002aa:	4bbf      	ldr	r3, [pc, #764]	; (80005a8 <WriteDataZone+0x338>)
 80002ac:	f507 740c 	add.w	r4, r7, #560	; 0x230
 80002b0:	461d      	mov	r5, r3
 80002b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002be:	e884 0003 	stmia.w	r4, {r0, r1}
	          0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x33, 0x59};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData1, sizeof(writeData1), 1000);
 80002c2:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80002c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2328      	movs	r3, #40	; 0x28
 80002ce:	21c8      	movs	r1, #200	; 0xc8
 80002d0:	48b4      	ldr	r0, [pc, #720]	; (80005a4 <WriteDataZone+0x334>)
 80002d2:	f001 fb3b 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80002d6:	2005      	movs	r0, #5
 80002d8:	f000 fec8 	bl	800106c <HAL_Delay>

	uint8_t writeData2[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x10, 0x00, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24,
 80002dc:	4bb3      	ldr	r3, [pc, #716]	; (80005ac <WriteDataZone+0x33c>)
 80002de:	f507 7402 	add.w	r4, r7, #520	; 0x208
 80002e2:	461d      	mov	r5, r3
 80002e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002f0:	e884 0003 	stmia.w	r4, {r0, r1}
   	      0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0xbc, 0xea};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData2, sizeof(writeData2), 1000);
 80002f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80002f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	2328      	movs	r3, #40	; 0x28
 8000300:	21c8      	movs	r1, #200	; 0xc8
 8000302:	48a8      	ldr	r0, [pc, #672]	; (80005a4 <WriteDataZone+0x334>)
 8000304:	f001 fb22 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000308:	2005      	movs	r0, #5
 800030a:	f000 feaf 	bl	800106c <HAL_Delay>

	uint8_t writeData3[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x18, 0x00, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x30, 0x31, 0x32, 0x33, 0x34,
 800030e:	4ba8      	ldr	r3, [pc, #672]	; (80005b0 <WriteDataZone+0x340>)
 8000310:	f507 74f0 	add.w	r4, r7, #480	; 0x1e0
 8000314:	461d      	mov	r5, r3
 8000316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000322:	e884 0003 	stmia.w	r4, {r0, r1}
 	        0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0xb5, 0xb7};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData3, sizeof(writeData3), 1000);
 8000326:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800032a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	2328      	movs	r3, #40	; 0x28
 8000332:	21c8      	movs	r1, #200	; 0xc8
 8000334:	489b      	ldr	r0, [pc, #620]	; (80005a4 <WriteDataZone+0x334>)
 8000336:	f001 fb09 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800033a:	2005      	movs	r0, #5
 800033c:	f000 fe96 	bl	800106c <HAL_Delay>

	uint8_t writeData4[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x20, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44,
 8000340:	4b9c      	ldr	r3, [pc, #624]	; (80005b4 <WriteDataZone+0x344>)
 8000342:	f507 74dc 	add.w	r4, r7, #440	; 0x1b8
 8000346:	461d      	mov	r5, r3
 8000348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000350:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000354:	e884 0003 	stmia.w	r4, {r0, r1}
	          0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x79, 0x73};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData4, sizeof(writeData4), 1000);
 8000358:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800035c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2328      	movs	r3, #40	; 0x28
 8000364:	21c8      	movs	r1, #200	; 0xc8
 8000366:	488f      	ldr	r0, [pc, #572]	; (80005a4 <WriteDataZone+0x334>)
 8000368:	f001 faf0 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800036c:	2005      	movs	r0, #5
 800036e:	f000 fe7d 	bl	800106c <HAL_Delay>

	uint8_t writeData5[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x28, 0x00, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54,
 8000372:	4b91      	ldr	r3, [pc, #580]	; (80005b8 <WriteDataZone+0x348>)
 8000374:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8000378:	461d      	mov	r5, r3
 800037a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800037c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000382:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000386:	e884 0003 	stmia.w	r4, {r0, r1}
	          0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x70, 0x2e};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData5, sizeof(writeData5), 1000);
 800038a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800038e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	2328      	movs	r3, #40	; 0x28
 8000396:	21c8      	movs	r1, #200	; 0xc8
 8000398:	4882      	ldr	r0, [pc, #520]	; (80005a4 <WriteDataZone+0x334>)
 800039a:	f001 fad7 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800039e:	2005      	movs	r0, #5
 80003a0:	f000 fe64 	bl	800106c <HAL_Delay>

	uint8_t writeData6[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x30, 0x00, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x60, 0x61, 0x62, 0x63, 0x64,
 80003a4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80003a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003ac:	4a83      	ldr	r2, [pc, #524]	; (80005bc <WriteDataZone+0x34c>)
 80003ae:	461c      	mov	r4, r3
 80003b0:	4615      	mov	r5, r2
 80003b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003be:	e884 0003 	stmia.w	r4, {r0, r1}
  	        0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0xff, 0x9d};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData6, sizeof(writeData6), 1000);
 80003c2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80003c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ca:	9300      	str	r3, [sp, #0]
 80003cc:	2328      	movs	r3, #40	; 0x28
 80003ce:	21c8      	movs	r1, #200	; 0xc8
 80003d0:	4874      	ldr	r0, [pc, #464]	; (80005a4 <WriteDataZone+0x334>)
 80003d2:	f001 fabb 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80003d6:	2005      	movs	r0, #5
 80003d8:	f000 fe48 	bl	800106c <HAL_Delay>

	uint8_t writeData7[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x38, 0x00, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x70, 0x71, 0x72, 0x73, 0x74,
 80003dc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80003e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80003e4:	4a76      	ldr	r2, [pc, #472]	; (80005c0 <WriteDataZone+0x350>)
 80003e6:	461c      	mov	r4, r3
 80003e8:	4615      	mov	r5, r2
 80003ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003f6:	e884 0003 	stmia.w	r4, {r0, r1}
	          0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0xf6, 0xc0};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData7, sizeof(writeData7), 1000);
 80003fa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80003fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2328      	movs	r3, #40	; 0x28
 8000406:	21c8      	movs	r1, #200	; 0xc8
 8000408:	4866      	ldr	r0, [pc, #408]	; (80005a4 <WriteDataZone+0x334>)
 800040a:	f001 fa9f 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800040e:	2005      	movs	r0, #5
 8000410:	f000 fe2c 	bl	800106c <HAL_Delay>

	uint8_t writeData8[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x40, 0x00, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x80, 0x81, 0x82, 0x83, 0x84,
 8000414:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000418:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800041c:	4a69      	ldr	r2, [pc, #420]	; (80005c4 <WriteDataZone+0x354>)
 800041e:	461c      	mov	r4, r3
 8000420:	4615      	mov	r5, r2
 8000422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800042e:	e884 0003 	stmia.w	r4, {r0, r1}
	 	          0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x99, 0xff};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData8, sizeof(writeData8), 1000);
 8000432:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2328      	movs	r3, #40	; 0x28
 800043e:	21c8      	movs	r1, #200	; 0xc8
 8000440:	4858      	ldr	r0, [pc, #352]	; (80005a4 <WriteDataZone+0x334>)
 8000442:	f001 fa83 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000446:	2005      	movs	r0, #5
 8000448:	f000 fe10 	bl	800106c <HAL_Delay>

	uint8_t writeData9[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x48, 0x00, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x90, 0x91, 0x92, 0x93, 0x94,
 800044c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000450:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000454:	4a5c      	ldr	r2, [pc, #368]	; (80005c8 <WriteDataZone+0x358>)
 8000456:	461c      	mov	r4, r3
 8000458:	4615      	mov	r5, r2
 800045a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800045c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800045e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000462:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000466:	e884 0003 	stmia.w	r4, {r0, r1}
            0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x90, 0xa2};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData9, sizeof(writeData9), 1000);
 800046a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800046e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2328      	movs	r3, #40	; 0x28
 8000476:	21c8      	movs	r1, #200	; 0xc8
 8000478:	484a      	ldr	r0, [pc, #296]	; (80005a4 <WriteDataZone+0x334>)
 800047a:	f001 fa67 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800047e:	2005      	movs	r0, #5
 8000480:	f000 fdf4 	bl	800106c <HAL_Delay>

	uint8_t writeData10[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x50, 0x00, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4,
 8000484:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000488:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800048c:	4a4f      	ldr	r2, [pc, #316]	; (80005cc <WriteDataZone+0x35c>)
 800048e:	461c      	mov	r4, r3
 8000490:	4615      	mov	r5, r2
 8000492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800049a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800049e:	e884 0003 	stmia.w	r4, {r0, r1}
	          0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0x1f, 0x11};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData10, sizeof(writeData10), 1000);
 80004a2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80004a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2328      	movs	r3, #40	; 0x28
 80004ae:	21c8      	movs	r1, #200	; 0xc8
 80004b0:	483c      	ldr	r0, [pc, #240]	; (80005a4 <WriteDataZone+0x334>)
 80004b2:	f001 fa4b 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80004b6:	2005      	movs	r0, #5
 80004b8:	f000 fdd8 	bl	800106c <HAL_Delay>

	uint8_t writeData11[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x58, 0x00, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4,
 80004bc:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80004c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80004c4:	4a42      	ldr	r2, [pc, #264]	; (80005d0 <WriteDataZone+0x360>)
 80004c6:	461c      	mov	r4, r3
 80004c8:	4615      	mov	r5, r2
 80004ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004d6:	e884 0003 	stmia.w	r4, {r0, r1}
	          0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0x16, 0x4c};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData11, sizeof(writeData11), 1000);
 80004da:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80004de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2328      	movs	r3, #40	; 0x28
 80004e6:	21c8      	movs	r1, #200	; 0xc8
 80004e8:	482e      	ldr	r0, [pc, #184]	; (80005a4 <WriteDataZone+0x334>)
 80004ea:	f001 fa2f 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80004ee:	2005      	movs	r0, #5
 80004f0:	f000 fdbc 	bl	800106c <HAL_Delay>

	uint8_t writeData12[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x60, 0x00, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4,
 80004f4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80004f8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80004fc:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <WriteDataZone+0x364>)
 80004fe:	461c      	mov	r4, r3
 8000500:	4615      	mov	r5, r2
 8000502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800050e:	e884 0003 	stmia.w	r4, {r0, r1}
	          0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xda, 0x88};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData12, sizeof(writeData12), 1000);
 8000512:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2328      	movs	r3, #40	; 0x28
 800051e:	21c8      	movs	r1, #200	; 0xc8
 8000520:	4820      	ldr	r0, [pc, #128]	; (80005a4 <WriteDataZone+0x334>)
 8000522:	f001 fa13 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000526:	2005      	movs	r0, #5
 8000528:	f000 fda0 	bl	800106c <HAL_Delay>

	uint8_t writeData13[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x68, 0x00, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4,
 800052c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000530:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8000534:	4a28      	ldr	r2, [pc, #160]	; (80005d8 <WriteDataZone+0x368>)
 8000536:	461c      	mov	r4, r3
 8000538:	4615      	mov	r5, r2
 800053a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800053c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000542:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000546:	e884 0003 	stmia.w	r4, {r0, r1}
			 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xd3, 0xd5 };
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData13, sizeof(writeData13), 1000);
 800054a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2328      	movs	r3, #40	; 0x28
 8000556:	21c8      	movs	r1, #200	; 0xc8
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <WriteDataZone+0x334>)
 800055a:	f001 f9f7 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800055e:	2005      	movs	r0, #5
 8000560:	f000 fd84 	bl	800106c <HAL_Delay>

	// Write command: {COMMAND, COUNT, OPCODE, Param1 + Param2_LSB + Param2_MSB + DADOS + CRC_LSB + CRC_MSB}
	uint8_t writeData14[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x70, 0x00, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4,
 8000564:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000568:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800056c:	4a1b      	ldr	r2, [pc, #108]	; (80005dc <WriteDataZone+0x36c>)
 800056e:	461c      	mov	r4, r3
 8000570:	4615      	mov	r5, r2
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800057e:	e884 0003 	stmia.w	r4, {r0, r1}
			 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9,  0x5c, 0x66};
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, writeData14, sizeof(writeData14), 1000);
 8000582:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2328      	movs	r3, #40	; 0x28
 800058e:	21c8      	movs	r1, #200	; 0xc8
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <WriteDataZone+0x334>)
 8000592:	f001 f9db 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000596:	2005      	movs	r0, #5
 8000598:	f000 fd68 	bl	800106c <HAL_Delay>
 800059c:	e020      	b.n	80005e0 <WriteDataZone+0x370>
 800059e:	bf00      	nop
 80005a0:	08003858 	.word	0x08003858
 80005a4:	20000028 	.word	0x20000028
 80005a8:	08003880 	.word	0x08003880
 80005ac:	080038a8 	.word	0x080038a8
 80005b0:	080038d0 	.word	0x080038d0
 80005b4:	080038f8 	.word	0x080038f8
 80005b8:	08003920 	.word	0x08003920
 80005bc:	08003948 	.word	0x08003948
 80005c0:	08003970 	.word	0x08003970
 80005c4:	08003998 	.word	0x08003998
 80005c8:	080039c0 	.word	0x080039c0
 80005cc:	080039e8 	.word	0x080039e8
 80005d0:	08003a10 	.word	0x08003a10
 80005d4:	08003a38 	.word	0x08003a38
 80005d8:	08003a60 	.word	0x08003a60
 80005dc:	08003a88 	.word	0x08003a88

	uint8_t writeData15[] = {COMMAND, SIZE_WRITE_DATA, COMMAND_WRITE, 0x82, 0x78, 0x00, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4,
 80005e0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80005e4:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <WriteDataZone+0x3b0>)
 80005ea:	461c      	mov	r4, r3
 80005ec:	4615      	mov	r5, r2
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005fa:	e884 0003 	stmia.w	r4, {r0, r1}
			 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0x55, 0x3b};
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeData15, sizeof(writeData15), 1000);
 80005fe:	463a      	mov	r2, r7
 8000600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2328      	movs	r3, #40	; 0x28
 8000608:	21c8      	movs	r1, #200	; 0xc8
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <WriteDataZone+0x3b4>)
 800060c:	f001 f99e 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000610:	2005      	movs	r0, #5
 8000612:	f000 fd2b 	bl	800106c <HAL_Delay>
}
 8000616:	bf00      	nop
 8000618:	f507 7720 	add.w	r7, r7, #640	; 0x280
 800061c:	46bd      	mov	sp, r7
 800061e:	bdb0      	pop	{r4, r5, r7, pc}
 8000620:	08003ab0 	.word	0x08003ab0
 8000624:	20000028 	.word	0x20000028

08000628 <WriteOTPZone>:

void WriteOTPZone(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b0b2      	sub	sp, #200	; 0xc8
 800062c:	af02      	add	r7, sp, #8

	// Write OTP command: {COMMAND, COUNT, OPCODE, ZONE, ADRESS, DADOS, CRC1, CRC2}
	uint8_t writeOTP0[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x00, 0x01, 0x02, 0x03,0x04, 0x05, 0x48};
 800062e:	4ab1      	ldr	r2, [pc, #708]	; (80008f4 <WriteOTPZone+0x2cc>)
 8000630:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000634:	ca07      	ldmia	r2, {r0, r1, r2}
 8000636:	c303      	stmia	r3!, {r0, r1}
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	3302      	adds	r3, #2
 800063c:	0c12      	lsrs	r2, r2, #16
 800063e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP0, sizeof(writeOTP0), 1000);
 8000640:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8000644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	230b      	movs	r3, #11
 800064c:	21c8      	movs	r1, #200	; 0xc8
 800064e:	48aa      	ldr	r0, [pc, #680]	; (80008f8 <WriteOTPZone+0x2d0>)
 8000650:	f001 f97c 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000654:	2005      	movs	r0, #5
 8000656:	f000 fd09 	bl	800106c <HAL_Delay>

	uint8_t writeOTP1[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x01, 0x01, 0x02, 0x03,0x04, 0x06, 0xf4};
 800065a:	4aa8      	ldr	r2, [pc, #672]	; (80008fc <WriteOTPZone+0x2d4>)
 800065c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000660:	ca07      	ldmia	r2, {r0, r1, r2}
 8000662:	c303      	stmia	r3!, {r0, r1}
 8000664:	801a      	strh	r2, [r3, #0]
 8000666:	3302      	adds	r3, #2
 8000668:	0c12      	lsrs	r2, r2, #16
 800066a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP1, sizeof(writeOTP1), 1000);
 800066c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	230b      	movs	r3, #11
 8000678:	21c8      	movs	r1, #200	; 0xc8
 800067a:	489f      	ldr	r0, [pc, #636]	; (80008f8 <WriteOTPZone+0x2d0>)
 800067c:	f001 f966 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000680:	2005      	movs	r0, #5
 8000682:	f000 fcf3 	bl	800106c <HAL_Delay>

	uint8_t writeOTP2[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x02, 0x01, 0x02, 0x03,0x04, 0x06, 0xd6};
 8000686:	4a9e      	ldr	r2, [pc, #632]	; (8000900 <WriteOTPZone+0x2d8>)
 8000688:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800068c:	ca07      	ldmia	r2, {r0, r1, r2}
 800068e:	c303      	stmia	r3!, {r0, r1}
 8000690:	801a      	strh	r2, [r3, #0]
 8000692:	3302      	adds	r3, #2
 8000694:	0c12      	lsrs	r2, r2, #16
 8000696:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP2, sizeof(writeOTP2), 1000);
 8000698:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	230b      	movs	r3, #11
 80006a4:	21c8      	movs	r1, #200	; 0xc8
 80006a6:	4894      	ldr	r0, [pc, #592]	; (80008f8 <WriteOTPZone+0x2d0>)
 80006a8:	f001 f950 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80006ac:	2005      	movs	r0, #5
 80006ae:	f000 fcdd 	bl	800106c <HAL_Delay>

	uint8_t writeOTP3[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x03, 0x01, 0x02, 0x03, 0x04, 0x05, 0x6a};
 80006b2:	4a94      	ldr	r2, [pc, #592]	; (8000904 <WriteOTPZone+0x2dc>)
 80006b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ba:	c303      	stmia	r3!, {r0, r1}
 80006bc:	801a      	strh	r2, [r3, #0]
 80006be:	3302      	adds	r3, #2
 80006c0:	0c12      	lsrs	r2, r2, #16
 80006c2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP3, sizeof(writeOTP3), 1000);
 80006c4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80006c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	230b      	movs	r3, #11
 80006d0:	21c8      	movs	r1, #200	; 0xc8
 80006d2:	4889      	ldr	r0, [pc, #548]	; (80008f8 <WriteOTPZone+0x2d0>)
 80006d4:	f001 f93a 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80006d8:	2005      	movs	r0, #5
 80006da:	f000 fcc7 	bl	800106c <HAL_Delay>

	uint8_t writeOTP4[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x04, 0x01, 0x02, 0x03, 0x04, 0x06, 0xc7};
 80006de:	4a8a      	ldr	r2, [pc, #552]	; (8000908 <WriteOTPZone+0x2e0>)
 80006e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80006e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e6:	c303      	stmia	r3!, {r0, r1}
 80006e8:	801a      	strh	r2, [r3, #0]
 80006ea:	3302      	adds	r3, #2
 80006ec:	0c12      	lsrs	r2, r2, #16
 80006ee:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP4, sizeof(writeOTP4), 1000);
 80006f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80006f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	230b      	movs	r3, #11
 80006fc:	21c8      	movs	r1, #200	; 0xc8
 80006fe:	487e      	ldr	r0, [pc, #504]	; (80008f8 <WriteOTPZone+0x2d0>)
 8000700:	f001 f924 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000704:	2005      	movs	r0, #5
 8000706:	f000 fcb1 	bl	800106c <HAL_Delay>

	uint8_t writeOTP5[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x05, 0x01, 0x02, 0x03, 0x04, 0x05, 0x7b};
 800070a:	4a80      	ldr	r2, [pc, #512]	; (800090c <WriteOTPZone+0x2e4>)
 800070c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000710:	ca07      	ldmia	r2, {r0, r1, r2}
 8000712:	c303      	stmia	r3!, {r0, r1}
 8000714:	801a      	strh	r2, [r3, #0]
 8000716:	3302      	adds	r3, #2
 8000718:	0c12      	lsrs	r2, r2, #16
 800071a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP5, sizeof(writeOTP5), 1000);
 800071c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	230b      	movs	r3, #11
 8000728:	21c8      	movs	r1, #200	; 0xc8
 800072a:	4873      	ldr	r0, [pc, #460]	; (80008f8 <WriteOTPZone+0x2d0>)
 800072c:	f001 f90e 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000730:	2005      	movs	r0, #5
 8000732:	f000 fc9b 	bl	800106c <HAL_Delay>

	uint8_t writeOTP6[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x59};
 8000736:	4a76      	ldr	r2, [pc, #472]	; (8000910 <WriteOTPZone+0x2e8>)
 8000738:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800073c:	ca07      	ldmia	r2, {r0, r1, r2}
 800073e:	c303      	stmia	r3!, {r0, r1}
 8000740:	801a      	strh	r2, [r3, #0]
 8000742:	3302      	adds	r3, #2
 8000744:	0c12      	lsrs	r2, r2, #16
 8000746:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP6, sizeof(writeOTP6), 1000);
 8000748:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	230b      	movs	r3, #11
 8000754:	21c8      	movs	r1, #200	; 0xc8
 8000756:	4868      	ldr	r0, [pc, #416]	; (80008f8 <WriteOTPZone+0x2d0>)
 8000758:	f001 f8f8 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800075c:	2005      	movs	r0, #5
 800075e:	f000 fc85 	bl	800106c <HAL_Delay>

	uint8_t writeOTP7[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x07, 0x01, 0x02, 0x03, 0x04, 0x06, 0xe5};
 8000762:	4a6c      	ldr	r2, [pc, #432]	; (8000914 <WriteOTPZone+0x2ec>)
 8000764:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000768:	ca07      	ldmia	r2, {r0, r1, r2}
 800076a:	c303      	stmia	r3!, {r0, r1}
 800076c:	801a      	strh	r2, [r3, #0]
 800076e:	3302      	adds	r3, #2
 8000770:	0c12      	lsrs	r2, r2, #16
 8000772:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP7, sizeof(writeOTP7), 1000);
 8000774:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	230b      	movs	r3, #11
 8000780:	21c8      	movs	r1, #200	; 0xc8
 8000782:	485d      	ldr	r0, [pc, #372]	; (80008f8 <WriteOTPZone+0x2d0>)
 8000784:	f001 f8e2 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000788:	2005      	movs	r0, #5
 800078a:	f000 fc6f 	bl	800106c <HAL_Delay>

	uint8_t writeOTP8[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x08, 0x01, 0x02, 0x03, 0x04, 0x86, 0xcf};
 800078e:	4a62      	ldr	r2, [pc, #392]	; (8000918 <WriteOTPZone+0x2f0>)
 8000790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000794:	ca07      	ldmia	r2, {r0, r1, r2}
 8000796:	c303      	stmia	r3!, {r0, r1}
 8000798:	801a      	strh	r2, [r3, #0]
 800079a:	3302      	adds	r3, #2
 800079c:	0c12      	lsrs	r2, r2, #16
 800079e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP8, sizeof(writeOTP8), 1000);
 80007a0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	230b      	movs	r3, #11
 80007ac:	21c8      	movs	r1, #200	; 0xc8
 80007ae:	4852      	ldr	r0, [pc, #328]	; (80008f8 <WriteOTPZone+0x2d0>)
 80007b0:	f001 f8cc 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80007b4:	2005      	movs	r0, #5
 80007b6:	f000 fc59 	bl	800106c <HAL_Delay>

	uint8_t writeOTP9[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x09, 0x01, 0x02, 0x03, 0x04, 0x85, 0x73};
 80007ba:	4a58      	ldr	r2, [pc, #352]	; (800091c <WriteOTPZone+0x2f4>)
 80007bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c2:	c303      	stmia	r3!, {r0, r1}
 80007c4:	801a      	strh	r2, [r3, #0]
 80007c6:	3302      	adds	r3, #2
 80007c8:	0c12      	lsrs	r2, r2, #16
 80007ca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP9, sizeof(writeOTP9), 1000);
 80007cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	230b      	movs	r3, #11
 80007d8:	21c8      	movs	r1, #200	; 0xc8
 80007da:	4847      	ldr	r0, [pc, #284]	; (80008f8 <WriteOTPZone+0x2d0>)
 80007dc:	f001 f8b6 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80007e0:	2005      	movs	r0, #5
 80007e2:	f000 fc43 	bl	800106c <HAL_Delay>

	uint8_t writeOTP10[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x0A, 0x01, 0x02, 0x03, 0x04, 0x85, 0x51};
 80007e6:	4a4e      	ldr	r2, [pc, #312]	; (8000920 <WriteOTPZone+0x2f8>)
 80007e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ee:	c303      	stmia	r3!, {r0, r1}
 80007f0:	801a      	strh	r2, [r3, #0]
 80007f2:	3302      	adds	r3, #2
 80007f4:	0c12      	lsrs	r2, r2, #16
 80007f6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP10, sizeof(writeOTP10), 1000);
 80007f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80007fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	230b      	movs	r3, #11
 8000804:	21c8      	movs	r1, #200	; 0xc8
 8000806:	483c      	ldr	r0, [pc, #240]	; (80008f8 <WriteOTPZone+0x2d0>)
 8000808:	f001 f8a0 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800080c:	2005      	movs	r0, #5
 800080e:	f000 fc2d 	bl	800106c <HAL_Delay>

	uint8_t writeOTP11[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x0B, 0x01, 0x02, 0x03, 0x04, 0x86, 0xed};
 8000812:	4a44      	ldr	r2, [pc, #272]	; (8000924 <WriteOTPZone+0x2fc>)
 8000814:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000818:	ca07      	ldmia	r2, {r0, r1, r2}
 800081a:	c303      	stmia	r3!, {r0, r1}
 800081c:	801a      	strh	r2, [r3, #0]
 800081e:	3302      	adds	r3, #2
 8000820:	0c12      	lsrs	r2, r2, #16
 8000822:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP11, sizeof(writeOTP11), 1000);
 8000824:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	230b      	movs	r3, #11
 8000830:	21c8      	movs	r1, #200	; 0xc8
 8000832:	4831      	ldr	r0, [pc, #196]	; (80008f8 <WriteOTPZone+0x2d0>)
 8000834:	f001 f88a 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000838:	2005      	movs	r0, #5
 800083a:	f000 fc17 	bl	800106c <HAL_Delay>

	uint8_t writeOTP12[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x0C, 0x01, 0x02, 0x03, 0x04, 0x85, 0x40};
 800083e:	4a3a      	ldr	r2, [pc, #232]	; (8000928 <WriteOTPZone+0x300>)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	ca07      	ldmia	r2, {r0, r1, r2}
 8000846:	c303      	stmia	r3!, {r0, r1}
 8000848:	801a      	strh	r2, [r3, #0]
 800084a:	3302      	adds	r3, #2
 800084c:	0c12      	lsrs	r2, r2, #16
 800084e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP12, sizeof(writeOTP12), 1000);
 8000850:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	230b      	movs	r3, #11
 800085c:	21c8      	movs	r1, #200	; 0xc8
 800085e:	4826      	ldr	r0, [pc, #152]	; (80008f8 <WriteOTPZone+0x2d0>)
 8000860:	f001 f874 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000864:	2005      	movs	r0, #5
 8000866:	f000 fc01 	bl	800106c <HAL_Delay>

	uint8_t writeOTP13[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x0D, 0x01, 0x02, 0x03, 0x04, 0x86, 0xfc};
 800086a:	4a30      	ldr	r2, [pc, #192]	; (800092c <WriteOTPZone+0x304>)
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	ca07      	ldmia	r2, {r0, r1, r2}
 8000872:	c303      	stmia	r3!, {r0, r1}
 8000874:	801a      	strh	r2, [r3, #0]
 8000876:	3302      	adds	r3, #2
 8000878:	0c12      	lsrs	r2, r2, #16
 800087a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP13, sizeof(writeOTP13), 1000);
 800087c:	f107 0218 	add.w	r2, r7, #24
 8000880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	230b      	movs	r3, #11
 8000888:	21c8      	movs	r1, #200	; 0xc8
 800088a:	481b      	ldr	r0, [pc, #108]	; (80008f8 <WriteOTPZone+0x2d0>)
 800088c:	f001 f85e 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000890:	2005      	movs	r0, #5
 8000892:	f000 fbeb 	bl	800106c <HAL_Delay>

	uint8_t writeOTP14[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x0E, 0x01, 0x02, 0x03, 0x04, 0x86, 0xde};
 8000896:	4a26      	ldr	r2, [pc, #152]	; (8000930 <WriteOTPZone+0x308>)
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	ca07      	ldmia	r2, {r0, r1, r2}
 800089e:	c303      	stmia	r3!, {r0, r1}
 80008a0:	801a      	strh	r2, [r3, #0]
 80008a2:	3302      	adds	r3, #2
 80008a4:	0c12      	lsrs	r2, r2, #16
 80008a6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP14, sizeof(writeOTP14), 1000);
 80008a8:	f107 020c 	add.w	r2, r7, #12
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	230b      	movs	r3, #11
 80008b4:	21c8      	movs	r1, #200	; 0xc8
 80008b6:	4810      	ldr	r0, [pc, #64]	; (80008f8 <WriteOTPZone+0x2d0>)
 80008b8:	f001 f848 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80008bc:	2005      	movs	r0, #5
 80008be:	f000 fbd5 	bl	800106c <HAL_Delay>

	uint8_t writeOTP15[] = {COMMAND, SIZE_WRITE_OTP, COMMAND_WRITE, 0x01, 0x0F, 0x01, 0x02, 0x03, 0x04, 0x85, 0x62};
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <WriteOTPZone+0x30c>)
 80008c4:	463b      	mov	r3, r7
 80008c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80008c8:	c303      	stmia	r3!, {r0, r1}
 80008ca:	801a      	strh	r2, [r3, #0]
 80008cc:	3302      	adds	r3, #2
 80008ce:	0c12      	lsrs	r2, r2, #16
 80008d0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, writeOTP15, sizeof(writeOTP15), 1000);
 80008d2:	463a      	mov	r2, r7
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	230b      	movs	r3, #11
 80008dc:	21c8      	movs	r1, #200	; 0xc8
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <WriteOTPZone+0x2d0>)
 80008e0:	f001 f834 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80008e4:	2005      	movs	r0, #5
 80008e6:	f000 fbc1 	bl	800106c <HAL_Delay>
}
 80008ea:	bf00      	nop
 80008ec:	37c0      	adds	r7, #192	; 0xc0
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	08003ad8 	.word	0x08003ad8
 80008f8:	20000028 	.word	0x20000028
 80008fc:	08003ae4 	.word	0x08003ae4
 8000900:	08003af0 	.word	0x08003af0
 8000904:	08003afc 	.word	0x08003afc
 8000908:	08003b08 	.word	0x08003b08
 800090c:	08003b14 	.word	0x08003b14
 8000910:	08003b20 	.word	0x08003b20
 8000914:	08003b2c 	.word	0x08003b2c
 8000918:	08003b38 	.word	0x08003b38
 800091c:	08003b44 	.word	0x08003b44
 8000920:	08003b50 	.word	0x08003b50
 8000924:	08003b5c 	.word	0x08003b5c
 8000928:	08003b68 	.word	0x08003b68
 800092c:	08003b74 	.word	0x08003b74
 8000930:	08003b80 	.word	0x08003b80
 8000934:	08003b8c 	.word	0x08003b8c

08000938 <BlockDataZone>:

void BlockDataZone(void){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af02      	add	r7, sp, #8
	// Lock command: {COMMAND, COUNT, OPCODE, ZONE, CRC_DATA_OTP_LSB,   CRC_DATA_OTP_MSB, CRC_LSB, CRC_MSB}
	//Data and OTP Zone: Seus conteúdos são concatenados nessa ordem para criar a entrada para o algoritmo CRC
	uint8_t blockConfig[] = { COMMAND, SIZE_BLOCK_CONFIG, COMMAND_LOCK, ZONE_DATA_LOCK, 0x04, 0x58, 0x66, 0xc7};
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <BlockDataZone+0x34>)
 8000940:	463b      	mov	r3, r7
 8000942:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000946:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, blockConfig, sizeof(blockConfig), 1000);
 800094a:	463a      	mov	r2, r7
 800094c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2308      	movs	r3, #8
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <BlockDataZone+0x38>)
 8000958:	f000 fff8 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800095c:	2005      	movs	r0, #5
 800095e:	f000 fb85 	bl	800106c <HAL_Delay>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	08003b98 	.word	0x08003b98
 8000970:	20000028 	.word	0x20000028

08000974 <ReadDataZone>:


void ReadDataZone(uint8_t *readData, uint16_t size, uint8_t *data) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af02      	add	r7, sp, #8
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	460b      	mov	r3, r1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, readData, 8, 1000); 		    // Send read command
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2308      	movs	r3, #8
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	21c8      	movs	r1, #200	; 0xc8
 800098e:	480b      	ldr	r0, [pc, #44]	; (80009bc <ReadDataZone+0x48>)
 8000990:	f000 ffdc 	bl	800194c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000994:	2005      	movs	r0, #5
 8000996:	f000 fb69 	bl	800106c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, data, size, 1000);
 800099a:	897b      	ldrh	r3, [r7, #10]
 800099c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a0:	9200      	str	r2, [sp, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	21c8      	movs	r1, #200	; 0xc8
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <ReadDataZone+0x48>)
 80009a8:	f001 f8ce 	bl	8001b48 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80009ac:	2005      	movs	r0, #5
 80009ae:	f000 fb5d 	bl	800106c <HAL_Delay>
}
 80009b2:	bf00      	nop
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000028 	.word	0x20000028

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0be      	sub	sp, #248	; 0xf8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 faef 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f8e9 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f000 f987 	bl	8000ce0 <MX_GPIO_Init>
  MX_USART1_Init();
 80009d2:	f000 f959 	bl	8000c88 <MX_USART1_Init>
  MX_I2C2_Init();
 80009d6:	f000 f929 	bl	8000c2c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  uint8_t readCommand0[8] = {0x03, 0x07, 0x02, 0x80, 0x00, 0x00, 0x09, 0xAD}; // read -> param1 = zone = 1000 0000
 80009da:	4a68      	ldr	r2, [pc, #416]	; (8000b7c <main+0x1bc>)
 80009dc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80009e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e4:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand1[8] = {0x03, 0x07, 0x02, 0x80, 0x08, 0x00, 0x0a, 0x4d}; // read -> param1 = zone = 1000 0000
 80009e8:	4a65      	ldr	r2, [pc, #404]	; (8000b80 <main+0x1c0>)
 80009ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80009ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand2[8] = {0x03, 0x07, 0x02, 0x00, 0x10, 0x00, 0x1d, 0x9d}; // read -> param1 = zone = 1000 0000
 80009f6:	4a63      	ldr	r2, [pc, #396]	; (8000b84 <main+0x1c4>)
 80009f8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80009fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a00:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand3[8] = {0x03, 0x07, 0x02, 0x00, 0x11, 0x00, 0x14, 0x1d};
 8000a04:	4a60      	ldr	r2, [pc, #384]	; (8000b88 <main+0x1c8>)
 8000a06:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000a0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a0e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand4[8] = {0x03, 0x07, 0x02, 0x00, 0x12, 0x00, 0x1b, 0x1d};
 8000a12:	4a5e      	ldr	r2, [pc, #376]	; (8000b8c <main+0x1cc>)
 8000a14:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand5[8] = {0x03, 0x07, 0x02, 0x00, 0x13, 0x00, 0x12, 0x9d};
 8000a20:	4a5b      	ldr	r2, [pc, #364]	; (8000b90 <main+0x1d0>)
 8000a22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000a26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a2a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand6[8] = {0x03, 0x07, 0x02, 0x00, 0x14, 0x00, 0x1e, 0xdd};
 8000a2e:	4a59      	ldr	r2, [pc, #356]	; (8000b94 <main+0x1d4>)
 8000a30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000a34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a38:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand7[8] = {0x03, 0x07, 0x02, 0x00, 0x15, 0x00, 0x17, 0x5d};
 8000a3c:	4a56      	ldr	r2, [pc, #344]	; (8000b98 <main+0x1d8>)
 8000a3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000a42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a46:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t readData0[8] = {0x03, 0x07, 0x02, 0x82, 0x70, 0x00, 0x09, 0x8c};
 8000a4a:	4a54      	ldr	r2, [pc, #336]	; (8000b9c <main+0x1dc>)
 8000a4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a54:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t receiv_MASTERKEY[35] = {0};
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000a5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a62:	221f      	movs	r2, #31
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 feae 	bl	80037c8 <memset>

  uint8_t read_byte[4];
  uint8_t receiv_ack[1] = {0};
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

  //uint8_t read_config[32] = {0};
  uint8_t read_config0[35] = {0};
 8000a72:	2300      	movs	r3, #0
 8000a74:	663b      	str	r3, [r7, #96]	; 0x60
 8000a76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a7a:	221f      	movs	r2, #31
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fea2 	bl	80037c8 <memset>
  uint8_t read_config1[35] = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a8c:	221f      	movs	r2, #31
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 fe99 	bl	80037c8 <memset>
  uint8_t read_config2[7] = {0};
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
 8000a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	801a      	strh	r2, [r3, #0]
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	709a      	strb	r2, [r3, #2]
  uint8_t read_config3[7] = {0};
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	460a      	mov	r2, r1
 8000ab4:	801a      	strh	r2, [r3, #0]
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	709a      	strb	r2, [r3, #2]
  uint8_t read_config4[7] = {0};
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
 8000abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	801a      	strh	r2, [r3, #0]
 8000ac8:	460a      	mov	r2, r1
 8000aca:	709a      	strb	r2, [r3, #2]
  uint8_t read_config5[7] = {0};
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	460a      	mov	r2, r1
 8000ad8:	801a      	strh	r2, [r3, #0]
 8000ada:	460a      	mov	r2, r1
 8000adc:	709a      	strb	r2, [r3, #2]
  uint8_t read_config6[7] = {0};
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	f107 0318 	add.w	r3, r7, #24
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	801a      	strh	r2, [r3, #0]
 8000aec:	460a      	mov	r2, r1
 8000aee:	709a      	strb	r2, [r3, #2]
  uint8_t read_config7[7] = {0};
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2100      	movs	r1, #0
 8000afa:	460a      	mov	r2, r1
 8000afc:	801a      	strh	r2, [r3, #0]
 8000afe:	460a      	mov	r2, r1
 8000b00:	709a      	strb	r2, [r3, #2]
  uint8_t read_config8[7] = {0};
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	801a      	strh	r2, [r3, #0]
 8000b10:	460a      	mov	r2, r1
 8000b12:	709a      	strb	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WakeUp(read_byte);
 8000b14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fb17 	bl	800014c <WakeUp>
	 // ReadConfig(readCommand4, 4, read_config4);
	 // ReadConfig(readCommand5, 4, read_config5);
	 //ReadConfig(readCommand6, 4, read_config6);
	 // ReadConfig(readCommand7, 4, read_config7);

	  BlockConfigZone(receiv_ack);
 8000b1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fb78 	bl	8000218 <BlockConfigZone>
	  WriteDataZone();
 8000b28:	f7ff fba2 	bl	8000270 <WriteDataZone>
	  WriteOTPZone();
 8000b2c:	f7ff fd7c 	bl	8000628 <WriteOTPZone>
	  BlockDataZone();
 8000b30:	f7ff ff02 	bl	8000938 <BlockDataZone>

	  ReadConfig(readCommand0, 35, read_config0);
 8000b34:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000b38:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000b3c:	2123      	movs	r1, #35	; 0x23
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fb44 	bl	80001cc <ReadConfig>
	  ReadConfig(readCommand1, 35, read_config1);
 8000b44:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000b48:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b4c:	2123      	movs	r1, #35	; 0x23
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb3c 	bl	80001cc <ReadConfig>
	  ReadConfig(readCommand7, 4, read_config7);
 8000b54:	f107 020c 	add.w	r2, r7, #12
 8000b58:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fb34 	bl	80001cc <ReadConfig>
	  ReadDataZone(readData0, 35, receiv_MASTERKEY);
 8000b64:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000b68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000b6c:	2123      	movs	r1, #35	; 0x23
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ff00 	bl	8000974 <ReadDataZone>

	  HAL_Delay(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 fa79 	bl	800106c <HAL_Delay>
	  WakeUp(read_byte);
 8000b7a:	e7cb      	b.n	8000b14 <main+0x154>
 8000b7c:	08003ba0 	.word	0x08003ba0
 8000b80:	08003ba8 	.word	0x08003ba8
 8000b84:	08003bb0 	.word	0x08003bb0
 8000b88:	08003bb8 	.word	0x08003bb8
 8000b8c:	08003bc0 	.word	0x08003bc0
 8000b90:	08003bc8 	.word	0x08003bc8
 8000b94:	08003bd0 	.word	0x08003bd0
 8000b98:	08003bd8 	.word	0x08003bd8
 8000b9c:	08003be0 	.word	0x08003be0

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	; 0x40
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	2228      	movs	r2, #40	; 0x28
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fe0a 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bde:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fd39 	bl	8002660 <HAL_RCC_OscConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bf4:	f000 f8ae 	bl	8000d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2102      	movs	r1, #2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 ffa6 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c1e:	f000 f899 	bl	8000d54 <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3740      	adds	r7, #64	; 0x40
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_I2C2_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_I2C2_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c6a:	f000 fd2b 	bl	80016c4 <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f86e 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000028 	.word	0x20000028
 8000c80:	40005800 	.word	0x40005800
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000c8e:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <MX_USART1_Init+0x54>)
 8000c90:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_USART1_Init+0x50>)
 8000cc6:	f002 f8e5 	bl	8002e94 <HAL_USART_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000cd0:	f000 f840 	bl	8000d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000007c 	.word	0x2000007c
 8000cdc:	40013800 	.word	0x40013800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <MX_GPIO_Init+0x70>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40021000 	.word	0x40021000

08000d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
}
 8000d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <HAL_MspInit+0x5c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_MspInit+0x60>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_MspInit+0x60>)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_I2C_MspInit+0x74>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d124      	bne.n	8000e2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_I2C_MspInit+0x78>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_I2C_MspInit+0x78>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_I2C_MspInit+0x78>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e02:	2312      	movs	r3, #18
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_I2C_MspInit+0x7c>)
 8000e12:	f000 fad3 	bl	80013bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_I2C_MspInit+0x78>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0x78>)
 8000e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e20:	61d3      	str	r3, [r2, #28]
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_I2C_MspInit+0x78>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40005800 	.word	0x40005800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0310 	add.w	r3, r7, #16
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <HAL_USART_MspInit+0x9c>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d139      	bne.n	8000ed8 <HAL_USART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_USART_MspInit+0xa0>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_USART_MspInit+0xa0>)
 8000e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_USART_MspInit+0xa0>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_USART_MspInit+0xa0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <HAL_USART_MspInit+0xa0>)
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_USART_MspInit+0xa0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_USART_MspInit+0xa4>)
 8000eaa:	f000 fa87 	bl	80013bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <HAL_USART_MspInit+0xa4>)
 8000ec4:	f000 fa7a 	bl	80013bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2025      	movs	r0, #37	; 0x25
 8000ece:	f000 f9c8 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ed2:	2025      	movs	r0, #37	; 0x25
 8000ed4:	f000 f9e1 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010800 	.word	0x40010800

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f32:	f000 f87f 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USART1_IRQHandler+0x10>)
 8000f42:	f001 ffe9 	bl	8002f18 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000007c 	.word	0x2000007c

08000f50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480c      	ldr	r0, [pc, #48]	; (8000f90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f5e:	490d      	ldr	r1, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f74:	4c0a      	ldr	r4, [pc, #40]	; (8000fa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f82:	f7ff ffe5 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f002 fbfb 	bl	8003780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8a:	f7ff fd19 	bl	80009c0 <main>
  bx lr
 8000f8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f98:	08003c18 	.word	0x08003c18
  ldr r2, =_sbss
 8000f9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fa0:	200000c4 	.word	0x200000c4

08000fa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC1_2_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x28>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x28>)
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f947 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	200f      	movs	r0, #15
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fecc 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f95f 	bl	80012b6 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f927 	bl	8001262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x1c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_IncTick+0x20>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_IncTick+0x20>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	20000008 	.word	0x20000008
 8001054:	200000c0 	.word	0x200000c0

08001058 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <HAL_GetTick+0x10>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	200000c0 	.word	0x200000c0

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff fff0 	bl	8001058 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffe0 	bl	8001058 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4906      	ldr	r1, [pc, #24]	; (800114c <__NVIC_EnableIRQ+0x34>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff90 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff2d 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff42 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ff90 	bl	80011a4 <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff5f 	bl	8001150 <__NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff35 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffa2 	bl	8001208 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d005      	beq.n	80012f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2204      	movs	r2, #4
 80012ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e051      	b.n	8001396 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 020e 	bic.w	r2, r2, #14
 8001300:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a22      	ldr	r2, [pc, #136]	; (80013a0 <HAL_DMA_Abort_IT+0xd0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d029      	beq.n	8001370 <HAL_DMA_Abort_IT+0xa0>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_DMA_Abort_IT+0xd4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d022      	beq.n	800136c <HAL_DMA_Abort_IT+0x9c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_DMA_Abort_IT+0xd8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d01a      	beq.n	8001366 <HAL_DMA_Abort_IT+0x96>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <HAL_DMA_Abort_IT+0xdc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d012      	beq.n	8001360 <HAL_DMA_Abort_IT+0x90>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <HAL_DMA_Abort_IT+0xe0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d00a      	beq.n	800135a <HAL_DMA_Abort_IT+0x8a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_DMA_Abort_IT+0xe4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d102      	bne.n	8001354 <HAL_DMA_Abort_IT+0x84>
 800134e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001352:	e00e      	b.n	8001372 <HAL_DMA_Abort_IT+0xa2>
 8001354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001358:	e00b      	b.n	8001372 <HAL_DMA_Abort_IT+0xa2>
 800135a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135e:	e008      	b.n	8001372 <HAL_DMA_Abort_IT+0xa2>
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	e005      	b.n	8001372 <HAL_DMA_Abort_IT+0xa2>
 8001366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136a:	e002      	b.n	8001372 <HAL_DMA_Abort_IT+0xa2>
 800136c:	2310      	movs	r3, #16
 800136e:	e000      	b.n	8001372 <HAL_DMA_Abort_IT+0xa2>
 8001370:	2301      	movs	r3, #1
 8001372:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <HAL_DMA_Abort_IT+0xe8>)
 8001374:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
    } 
  }
  return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40020008 	.word	0x40020008
 80013a4:	4002001c 	.word	0x4002001c
 80013a8:	40020030 	.word	0x40020030
 80013ac:	40020044 	.word	0x40020044
 80013b0:	40020058 	.word	0x40020058
 80013b4:	4002006c 	.word	0x4002006c
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e169      	b.n	80016a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d0:	2201      	movs	r2, #1
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8158 	bne.w	800169e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a9a      	ldr	r2, [pc, #616]	; (800165c <HAL_GPIO_Init+0x2a0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d05e      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_GPIO_Init+0x2a0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d875      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 80013fe:	4a98      	ldr	r2, [pc, #608]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d058      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001404:	4a96      	ldr	r2, [pc, #600]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d86f      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 800140a:	4a96      	ldr	r2, [pc, #600]	; (8001664 <HAL_GPIO_Init+0x2a8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d052      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001410:	4a94      	ldr	r2, [pc, #592]	; (8001664 <HAL_GPIO_Init+0x2a8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d869      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001416:	4a94      	ldr	r2, [pc, #592]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d04c      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 800141c:	4a92      	ldr	r2, [pc, #584]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d863      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001422:	4a92      	ldr	r2, [pc, #584]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d046      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
 8001428:	4a90      	ldr	r2, [pc, #576]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d85d      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 800142e:	2b12      	cmp	r3, #18
 8001430:	d82a      	bhi.n	8001488 <HAL_GPIO_Init+0xcc>
 8001432:	2b12      	cmp	r3, #18
 8001434:	d859      	bhi.n	80014ea <HAL_GPIO_Init+0x12e>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <HAL_GPIO_Init+0x80>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	080014b7 	.word	0x080014b7
 8001440:	08001491 	.word	0x08001491
 8001444:	080014a3 	.word	0x080014a3
 8001448:	080014e5 	.word	0x080014e5
 800144c:	080014eb 	.word	0x080014eb
 8001450:	080014eb 	.word	0x080014eb
 8001454:	080014eb 	.word	0x080014eb
 8001458:	080014eb 	.word	0x080014eb
 800145c:	080014eb 	.word	0x080014eb
 8001460:	080014eb 	.word	0x080014eb
 8001464:	080014eb 	.word	0x080014eb
 8001468:	080014eb 	.word	0x080014eb
 800146c:	080014eb 	.word	0x080014eb
 8001470:	080014eb 	.word	0x080014eb
 8001474:	080014eb 	.word	0x080014eb
 8001478:	080014eb 	.word	0x080014eb
 800147c:	080014eb 	.word	0x080014eb
 8001480:	08001499 	.word	0x08001499
 8001484:	080014ad 	.word	0x080014ad
 8001488:	4a79      	ldr	r2, [pc, #484]	; (8001670 <HAL_GPIO_Init+0x2b4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800148e:	e02c      	b.n	80014ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e029      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	3304      	adds	r3, #4
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	e024      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	3308      	adds	r3, #8
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e01f      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	330c      	adds	r3, #12
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e01a      	b.n	80014ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014be:	2304      	movs	r3, #4
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e013      	b.n	80014ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d105      	bne.n	80014d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014cc:	2308      	movs	r3, #8
 80014ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69fa      	ldr	r2, [r7, #28]
 80014d4:	611a      	str	r2, [r3, #16]
          break;
 80014d6:	e009      	b.n	80014ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d8:	2308      	movs	r3, #8
 80014da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	615a      	str	r2, [r3, #20]
          break;
 80014e2:	e003      	b.n	80014ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x130>
          break;
 80014ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2bff      	cmp	r3, #255	; 0xff
 80014f0:	d801      	bhi.n	80014f6 <HAL_GPIO_Init+0x13a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	e001      	b.n	80014fa <HAL_GPIO_Init+0x13e>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d802      	bhi.n	8001508 <HAL_GPIO_Init+0x14c>
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	e002      	b.n	800150e <HAL_GPIO_Init+0x152>
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	3b08      	subs	r3, #8
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	210f      	movs	r1, #15
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	fa01 f303 	lsl.w	r3, r1, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	401a      	ands	r2, r3
 8001520:	6a39      	ldr	r1, [r7, #32]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	431a      	orrs	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80b1 	beq.w	800169e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x2b8>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_GPIO_Init+0x2b8>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b4a      	ldr	r3, [pc, #296]	; (8001674 <HAL_GPIO_Init+0x2b8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001554:	4a48      	ldr	r2, [pc, #288]	; (8001678 <HAL_GPIO_Init+0x2bc>)
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a40      	ldr	r2, [pc, #256]	; (800167c <HAL_GPIO_Init+0x2c0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d013      	beq.n	80015a8 <HAL_GPIO_Init+0x1ec>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3f      	ldr	r2, [pc, #252]	; (8001680 <HAL_GPIO_Init+0x2c4>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d00d      	beq.n	80015a4 <HAL_GPIO_Init+0x1e8>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3e      	ldr	r2, [pc, #248]	; (8001684 <HAL_GPIO_Init+0x2c8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d007      	beq.n	80015a0 <HAL_GPIO_Init+0x1e4>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a3d      	ldr	r2, [pc, #244]	; (8001688 <HAL_GPIO_Init+0x2cc>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_GPIO_Init+0x1e0>
 8001598:	2303      	movs	r3, #3
 800159a:	e006      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 800159c:	2304      	movs	r3, #4
 800159e:	e004      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e002      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <HAL_GPIO_Init+0x1ee>
 80015a8:	2300      	movs	r3, #0
 80015aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ac:	f002 0203 	and.w	r2, r2, #3
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	4093      	lsls	r3, r2
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015ba:	492f      	ldr	r1, [pc, #188]	; (8001678 <HAL_GPIO_Init+0x2bc>)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_GPIO_Init+0x2d0>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	492c      	ldr	r1, [pc, #176]	; (800168c <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <HAL_GPIO_Init+0x2d0>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4928      	ldr	r1, [pc, #160]	; (800168c <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <HAL_GPIO_Init+0x2d0>)
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4922      	ldr	r1, [pc, #136]	; (800168c <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_GPIO_Init+0x2d0>)
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	43db      	mvns	r3, r3
 8001612:	491e      	ldr	r1, [pc, #120]	; (800168c <HAL_GPIO_Init+0x2d0>)
 8001614:	4013      	ands	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d006      	beq.n	8001632 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_GPIO_Init+0x2d0>)
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	4918      	ldr	r1, [pc, #96]	; (800168c <HAL_GPIO_Init+0x2d0>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	608b      	str	r3, [r1, #8]
 8001630:	e006      	b.n	8001640 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_GPIO_Init+0x2d0>)
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	43db      	mvns	r3, r3
 800163a:	4914      	ldr	r1, [pc, #80]	; (800168c <HAL_GPIO_Init+0x2d0>)
 800163c:	4013      	ands	r3, r2
 800163e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d021      	beq.n	8001690 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_GPIO_Init+0x2d0>)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	490e      	ldr	r1, [pc, #56]	; (800168c <HAL_GPIO_Init+0x2d0>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	60cb      	str	r3, [r1, #12]
 8001658:	e021      	b.n	800169e <HAL_GPIO_Init+0x2e2>
 800165a:	bf00      	nop
 800165c:	10320000 	.word	0x10320000
 8001660:	10310000 	.word	0x10310000
 8001664:	10220000 	.word	0x10220000
 8001668:	10210000 	.word	0x10210000
 800166c:	10120000 	.word	0x10120000
 8001670:	10110000 	.word	0x10110000
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	40010800 	.word	0x40010800
 8001680:	40010c00 	.word	0x40010c00
 8001684:	40011000 	.word	0x40011000
 8001688:	40011400 	.word	0x40011400
 800168c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_GPIO_Init+0x304>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	43db      	mvns	r3, r3
 8001698:	4909      	ldr	r1, [pc, #36]	; (80016c0 <HAL_GPIO_Init+0x304>)
 800169a:	4013      	ands	r3, r2
 800169c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f47f ae8e 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	372c      	adds	r7, #44	; 0x2c
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e12b      	b.n	800192e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fb6a 	bl	8000dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001728:	f001 fb6e 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 800172c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a81      	ldr	r2, [pc, #516]	; (8001938 <HAL_I2C_Init+0x274>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d807      	bhi.n	8001748 <HAL_I2C_Init+0x84>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a80      	ldr	r2, [pc, #512]	; (800193c <HAL_I2C_Init+0x278>)
 800173c:	4293      	cmp	r3, r2
 800173e:	bf94      	ite	ls
 8001740:	2301      	movls	r3, #1
 8001742:	2300      	movhi	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	e006      	b.n	8001756 <HAL_I2C_Init+0x92>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a7d      	ldr	r2, [pc, #500]	; (8001940 <HAL_I2C_Init+0x27c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	bf94      	ite	ls
 8001750:	2301      	movls	r3, #1
 8001752:	2300      	movhi	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0e7      	b.n	800192e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4a78      	ldr	r2, [pc, #480]	; (8001944 <HAL_I2C_Init+0x280>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0c9b      	lsrs	r3, r3, #18
 8001768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4a6a      	ldr	r2, [pc, #424]	; (8001938 <HAL_I2C_Init+0x274>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d802      	bhi.n	8001798 <HAL_I2C_Init+0xd4>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	3301      	adds	r3, #1
 8001796:	e009      	b.n	80017ac <HAL_I2C_Init+0xe8>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	4a69      	ldr	r2, [pc, #420]	; (8001948 <HAL_I2C_Init+0x284>)
 80017a4:	fba2 2303 	umull	r2, r3, r2, r3
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	3301      	adds	r3, #1
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	495c      	ldr	r1, [pc, #368]	; (8001938 <HAL_I2C_Init+0x274>)
 80017c8:	428b      	cmp	r3, r1
 80017ca:	d819      	bhi.n	8001800 <HAL_I2C_Init+0x13c>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e59      	subs	r1, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017da:	1c59      	adds	r1, r3, #1
 80017dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017e0:	400b      	ands	r3, r1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00a      	beq.n	80017fc <HAL_I2C_Init+0x138>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1e59      	subs	r1, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fa:	e051      	b.n	80018a0 <HAL_I2C_Init+0x1dc>
 80017fc:	2304      	movs	r3, #4
 80017fe:	e04f      	b.n	80018a0 <HAL_I2C_Init+0x1dc>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d111      	bne.n	800182c <HAL_I2C_Init+0x168>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1e58      	subs	r0, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	e012      	b.n	8001852 <HAL_I2C_Init+0x18e>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e58      	subs	r0, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	0099      	lsls	r1, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Init+0x196>
 8001856:	2301      	movs	r3, #1
 8001858:	e022      	b.n	80018a0 <HAL_I2C_Init+0x1dc>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10e      	bne.n	8001880 <HAL_I2C_Init+0x1bc>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1e58      	subs	r0, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6859      	ldr	r1, [r3, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	440b      	add	r3, r1
 8001870:	fbb0 f3f3 	udiv	r3, r0, r3
 8001874:	3301      	adds	r3, #1
 8001876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187e:	e00f      	b.n	80018a0 <HAL_I2C_Init+0x1dc>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1e58      	subs	r0, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	0099      	lsls	r1, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	fbb0 f3f3 	udiv	r3, r0, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	6809      	ldr	r1, [r1, #0]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6911      	ldr	r1, [r2, #16]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68d2      	ldr	r2, [r2, #12]
 80018da:	4311      	orrs	r1, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	000186a0 	.word	0x000186a0
 800193c:	001e847f 	.word	0x001e847f
 8001940:	003d08ff 	.word	0x003d08ff
 8001944:	431bde83 	.word	0x431bde83
 8001948:	10624dd3 	.word	0x10624dd3

0800194c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	461a      	mov	r2, r3
 8001958:	460b      	mov	r3, r1
 800195a:	817b      	strh	r3, [r7, #10]
 800195c:	4613      	mov	r3, r2
 800195e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fb7a 	bl	8001058 <HAL_GetTick>
 8001964:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b20      	cmp	r3, #32
 8001970:	f040 80e0 	bne.w	8001b34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2319      	movs	r3, #25
 800197a:	2201      	movs	r2, #1
 800197c:	4970      	ldr	r1, [pc, #448]	; (8001b40 <HAL_I2C_Master_Transmit+0x1f4>)
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fc92 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800198a:	2302      	movs	r3, #2
 800198c:	e0d3      	b.n	8001b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_I2C_Master_Transmit+0x50>
 8001998:	2302      	movs	r3, #2
 800199a:	e0cc      	b.n	8001b36 <HAL_I2C_Master_Transmit+0x1ea>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d007      	beq.n	80019c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2221      	movs	r2, #33	; 0x21
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2210      	movs	r2, #16
 80019de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	893a      	ldrh	r2, [r7, #8]
 80019f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a50      	ldr	r2, [pc, #320]	; (8001b44 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a04:	8979      	ldrh	r1, [r7, #10]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	6a3a      	ldr	r2, [r7, #32]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fafc 	bl	8002008 <I2C_MasterRequestWrite>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e08d      	b.n	8001b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a30:	e066      	b.n	8001b00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	6a39      	ldr	r1, [r7, #32]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fd0c 	bl	8002454 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00d      	beq.n	8001a5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d107      	bne.n	8001a5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06b      	b.n	8001b36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d11b      	bne.n	8001ad4 <HAL_I2C_Master_Transmit+0x188>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d017      	beq.n	8001ad4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	781a      	ldrb	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	6a39      	ldr	r1, [r7, #32]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 fcfc 	bl	80024d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00d      	beq.n	8001b00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d107      	bne.n	8001afc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001afa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e01a      	b.n	8001b36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d194      	bne.n	8001a32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	00100002 	.word	0x00100002
 8001b44:	ffff0000 	.word	0xffff0000

08001b48 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08c      	sub	sp, #48	; 0x30
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	817b      	strh	r3, [r7, #10]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff fa7a 	bl	8001058 <HAL_GetTick>
 8001b64:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	f040 823f 	bne.w	8001ff2 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2319      	movs	r3, #25
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	497f      	ldr	r1, [pc, #508]	; (8001d7c <HAL_I2C_Master_Receive+0x234>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fb92 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e232      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_I2C_Master_Receive+0x54>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e22b      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d007      	beq.n	8001bc2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2222      	movs	r2, #34	; 0x22
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	893a      	ldrh	r2, [r7, #8]
 8001bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4a5f      	ldr	r2, [pc, #380]	; (8001d80 <HAL_I2C_Master_Receive+0x238>)
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c04:	8979      	ldrh	r1, [r7, #10]
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fa7e 	bl	800210c <I2C_MasterRequestRead>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1ec      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d113      	bne.n	8001c4a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	e1c0      	b.n	8001fcc <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d11e      	bne.n	8001c90 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c62:	b672      	cpsid	i
}
 8001c64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c8c:	b662      	cpsie	i
}
 8001c8e:	e035      	b.n	8001cfc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d11e      	bne.n	8001cd6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd2:	b662      	cpsie	i
}
 8001cd4:	e012      	b.n	8001cfc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001cfc:	e166      	b.n	8001fcc <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	f200 811f 	bhi.w	8001f46 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d123      	bne.n	8001d58 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fc1f 	bl	8002558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e167      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d56:	e139      	b.n	8001fcc <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d152      	bne.n	8001e06 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	2200      	movs	r2, #0
 8001d68:	4906      	ldr	r1, [pc, #24]	; (8001d84 <HAL_I2C_Master_Receive+0x23c>)
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fa9c 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e13c      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
 8001d7a:	bf00      	nop
 8001d7c:	00100002 	.word	0x00100002
 8001d80:	ffff0000 	.word	0xffff0000
 8001d84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dce:	b662      	cpsie	i
}
 8001dd0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dee:	3b01      	subs	r3, #1
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e04:	e0e2      	b.n	8001fcc <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	497b      	ldr	r1, [pc, #492]	; (8001ffc <HAL_I2C_Master_Receive+0x4b4>)
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 fa49 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0e9      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e66:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_I2C_Master_Receive+0x4b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	08db      	lsrs	r3, r3, #3
 8001e6c:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_I2C_Master_Receive+0x4bc>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0a1a      	lsrs	r2, r3, #8
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	00da      	lsls	r2, r3, #3
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d118      	bne.n	8001ebe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001eae:	b662      	cpsie	i
}
 8001eb0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e09a      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d1d9      	bne.n	8001e80 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f0e:	b662      	cpsie	i
}
 8001f10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f44:	e042      	b.n	8001fcc <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fb04 	bl	8002558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e04c      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d118      	bne.n	8001fcc <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f47f ae94 	bne.w	8001cfe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
  }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	00010004 	.word	0x00010004
 8002000:	20000000 	.word	0x20000000
 8002004:	14f8b589 	.word	0x14f8b589

08002008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af02      	add	r7, sp, #8
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	460b      	mov	r3, r1
 8002016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d006      	beq.n	8002032 <I2C_MasterRequestWrite+0x2a>
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d003      	beq.n	8002032 <I2C_MasterRequestWrite+0x2a>
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002030:	d108      	bne.n	8002044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e00b      	b.n	800205c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	2b12      	cmp	r3, #18
 800204a:	d107      	bne.n	800205c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f91d 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002082:	d103      	bne.n	800208c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e035      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002098:	d108      	bne.n	80020ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e01b      	b.n	80020e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	11db      	asrs	r3, r3, #7
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f003 0306 	and.w	r3, r3, #6
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f063 030f 	orn	r3, r3, #15
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <I2C_MasterRequestWrite+0xfc>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f943 	bl	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e010      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020da:	897b      	ldrh	r3, [r7, #10]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <I2C_MasterRequestWrite+0x100>)
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f933 	bl	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	00010008 	.word	0x00010008
 8002108:	00010002 	.word	0x00010002

0800210c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	460b      	mov	r3, r1
 800211a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002130:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d006      	beq.n	8002146 <I2C_MasterRequestRead+0x3a>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d003      	beq.n	8002146 <I2C_MasterRequestRead+0x3a>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002144:	d108      	bne.n	8002158 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e00b      	b.n	8002170 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	2b11      	cmp	r3, #17
 800215e:	d107      	bne.n	8002170 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f893 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002196:	d103      	bne.n	80021a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800219e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e079      	b.n	8002298 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ac:	d108      	bne.n	80021c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021ae:	897b      	ldrh	r3, [r7, #10]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	e05f      	b.n	8002280 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021c0:	897b      	ldrh	r3, [r7, #10]
 80021c2:	11db      	asrs	r3, r3, #7
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	f003 0306 	and.w	r3, r3, #6
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f063 030f 	orn	r3, r3, #15
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4930      	ldr	r1, [pc, #192]	; (80022a0 <I2C_MasterRequestRead+0x194>)
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f8b9 	bl	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e054      	b.n	8002298 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021ee:	897b      	ldrh	r3, [r7, #10]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4929      	ldr	r1, [pc, #164]	; (80022a4 <I2C_MasterRequestRead+0x198>)
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f000 f8a9 	bl	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e044      	b.n	8002298 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002232:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f831 	bl	80022a8 <I2C_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225a:	d103      	bne.n	8002264 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e017      	b.n	8002298 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002268:	897b      	ldrh	r3, [r7, #10]
 800226a:	11db      	asrs	r3, r3, #7
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 0306 	and.w	r3, r3, #6
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f063 030e 	orn	r3, r3, #14
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <I2C_MasterRequestRead+0x198>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f865 	bl	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	00010008 	.word	0x00010008
 80022a4:	00010002 	.word	0x00010002

080022a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b8:	e025      	b.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d021      	beq.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7fe fec9 	bl	8001058 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d116      	bne.n	8002306 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e023      	b.n	800234e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d10d      	bne.n	800232c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4013      	ands	r3, r2
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	bf0c      	ite	eq
 8002322:	2301      	moveq	r3, #1
 8002324:	2300      	movne	r3, #0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	e00c      	b.n	8002346 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	429a      	cmp	r2, r3
 800234a:	d0b6      	beq.n	80022ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002364:	e051      	b.n	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002374:	d123      	bne.n	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002384:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800238e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f043 0204 	orr.w	r2, r3, #4
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e046      	b.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d021      	beq.n	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7fe fe47 	bl	8001058 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d116      	bne.n	800240a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0220 	orr.w	r2, r3, #32
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e020      	b.n	800244c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d10c      	bne.n	800242e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4013      	ands	r3, r2
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	e00b      	b.n	8002446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	43da      	mvns	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4013      	ands	r3, r2
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d18d      	bne.n	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002460:	e02d      	b.n	80024be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f8ce 	bl	8002604 <I2C_IsAcknowledgeFailed>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e02d      	b.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d021      	beq.n	80024be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247a:	f7fe fded 	bl	8001058 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	429a      	cmp	r2, r3
 8002488:	d302      	bcc.n	8002490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d116      	bne.n	80024be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f043 0220 	orr.w	r2, r3, #32
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e007      	b.n	80024ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d1ca      	bne.n	8002462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024e2:	e02d      	b.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f88d 	bl	8002604 <I2C_IsAcknowledgeFailed>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e02d      	b.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d021      	beq.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fc:	f7fe fdac 	bl	8001058 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	429a      	cmp	r2, r3
 800250a:	d302      	bcc.n	8002512 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d116      	bne.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d1ca      	bne.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002564:	e042      	b.n	80025ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b10      	cmp	r3, #16
 8002572:	d119      	bne.n	80025a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0210 	mvn.w	r2, #16
 800257c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e029      	b.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a8:	f7fe fd56 	bl	8001058 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d302      	bcc.n	80025be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d116      	bne.n	80025ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e007      	b.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d1b5      	bne.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	d11b      	bne.n	8002654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f043 0204 	orr.w	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e272      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8087 	beq.w	800278e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002680:	4b92      	ldr	r3, [pc, #584]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b04      	cmp	r3, #4
 800268a:	d00c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800268c:	4b8f      	ldr	r3, [pc, #572]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d112      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
 8002698:	4b8c      	ldr	r3, [pc, #560]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	4b89      	ldr	r3, [pc, #548]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d06c      	beq.n	800278c <HAL_RCC_OscConfig+0x12c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d168      	bne.n	800278c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e24c      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x76>
 80026c8:	4b80      	ldr	r3, [pc, #512]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a7f      	ldr	r2, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e02e      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7a      	ldr	r2, [pc, #488]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b78      	ldr	r3, [pc, #480]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a77      	ldr	r2, [pc, #476]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0xbc>
 8002702:	4b72      	ldr	r3, [pc, #456]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a71      	ldr	r2, [pc, #452]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 800271c:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6a      	ldr	r2, [pc, #424]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b68      	ldr	r3, [pc, #416]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a67      	ldr	r2, [pc, #412]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe fc8c 	bl	8001058 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe fc88 	bl	8001058 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e200      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xe4>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe fc78 	bl	8001058 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe fc74 	bl	8001058 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1ec      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x10c>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279a:	4b4c      	ldr	r3, [pc, #304]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a6:	4b49      	ldr	r3, [pc, #292]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1c0      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4939      	ldr	r1, [pc, #228]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCC_OscConfig+0x270>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe fc2d 	bl	8001058 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fc29 	bl	8001058 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4927      	ldr	r1, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x270>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe fc0c 	bl	8001058 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe fc08 	bl	8001058 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e180      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03a      	beq.n	80028e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_RCC_OscConfig+0x274>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe fbec 	bl	8001058 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe fbe8 	bl	8001058 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e160      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f000 fad8 	bl	8002e58 <RCC_Delay>
 80028a8:	e01c      	b.n	80028e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_RCC_OscConfig+0x274>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fbd2 	bl	8001058 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe fbce 	bl	8001058 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d908      	bls.n	80028d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e146      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	42420000 	.word	0x42420000
 80028d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b92      	ldr	r3, [pc, #584]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e9      	bne.n	80028b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a6 	beq.w	8002a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a87      	ldr	r2, [pc, #540]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b85      	ldr	r3, [pc, #532]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b82      	ldr	r3, [pc, #520]	; (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b7f      	ldr	r3, [pc, #508]	; (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7e      	ldr	r2, [pc, #504]	; (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe fb8f 	bl	8001058 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe fb8b 	bl	8001058 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e103      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x312>
 8002964:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a6e      	ldr	r2, [pc, #440]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e02d      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x334>
 800297a:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a69      	ldr	r2, [pc, #420]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a66      	ldr	r2, [pc, #408]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e01c      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x356>
 800299c:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a60      	ldr	r2, [pc, #384]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	4b5e      	ldr	r3, [pc, #376]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 80029b6:	4b5b      	ldr	r3, [pc, #364]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	4b58      	ldr	r3, [pc, #352]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fb3f 	bl	8001058 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fb3b 	bl	8001058 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0b1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ee      	beq.n	80029de <HAL_RCC_OscConfig+0x37e>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe fb29 	bl	8001058 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fb25 	bl	8001058 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e09b      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ee      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8087 	beq.w	8002b56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d061      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d146      	bne.n	8002aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe faf9 	bl	8001058 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe faf5 	bl	8001058 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e06d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4921      	ldr	r1, [pc, #132]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a19      	ldr	r1, [r3, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	491b      	ldr	r1, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fac9 	bl	8001058 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fac5 	bl	8001058 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e03d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x46a>
 8002ae8:	e035      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fab2 	bl	8001058 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe faae 	bl	8001058 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e026      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x498>
 8002b16:	e01e      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e019      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x500>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d0      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b67      	ldr	r3, [pc, #412]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4965      	ldr	r1, [pc, #404]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e073      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4936      	ldr	r1, [pc, #216]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fa00 	bl	8001058 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe f9fc 	bl	8001058 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e053      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d210      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4922      	ldr	r1, [pc, #136]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1cc>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe f95e 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08003bf8 	.word	0x08003bf8
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b490      	push	{r4, r7}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002d40:	1d3c      	adds	r4, r7, #4
 8002d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d48:	f240 2301 	movw	r3, #513	; 0x201
 8002d4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d002      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x40>
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d003      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x46>
 8002d76:	e02b      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d78:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d7a:	623b      	str	r3, [r7, #32]
      break;
 8002d7c:	e02b      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	0c9b      	lsrs	r3, r3, #18
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3328      	adds	r3, #40	; 0x28
 8002d88:	443b      	add	r3, r7
 8002d8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	0c5b      	lsrs	r3, r3, #17
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	3328      	adds	r3, #40	; 0x28
 8002da6:	443b      	add	r3, r7
 8002da8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002dac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002db2:	fb03 f202 	mul.w	r2, r3, r2
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	e004      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	623b      	str	r3, [r7, #32]
      break;
 8002dce:	e002      	b.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dd2:	623b      	str	r3, [r7, #32]
      break;
 8002dd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3728      	adds	r7, #40	; 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc90      	pop	{r4, r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	08003be8 	.word	0x08003be8
 8002de8:	40021000 	.word	0x40021000
 8002dec:	007a1200 	.word	0x007a1200
 8002df0:	003d0900 	.word	0x003d0900

08002df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b02      	ldr	r3, [pc, #8]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e0c:	f7ff fff2 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08003c08 	.word	0x08003c08

08002e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e34:	f7ff ffde 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	0adb      	lsrs	r3, r3, #11
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	4903      	ldr	r1, [pc, #12]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e46:	5ccb      	ldrb	r3, [r1, r3]
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08003c08 	.word	0x08003c08

08002e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <RCC_Delay+0x34>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <RCC_Delay+0x38>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0a5b      	lsrs	r3, r3, #9
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e74:	bf00      	nop
  }
  while (Delay --);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	60fa      	str	r2, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <RCC_Delay+0x1c>
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e033      	b.n	8002f0e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd ffc2 	bl	8000e44 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fb61 	bl	8003590 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002edc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eec:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002efc:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d117      	bne.n	8002f7e <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_USART_IRQHandler+0x66>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b22      	cmp	r3, #34	; 0x22
 8002f6c:	d103      	bne.n	8002f76 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f9b4 	bl	80032dc <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8002f74:	e0e9      	b.n	800314a <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa36 	bl	80033e8 <USART_TransmitReceive_IT>
      return;
 8002f7c:	e0e5      	b.n	800314a <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80bb 	beq.w	80030fc <HAL_USART_IRQHandler+0x1e4>
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_USART_IRQHandler+0x84>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80b0 	beq.w	80030fc <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_USART_IRQHandler+0xa4>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f043 0201 	orr.w	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_USART_IRQHandler+0xc4>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f043 0202 	orr.w	r2, r3, #2
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_USART_IRQHandler+0xe4>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00f      	beq.n	8003026 <HAL_USART_IRQHandler+0x10e>
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <HAL_USART_IRQHandler+0x102>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d005      	beq.n	8003026 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f043 0208 	orr.w	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 808c 	beq.w	8003148 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d011      	beq.n	800305e <HAL_USART_IRQHandler+0x146>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b22      	cmp	r3, #34	; 0x22
 800304e:	d103      	bne.n	8003058 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f943 	bl	80032dc <USART_Receive_IT>
 8003056:	e002      	b.n	800305e <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f9c5 	bl	80033e8 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <HAL_USART_IRQHandler+0x16e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d031      	beq.n	80030ea <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f888 	bl	800319c <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d023      	beq.n	80030e2 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a8:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d013      	beq.n	80030da <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	4a26      	ldr	r2, [pc, #152]	; (8003150 <HAL_USART_IRQHandler+0x238>)
 80030b8:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f906 	bl	80012d0 <HAL_DMA_Abort_IT>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d016      	beq.n	80030f8 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d4:	4610      	mov	r0, r2
 80030d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	e00e      	b.n	80030f8 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f855 	bl	800318a <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	e00a      	b.n	80030f8 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f851 	bl	800318a <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	e006      	b.n	80030f8 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f84d 	bl	800318a <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030f6:	e027      	b.n	8003148 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	bf00      	nop
    return;
 80030fa:	e025      	b.n	8003148 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <HAL_USART_IRQHandler+0x214>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b12      	cmp	r3, #18
 800311a:	d103      	bne.n	8003124 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f86e 	bl	80031fe <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8003122:	e012      	b.n	800314a <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f95f 	bl	80033e8 <USART_TransmitReceive_IT>
    return;
 800312a:	e00e      	b.n	800314a <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_USART_IRQHandler+0x232>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f8ab 	bl	800329c <USART_EndTransmit_IT>
    return;
 8003146:	e000      	b.n	800314a <HAL_USART_IRQHandler+0x232>
    return;
 8003148:	bf00      	nop
  }
}
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	080031d7 	.word	0x080031d7

08003154 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ffca 	bl	800318a <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b12      	cmp	r3, #18
 8003210:	d13e      	bne.n	8003290 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321a:	d114      	bne.n	8003246 <USART_Transmit_IT+0x48>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d110      	bne.n	8003246 <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003238:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
 8003244:	e008      	b.n	8003258 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6251      	str	r1, [r2, #36]	; 0x24
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29b      	uxth	r3, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4619      	mov	r1, r3
 8003266:	8551      	strh	r1, [r2, #42]	; 0x2a
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800327a:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800328a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003290:	2302      	movs	r3, #2
  }
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b2:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff41 	bl	8003154 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b22      	cmp	r3, #34	; 0x22
 80032ee:	d176      	bne.n	80033de <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	d117      	bne.n	800332a <USART_Receive_IT+0x4e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d113      	bne.n	800332a <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b29b      	uxth	r3, r3
 8003314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003318:	b29a      	uxth	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	1c9a      	adds	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c
 8003328:	e026      	b.n	8003378 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d007      	beq.n	800334e <USART_Receive_IT+0x72>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <USART_Receive_IT+0x80>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e008      	b.n	800336e <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d120      	bne.n	80033d2 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68da      	ldr	r2, [r3, #12]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0220 	bic.w	r2, r2, #32
 800339e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ae:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fecc 	bl	8003166 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e006      	b.n	80033e0 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	22ff      	movs	r2, #255	; 0xff
 80033d8:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b32      	cmp	r3, #50	; 0x32
 80033fa:	f040 80c4 	bne.w	8003586 <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d03f      	beq.n	8003488 <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b80      	cmp	r3, #128	; 0x80
 8003414:	d138      	bne.n	8003488 <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	d116      	bne.n	800344e <USART_TransmitReceive_IT+0x66>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d112      	bne.n	800344e <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003440:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c9a      	adds	r2, r3, #2
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
 800344c:	e008      	b.n	8003460 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c59      	adds	r1, r3, #1
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6251      	str	r1, [r2, #36]	; 0x24
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003486:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d051      	beq.n	8003536 <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b20      	cmp	r3, #32
 800349e:	d14a      	bne.n	8003536 <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d117      	bne.n	80034da <USART_TransmitReceive_IT+0xf2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d113      	bne.n	80034da <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	1c9a      	adds	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80034d8:	e026      	b.n	8003528 <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d007      	beq.n	80034fe <USART_TransmitReceive_IT+0x116>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <USART_TransmitReceive_IT+0x124>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	e008      	b.n	800351e <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d120      	bne.n	8003582 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0220 	bic.w	r2, r2, #32
 800354e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800355e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff fdfd 	bl	8003178 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e002      	b.n	8003588 <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003586:	2302      	movs	r3, #2
  }
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003598:	2300      	movs	r3, #0
 800359a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 020c 	bic.w	r2, r2, #12
 80035aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80035c4:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035da:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035f2:	f023 030c 	bic.w	r3, r3, #12
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003624:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a53      	ldr	r2, [pc, #332]	; (8003778 <USART_SetConfig+0x1e8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d14f      	bne.n	80036d0 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003630:	f7ff fbfe 	bl	8002e30 <HAL_RCC_GetPCLK2Freq>
 8003634:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	009a      	lsls	r2, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	4a4b      	ldr	r2, [pc, #300]	; (800377c <USART_SetConfig+0x1ec>)
 800364e:	fba2 2303 	umull	r2, r3, r2, r3
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	0119      	lsls	r1, r3, #4
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009a      	lsls	r2, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	fbb2 f2f3 	udiv	r2, r2, r3
 800366c:	4b43      	ldr	r3, [pc, #268]	; (800377c <USART_SetConfig+0x1ec>)
 800366e:	fba3 0302 	umull	r0, r3, r3, r2
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	2064      	movs	r0, #100	; 0x64
 8003676:	fb00 f303 	mul.w	r3, r0, r3
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	3332      	adds	r3, #50	; 0x32
 8003680:	4a3e      	ldr	r2, [pc, #248]	; (800377c <USART_SetConfig+0x1ec>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 800368e:	4419      	add	r1, r3
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	009a      	lsls	r2, r3, #2
 800369a:	441a      	add	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a6:	4b35      	ldr	r3, [pc, #212]	; (800377c <USART_SetConfig+0x1ec>)
 80036a8:	fba3 0302 	umull	r0, r3, r3, r2
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	2064      	movs	r0, #100	; 0x64
 80036b0:	fb00 f303 	mul.w	r3, r0, r3
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	3332      	adds	r3, #50	; 0x32
 80036ba:	4a30      	ldr	r2, [pc, #192]	; (800377c <USART_SetConfig+0x1ec>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	f003 020f 	and.w	r2, r3, #15
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	440a      	add	r2, r1
 80036cc:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 80036ce:	e04e      	b.n	800376e <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 80036d0:	f7ff fb9a 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80036d4:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009a      	lsls	r2, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <USART_SetConfig+0x1ec>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	0119      	lsls	r1, r3, #4
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009a      	lsls	r2, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	fbb2 f2f3 	udiv	r2, r2, r3
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <USART_SetConfig+0x1ec>)
 800370e:	fba3 0302 	umull	r0, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2064      	movs	r0, #100	; 0x64
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	3332      	adds	r3, #50	; 0x32
 8003720:	4a16      	ldr	r2, [pc, #88]	; (800377c <USART_SetConfig+0x1ec>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 800372e:	4419      	add	r1, r3
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009a      	lsls	r2, r3, #2
 800373a:	441a      	add	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	fbb2 f2f3 	udiv	r2, r2, r3
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <USART_SetConfig+0x1ec>)
 8003748:	fba3 0302 	umull	r0, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2064      	movs	r0, #100	; 0x64
 8003750:	fb00 f303 	mul.w	r3, r0, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <USART_SetConfig+0x1ec>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	440a      	add	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40013800 	.word	0x40013800
 800377c:	51eb851f 	.word	0x51eb851f

08003780 <__libc_init_array>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	2600      	movs	r6, #0
 8003784:	4d0c      	ldr	r5, [pc, #48]	; (80037b8 <__libc_init_array+0x38>)
 8003786:	4c0d      	ldr	r4, [pc, #52]	; (80037bc <__libc_init_array+0x3c>)
 8003788:	1b64      	subs	r4, r4, r5
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	42a6      	cmp	r6, r4
 800378e:	d109      	bne.n	80037a4 <__libc_init_array+0x24>
 8003790:	f000 f822 	bl	80037d8 <_init>
 8003794:	2600      	movs	r6, #0
 8003796:	4d0a      	ldr	r5, [pc, #40]	; (80037c0 <__libc_init_array+0x40>)
 8003798:	4c0a      	ldr	r4, [pc, #40]	; (80037c4 <__libc_init_array+0x44>)
 800379a:	1b64      	subs	r4, r4, r5
 800379c:	10a4      	asrs	r4, r4, #2
 800379e:	42a6      	cmp	r6, r4
 80037a0:	d105      	bne.n	80037ae <__libc_init_array+0x2e>
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a8:	4798      	blx	r3
 80037aa:	3601      	adds	r6, #1
 80037ac:	e7ee      	b.n	800378c <__libc_init_array+0xc>
 80037ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b2:	4798      	blx	r3
 80037b4:	3601      	adds	r6, #1
 80037b6:	e7f2      	b.n	800379e <__libc_init_array+0x1e>
 80037b8:	08003c10 	.word	0x08003c10
 80037bc:	08003c10 	.word	0x08003c10
 80037c0:	08003c10 	.word	0x08003c10
 80037c4:	08003c14 	.word	0x08003c14

080037c8 <memset>:
 80037c8:	4603      	mov	r3, r0
 80037ca:	4402      	add	r2, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <_init>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr

080037e4 <_fini>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr
