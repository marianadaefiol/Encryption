
Encrypt_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003958  08003958  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003958  08003958  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003958  08003958  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  0800396c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800396c  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009320  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001921  00000000  00000000  00029355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002b5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166e3  00000000  00000000  0002be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af94  00000000  00000000  0004252b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000808c3  00000000  00000000  0004d4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdd82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a0  00000000  00000000  000cddd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800359c 	.word	0x0800359c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800359c 	.word	0x0800359c

0800014c <atCRC>:
// CRC https://www.scadacore.com/tools/programming-calculators/online-checksum-calculator/
// Zone encoding table 8-5


void atCRC(uint8_t *data, uint8_t size)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
    uint8_t counter;
    uint16_t crc_register = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	82bb      	strh	r3, [r7, #20]
    uint16_t polynom = 0x8005;
 800015c:	f248 0305 	movw	r3, #32773	; 0x8005
 8000160:	823b      	strh	r3, [r7, #16]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 1; counter < (size - 2); counter++)
 8000162:	2301      	movs	r3, #1
 8000164:	75fb      	strb	r3, [r7, #23]
 8000166:	e027      	b.n	80001b8 <atCRC+0x6c>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 8000168:	2301      	movs	r3, #1
 800016a:	74fb      	strb	r3, [r7, #19]
 800016c:	e01e      	b.n	80001ac <atCRC+0x60>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 800016e:	7dfb      	ldrb	r3, [r7, #23]
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	781a      	ldrb	r2, [r3, #0]
 8000176:	7cfb      	ldrb	r3, [r7, #19]
 8000178:	4013      	ands	r3, r2
 800017a:	b2db      	uxtb	r3, r3
 800017c:	2b00      	cmp	r3, #0
 800017e:	bf14      	ite	ne
 8000180:	2301      	movne	r3, #1
 8000182:	2300      	moveq	r3, #0
 8000184:	b2db      	uxtb	r3, r3
 8000186:	73fb      	strb	r3, [r7, #15]
            crc_bit = crc_register >> 15;
 8000188:	8abb      	ldrh	r3, [r7, #20]
 800018a:	0bdb      	lsrs	r3, r3, #15
 800018c:	b29b      	uxth	r3, r3
 800018e:	73bb      	strb	r3, [r7, #14]
            crc_register <<= 1;
 8000190:	8abb      	ldrh	r3, [r7, #20]
 8000192:	005b      	lsls	r3, r3, #1
 8000194:	82bb      	strh	r3, [r7, #20]
            if (data_bit != crc_bit)
 8000196:	7bfa      	ldrb	r2, [r7, #15]
 8000198:	7bbb      	ldrb	r3, [r7, #14]
 800019a:	429a      	cmp	r2, r3
 800019c:	d003      	beq.n	80001a6 <atCRC+0x5a>
            {
                crc_register ^= polynom;
 800019e:	8aba      	ldrh	r2, [r7, #20]
 80001a0:	8a3b      	ldrh	r3, [r7, #16]
 80001a2:	4053      	eors	r3, r2
 80001a4:	82bb      	strh	r3, [r7, #20]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80001a6:	7cfb      	ldrb	r3, [r7, #19]
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	74fb      	strb	r3, [r7, #19]
 80001ac:	7cfb      	ldrb	r3, [r7, #19]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d1dd      	bne.n	800016e <atCRC+0x22>
    for (counter = 1; counter < (size - 2); counter++)
 80001b2:	7dfb      	ldrb	r3, [r7, #23]
 80001b4:	3301      	adds	r3, #1
 80001b6:	75fb      	strb	r3, [r7, #23]
 80001b8:	7dfa      	ldrb	r2, [r7, #23]
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	3b02      	subs	r3, #2
 80001be:	429a      	cmp	r2, r3
 80001c0:	dbd2      	blt.n	8000168 <atCRC+0x1c>
            }
        }
    }
    data[size - 2] = (uint8_t)(crc_register & 0x00FF);
 80001c2:	78fb      	ldrb	r3, [r7, #3]
 80001c4:	3b02      	subs	r3, #2
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	8aba      	ldrh	r2, [r7, #20]
 80001cc:	b2d2      	uxtb	r2, r2
 80001ce:	701a      	strb	r2, [r3, #0]
    data[size - 1] = (uint8_t)(crc_register >> 8);
 80001d0:	8abb      	ldrh	r3, [r7, #20]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b299      	uxth	r1, r3
 80001d6:	78fb      	ldrb	r3, [r7, #3]
 80001d8:	3b01      	subs	r3, #1
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	b2ca      	uxtb	r2, r1
 80001e0:	701a      	strb	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	371c      	adds	r7, #28
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <WakeUp>:


void WakeUp(uint8_t *receiv){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af02      	add	r7, sp, #8
 80001f2:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Receive(&hi2c2, 0xFE, &data, sizeof(data), 1000);
 80001f8:	f107 020f 	add.w	r2, r7, #15
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	21fe      	movs	r1, #254	; 0xfe
 8000206:	4818      	ldr	r0, [pc, #96]	; (8000268 <WakeUp+0x7c>)
 8000208:	f001 fb80 	bl	800190c <HAL_I2C_Master_Receive>
	HAL_Delay(5); // 2.5 ms para acordar; 45 ms para entrar em sleep
 800020c:	2005      	movs	r0, #5
 800020e:	f000 fe0f 	bl	8000e30 <HAL_Delay>
	// first read: 0 byte read - should receive an ACK

	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, &data, 1, 1000);
 8000212:	f107 020f 	add.w	r2, r7, #15
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	21c8      	movs	r1, #200	; 0xc8
 8000220:	4811      	ldr	r0, [pc, #68]	; (8000268 <WakeUp+0x7c>)
 8000222:	f001 fb73 	bl	800190c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000226:	2005      	movs	r0, #5
 8000228:	f000 fe02 	bl	8000e30 <HAL_Delay>

	// Read 88bytes
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, &data, sizeof(data), 1000);		// Send 1 byte
 800022c:	f107 020f 	add.w	r2, r7, #15
 8000230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2301      	movs	r3, #1
 8000238:	21c8      	movs	r1, #200	; 0xc8
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <WakeUp+0x7c>)
 800023c:	f001 fa68 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000240:	2005      	movs	r0, #5
 8000242:	f000 fdf5 	bl	8000e30 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, 4, 1000); 		    	// Receiv: 0x04, 0x11, 0x33, 0x43.
 8000246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2304      	movs	r3, #4
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	21c8      	movs	r1, #200	; 0xc8
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <WakeUp+0x7c>)
 8000254:	f001 fb5a 	bl	800190c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000258:	2005      	movs	r0, #5
 800025a:	f000 fde9 	bl	8000e30 <HAL_Delay>
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028

0800026c <ReadConfig>:


void ReadConfig(uint8_t *data, uint16_t size, uint8_t *receiv) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af02      	add	r7, sp, #8
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	460b      	mov	r3, r1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, data, 8, 1000); 		    // Send read command
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2308      	movs	r3, #8
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	21c8      	movs	r1, #200	; 0xc8
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <ReadConfig+0x48>)
 8000288:	f001 fa42 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800028c:	2005      	movs	r0, #5
 800028e:	f000 fdcf 	bl	8000e30 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000); 	        // Receive: data packet size, 0x01 0x23..., CRC_LSB, CRC_MSB
 8000292:	897b      	ldrh	r3, [r7, #10]
 8000294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000298:	9200      	str	r2, [sp, #0]
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	21c8      	movs	r1, #200	; 0xc8
 800029e:	4805      	ldr	r0, [pc, #20]	; (80002b4 <ReadConfig+0x48>)
 80002a0:	f001 fb34 	bl	800190c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80002a4:	2005      	movs	r0, #5
 80002a6:	f000 fdc3 	bl	8000e30 <HAL_Delay>
}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000028 	.word	0x20000028

080002b8 <WriteConfigZone>:


void WriteConfigZone(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b09a      	sub	sp, #104	; 0x68
 80002bc:	af02      	add	r7, sp, #8

	// WritePwd1 + ReadPwd1
	// comando para configuração da zona de configuração do slot: 0x00 e 0x01
	uint8_t configSlot0_1[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x05, 0x00, 0xE9, 0x60, 0xE8, 0x70,  0x68, 0x11};
 80002be:	4a50      	ldr	r2, [pc, #320]	; (8000400 <WriteConfigZone+0x148>)
 80002c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot0_1, sizeof(configSlot0_1), 1000);
 80002ca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80002ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	230c      	movs	r3, #12
 80002d6:	21c8      	movs	r1, #200	; 0xc8
 80002d8:	484a      	ldr	r0, [pc, #296]	; (8000404 <WriteConfigZone+0x14c>)
 80002da:	f001 fa19 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80002de:	200a      	movs	r0, #10
 80002e0:	f000 fda6 	bl	8000e30 <HAL_Delay>

	// DATA0 + DATA1
	// comando para configuração da zona de configuração do slot: 0x02 e 0x03
	uint8_t configSlot2_3[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x06, 0x00,  0xE1, 0x40, 0xA1, 0x80, 0x00, 0x00};
 80002e4:	4a48      	ldr	r2, [pc, #288]	; (8000408 <WriteConfigZone+0x150>)
 80002e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	atCRC(configSlot2_3,sizeof(configSlot2_3));
 80002f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002f4:	210c      	movs	r1, #12
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff28 	bl	800014c <atCRC>
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot2_3, sizeof(configSlot2_3), 1000);
 80002fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	230c      	movs	r3, #12
 8000308:	21c8      	movs	r1, #200	; 0xc8
 800030a:	483e      	ldr	r0, [pc, #248]	; (8000404 <WriteConfigZone+0x14c>)
 800030c:	f001 fa00 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000310:	200a      	movs	r0, #10
 8000312:	f000 fd8d 	bl	8000e30 <HAL_Delay>

	// PASSWORD1 + SECRET1
	// comando para configuração da zona de configuração do slot: 0x04 e 0x05
	uint8_t configSlot4_5[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x07, 0x00, 0xC1, 0x75, 0xA0, 0x60,  0x3a, 0x65};
 8000316:	4a3d      	ldr	r2, [pc, #244]	; (800040c <WriteConfigZone+0x154>)
 8000318:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800031c:	ca07      	ldmia	r2, {r0, r1, r2}
 800031e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot4_5, sizeof(configSlot4_5), 1000);
 8000322:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	230c      	movs	r3, #12
 800032e:	21c8      	movs	r1, #200	; 0xc8
 8000330:	4834      	ldr	r0, [pc, #208]	; (8000404 <WriteConfigZone+0x14c>)
 8000332:	f001 f9ed 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000336:	200a      	movs	r0, #10
 8000338:	f000 fd7a 	bl	8000e30 <HAL_Delay>

	// PASSWORD2 + SECRET2
	// comando para configuração da zona de configuração do slot: 0x06 e 0x07
	uint8_t configSlot6_7[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x08, 0x00,  0xD1, 0x47, 0xB0, 0x40, 0x2d, 0xf0};
 800033c:	4a34      	ldr	r2, [pc, #208]	; (8000410 <WriteConfigZone+0x158>)
 800033e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000342:	ca07      	ldmia	r2, {r0, r1, r2}
 8000344:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot6_7, sizeof(configSlot6_7), 1000);
 8000348:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800034c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	230c      	movs	r3, #12
 8000354:	21c8      	movs	r1, #200	; 0xc8
 8000356:	482b      	ldr	r0, [pc, #172]	; (8000404 <WriteConfigZone+0x14c>)
 8000358:	f001 f9da 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800035c:	200a      	movs	r0, #10
 800035e:	f000 fd67 	bl	8000e30 <HAL_Delay>

	// ReadPwd2 + WritePwd2
	// comando para configuração da zona de configuração do slot: 0x08 e 0x09
	uint8_t configSlot8_9[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x09, 0x00, 0xCE,  0x49, 0xCE,  0x49, 0x2b, 0x91};
 8000362:	4a2c      	ldr	r2, [pc, #176]	; (8000414 <WriteConfigZone+0x15c>)
 8000364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000368:	ca07      	ldmia	r2, {r0, r1, r2}
 800036a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot8_9, sizeof(configSlot8_9), 1000);
 800036e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	230c      	movs	r3, #12
 800037a:	21c8      	movs	r1, #200	; 0xc8
 800037c:	4821      	ldr	r0, [pc, #132]	; (8000404 <WriteConfigZone+0x14c>)
 800037e:	f001 f9c7 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000382:	200a      	movs	r0, #10
 8000384:	f000 fd54 	bl	8000e30 <HAL_Delay>

	// DATA[2] + DATA[3]
	// comando para configuração da zona de configuração do slot: 0x10 e 0x11
	uint8_t configSlot10_11[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x0A, 0x00, 0xC8, 0x49, 0x88, 0x89, 0xfa, 0xdd};
 8000388:	4a23      	ldr	r2, [pc, #140]	; (8000418 <WriteConfigZone+0x160>)
 800038a:	f107 0318 	add.w	r3, r7, #24
 800038e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot10_11, sizeof(configSlot10_11), 1000);
 8000394:	f107 0218 	add.w	r2, r7, #24
 8000398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	230c      	movs	r3, #12
 80003a0:	21c8      	movs	r1, #200	; 0xc8
 80003a2:	4818      	ldr	r0, [pc, #96]	; (8000404 <WriteConfigZone+0x14c>)
 80003a4:	f001 f9b4 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80003a8:	200a      	movs	r0, #10
 80003aa:	f000 fd41 	bl	8000e30 <HAL_Delay>

	// PASSWORD[3] + SECRET[3]
	// comando para configuração da zona de configuração do slot: 0x12 e 0x13
	uint8_t configSlot12_13[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x0B, 0x00, 0xD8, 0x4D,  0x90, 0x49, 0xfb, 0xaf };
 80003ae:	4a1b      	ldr	r2, [pc, #108]	; (800041c <WriteConfigZone+0x164>)
 80003b0:	f107 030c 	add.w	r3, r7, #12
 80003b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80003b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot12_13, sizeof(configSlot12_13), 1000);
 80003ba:	f107 020c 	add.w	r2, r7, #12
 80003be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	230c      	movs	r3, #12
 80003c6:	21c8      	movs	r1, #200	; 0xc8
 80003c8:	480e      	ldr	r0, [pc, #56]	; (8000404 <WriteConfigZone+0x14c>)
 80003ca:	f001 f9a1 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80003ce:	200a      	movs	r0, #10
 80003d0:	f000 fd2e 	bl	8000e30 <HAL_Delay>

	// MASTERKEY + DATA[4]
	// comando para configuração da zona de configuração do slot: 0x14 e 0x15
	// commanda, count, opcode, zone
	uint8_t configSlot14_15[] = {COMMAND, SIZE_WRITE_CONFIG, COMMAND_WRITE, 0x00, 0x0C, 0x00, 0x0E, 0x0E, 0x88, 0x49, 0x2F, 0xEC };
 80003d4:	4a12      	ldr	r2, [pc, #72]	; (8000420 <WriteConfigZone+0x168>)
 80003d6:	463b      	mov	r3, r7
 80003d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80003da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot14_15, sizeof(configSlot14_15), 1000);
 80003de:	463a      	mov	r2, r7
 80003e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e4:	9300      	str	r3, [sp, #0]
 80003e6:	230c      	movs	r3, #12
 80003e8:	21c8      	movs	r1, #200	; 0xc8
 80003ea:	4806      	ldr	r0, [pc, #24]	; (8000404 <WriteConfigZone+0x14c>)
 80003ec:	f001 f990 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80003f0:	200a      	movs	r0, #10
 80003f2:	f000 fd1d 	bl	8000e30 <HAL_Delay>
}
 80003f6:	bf00      	nop
 80003f8:	3760      	adds	r7, #96	; 0x60
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	080035b4 	.word	0x080035b4
 8000404:	20000028 	.word	0x20000028
 8000408:	080035c0 	.word	0x080035c0
 800040c:	080035cc 	.word	0x080035cc
 8000410:	080035d8 	.word	0x080035d8
 8000414:	080035e4 	.word	0x080035e4
 8000418:	080035f0 	.word	0x080035f0
 800041c:	080035fc 	.word	0x080035fc
 8000420:	08003608 	.word	0x08003608

08000424 <BlockConfigZone>:


void BlockConfigZone(uint8_t *receiv){
 8000424:	b580      	push	{r7, lr}
 8000426:	b0ae      	sub	sp, #184	; 0xb8
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]

	uint8_t DataReceive_35[35] = {0x00};
 800042c:	2300      	movs	r3, #0
 800042e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000432:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000436:	221f      	movs	r2, #31
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f003 f8a6 	bl	800358c <memset>
	uint8_t DataReceive_7[7] = {0x00};
 8000440:	2300      	movs	r3, #0
 8000442:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000444:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000448:	2100      	movs	r1, #0
 800044a:	460a      	mov	r2, r1
 800044c:	801a      	strh	r2, [r3, #0]
 800044e:	460a      	mov	r2, r1
 8000450:	709a      	strb	r2, [r3, #2]
	uint8_t DataZoneConfig[91] = {0x00};
 8000452:	2300      	movs	r3, #0
 8000454:	623b      	str	r3, [r7, #32]
 8000456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045a:	2257      	movs	r2, #87	; 0x57
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f003 f894 	bl	800358c <memset>
	uint8_t adress = 0x08;
 8000464:	2308      	movs	r3, #8
 8000466:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	uint8_t size = 35;
 800046a:	2323      	movs	r3, #35	; 0x23
 800046c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint8_t slot;

	if (size == 35){
 8000470:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000474:	2b23      	cmp	r3, #35	; 0x23
 8000476:	d15b      	bne.n	8000530 <BlockConfigZone+0x10c>
		for (uint8_t i = 0; i < 2; i++){
 8000478:	2300      	movs	r3, #0
 800047a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800047e:	e050      	b.n	8000522 <BlockConfigZone+0xfe>
			slot = i*adress;
 8000480:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000484:	f897 20aa 	ldrb.w	r2, [r7, #170]	; 0xaa
 8000488:	fb02 f303 	mul.w	r3, r2, r3
 800048c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			uint8_t SendCommand[8] = {0x03, 0x07, 0x02, READ_WRITE_32, slot, 0x00, 0x00, 0x00};
 8000490:	2303      	movs	r3, #3
 8000492:	743b      	strb	r3, [r7, #16]
 8000494:	2307      	movs	r3, #7
 8000496:	747b      	strb	r3, [r7, #17]
 8000498:	2302      	movs	r3, #2
 800049a:	74bb      	strb	r3, [r7, #18]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	74fb      	strb	r3, [r7, #19]
 80004a0:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80004a4:	753b      	strb	r3, [r7, #20]
 80004a6:	2300      	movs	r3, #0
 80004a8:	757b      	strb	r3, [r7, #21]
 80004aa:	2300      	movs	r3, #0
 80004ac:	75bb      	strb	r3, [r7, #22]
 80004ae:	2300      	movs	r3, #0
 80004b0:	75fb      	strb	r3, [r7, #23]
			atCRC(SendCommand,sizeof(SendCommand));
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	2108      	movs	r1, #8
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff fe47 	bl	800014c <atCRC>
			ReadConfig(SendCommand, size, DataReceive_35);
 80004be:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80004c2:	b299      	uxth	r1, r3
 80004c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80004c8:	f107 0310 	add.w	r3, r7, #16
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff fecd 	bl	800026c <ReadConfig>

			uint8_t length = i * (32 + 1);
 80004d2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80004d6:	461a      	mov	r2, r3
 80004d8:	0152      	lsls	r2, r2, #5
 80004da:	4413      	add	r3, r2
 80004dc:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			for (uint8_t j = 1; j <= (32 + 1); j++){
 80004e0:	2301      	movs	r3, #1
 80004e2:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80004e6:	e013      	b.n	8000510 <BlockConfigZone+0xec>
				DataZoneConfig[length + j] = DataReceive_35[j];
 80004e8:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80004ec:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 80004f0:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80004f4:	440b      	add	r3, r1
 80004f6:	32b0      	adds	r2, #176	; 0xb0
 80004f8:	443a      	add	r2, r7
 80004fa:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 80004fe:	33b0      	adds	r3, #176	; 0xb0
 8000500:	443b      	add	r3, r7
 8000502:	f803 2c90 	strb.w	r2, [r3, #-144]
			for (uint8_t j = 1; j <= (32 + 1); j++){
 8000506:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800050a:	3301      	adds	r3, #1
 800050c:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8000510:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8000514:	2b21      	cmp	r3, #33	; 0x21
 8000516:	d9e7      	bls.n	80004e8 <BlockConfigZone+0xc4>
		for (uint8_t i = 0; i < 2; i++){
 8000518:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800051c:	3301      	adds	r3, #1
 800051e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000522:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000526:	2b01      	cmp	r3, #1
 8000528:	d9aa      	bls.n	8000480 <BlockConfigZone+0x5c>
			}
		}
		size = 7;
 800052a:	2307      	movs	r3, #7
 800052c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	}

	if(size == 7){
 8000530:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000534:	2b07      	cmp	r3, #7
 8000536:	d15c      	bne.n	80005f2 <BlockConfigZone+0x1ce>
		for (uint8_t x = 0; x <= 5; x++){
 8000538:	2300      	movs	r3, #0
 800053a:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 800053e:	e054      	b.n	80005ea <BlockConfigZone+0x1c6>
			adress = 0x10;
 8000540:	2310      	movs	r3, #16
 8000542:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
			slot = x + adress;
 8000546:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800054a:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 800054e:	4413      	add	r3, r2
 8000550:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			uint8_t SendCommand[8] = {0x03, 0x07, 0x02, READ_WRITE_4, slot, 0x00, 0x00, 0x00};
 8000554:	2303      	movs	r3, #3
 8000556:	723b      	strb	r3, [r7, #8]
 8000558:	2307      	movs	r3, #7
 800055a:	727b      	strb	r3, [r7, #9]
 800055c:	2302      	movs	r3, #2
 800055e:	72bb      	strb	r3, [r7, #10]
 8000560:	2300      	movs	r3, #0
 8000562:	72fb      	strb	r3, [r7, #11]
 8000564:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8000568:	733b      	strb	r3, [r7, #12]
 800056a:	2300      	movs	r3, #0
 800056c:	737b      	strb	r3, [r7, #13]
 800056e:	2300      	movs	r3, #0
 8000570:	73bb      	strb	r3, [r7, #14]
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
			atCRC(SendCommand,sizeof(SendCommand));
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2108      	movs	r1, #8
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fde5 	bl	800014c <atCRC>
			ReadConfig(SendCommand, size, DataReceive_7);
 8000582:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000586:	b299      	uxth	r1, r3
 8000588:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800058c:	f107 0308 	add.w	r3, r7, #8
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe6b 	bl	800026c <ReadConfig>

			for(uint8_t y = 0; y <= 3; y++){
 8000596:	2300      	movs	r3, #0
 8000598:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800059c:	e01c      	b.n	80005d8 <BlockConfigZone+0x1b4>
				uint8_t length = (x*4) + (64+1) + y;
 800059e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80005aa:	4413      	add	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	3341      	adds	r3, #65	; 0x41
 80005b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				DataZoneConfig[length] = DataReceive_7[y+1];
 80005b4:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80005be:	32b0      	adds	r2, #176	; 0xb0
 80005c0:	443a      	add	r2, r7
 80005c2:	f812 2c34 	ldrb.w	r2, [r2, #-52]
 80005c6:	33b0      	adds	r3, #176	; 0xb0
 80005c8:	443b      	add	r3, r7
 80005ca:	f803 2c90 	strb.w	r2, [r3, #-144]
			for(uint8_t y = 0; y <= 3; y++){
 80005ce:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80005d2:	3301      	adds	r3, #1
 80005d4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 80005d8:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d9de      	bls.n	800059e <BlockConfigZone+0x17a>
		for (uint8_t x = 0; x <= 5; x++){
 80005e0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80005e4:	3301      	adds	r3, #1
 80005e6:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 80005ea:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80005ee:	2b05      	cmp	r3, #5
 80005f0:	d9a6      	bls.n	8000540 <BlockConfigZone+0x11c>
		 	}
		 }
	}


	atCRC(DataZoneConfig, sizeof(DataZoneConfig));
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	215b      	movs	r1, #91	; 0x5b
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff fda7 	bl	800014c <atCRC>

	// Lock command: {COMMAND, COUNT, OPCODE, ZONE, CRC_88_LSB,  CRC_88_MSB, CRC_LSB, CRC_MSB}
	uint8_t blockConfig[] = { COMMAND, SIZE_BLOCK_CONFIG, COMMAND_LOCK, ZONE_CONFIG_LOCK, DataZoneConfig[90], DataZoneConfig[89],/*0xc4, 0xe1*/ 0x00, 0x00};
 80005fe:	2303      	movs	r3, #3
 8000600:	763b      	strb	r3, [r7, #24]
 8000602:	2307      	movs	r3, #7
 8000604:	767b      	strb	r3, [r7, #25]
 8000606:	2317      	movs	r3, #23
 8000608:	76bb      	strb	r3, [r7, #26]
 800060a:	2300      	movs	r3, #0
 800060c:	76fb      	strb	r3, [r7, #27]
 800060e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000612:	773b      	strb	r3, [r7, #28]
 8000614:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000618:	777b      	strb	r3, [r7, #29]
 800061a:	2300      	movs	r3, #0
 800061c:	77bb      	strb	r3, [r7, #30]
 800061e:	2300      	movs	r3, #0
 8000620:	77fb      	strb	r3, [r7, #31]
	atCRC(blockConfig,sizeof(blockConfig));
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2108      	movs	r1, #8
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fd8f 	bl	800014c <atCRC>
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, blockConfig, sizeof(blockConfig), 1000);
 800062e:	f107 0218 	add.w	r2, r7, #24
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2308      	movs	r3, #8
 800063a:	21c8      	movs	r1, #200	; 0xc8
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <BlockConfigZone+0x244>)
 800063e:	f001 f867 	bl	8001710 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000642:	200a      	movs	r0, #10
 8000644:	f000 fbf4 	bl	8000e30 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, 1, 1000);
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	21c8      	movs	r1, #200	; 0xc8
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <BlockConfigZone+0x244>)
 8000656:	f001 f959 	bl	800190c <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 800065a:	200a      	movs	r0, #10
 800065c:	f000 fbe8 	bl	8000e30 <HAL_Delay>

}
 8000660:	bf00      	nop
 8000662:	37b0      	adds	r7, #176	; 0xb0
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b0ec      	sub	sp, #432	; 0x1b0
 8000670:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000672:	f000 fb7b 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f975 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 fa13 	bl	8000aa4 <MX_GPIO_Init>
  MX_USART1_Init();
 800067e:	f000 f9e5 	bl	8000a4c <MX_USART1_Init>
  MX_I2C2_Init();
 8000682:	f000 f9b5 	bl	80009f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  uint8_t readCommand0[8] = {0x03, 0x07, 0x02, 0x80, 0x00, 0x00, 0x09, 0xAD};
 8000686:	4aab      	ldr	r2, [pc, #684]	; (8000934 <main+0x2c8>)
 8000688:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800068c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000690:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand1[8] = {0x03, 0x07, 0x02, 0x80, 0x08, 0x00, 0x0a, 0x4d};
 8000694:	4aa8      	ldr	r2, [pc, #672]	; (8000938 <main+0x2cc>)
 8000696:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800069a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800069e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand2[8] = {0x03, 0x07, 0x02, 0x00, 0x10, 0x00, 0x1d, 0x9d};
 80006a2:	4aa6      	ldr	r2, [pc, #664]	; (800093c <main+0x2d0>)
 80006a4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80006a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ac:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand3[8] = {0x03, 0x07, 0x02, 0x00, 0x11, 0x00, 0x14, 0x1d};
 80006b0:	4aa3      	ldr	r2, [pc, #652]	; (8000940 <main+0x2d4>)
 80006b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80006b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand4[8] = {0x03, 0x07, 0x02, 0x00, 0x12, 0x00, 0x1b, 0x1d};
 80006be:	4aa1      	ldr	r2, [pc, #644]	; (8000944 <main+0x2d8>)
 80006c0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand5[8] = {0x03, 0x07, 0x02, 0x00, 0x13, 0x00, 0x12, 0x9d};
 80006cc:	4a9e      	ldr	r2, [pc, #632]	; (8000948 <main+0x2dc>)
 80006ce:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80006d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand6[8] = {0x03, 0x07, 0x02, 0x00, 0x14, 0x00, 0x1e, 0xdd};
 80006da:	4a9c      	ldr	r2, [pc, #624]	; (800094c <main+0x2e0>)
 80006dc:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80006e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e4:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand7[8] = {0x03, 0x07, 0x02, 0x00, 0x15, 0x00, 0x17, 0x5d};
 80006e8:	4a99      	ldr	r2, [pc, #612]	; (8000950 <main+0x2e4>)
 80006ea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80006ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f2:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t readMASTERKEY[8] = {0x03, 0x07, 0x02, 0x82, 0x70, 0x00, 0x09, 0x8c};
 80006f6:	4a97      	ldr	r2, [pc, #604]	; (8000954 <main+0x2e8>)
 80006f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80006fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000700:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readDATA0[8] = {0x03, 0x07, 0x02, 0x82, 0x10, 0x00, 0x09, 0x98};
 8000704:	4a94      	ldr	r2, [pc, #592]	; (8000958 <main+0x2ec>)
 8000706:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800070a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800070e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readDATA2[8] = {0x03, 0x07, 0x02, 0x82, 0x50, 0x00, 0x0a, 0x14};
 8000712:	4a92      	ldr	r2, [pc, #584]	; (800095c <main+0x2f0>)
 8000714:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t temp_nonce[] = {};

  uint8_t receiv_MASTERKEY[35] = {0};
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000726:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800072a:	221f      	movs	r2, #31
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 ff2c 	bl	800358c <memset>


  // NONCE
  uint8_t NumIn[20]= {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00,
 8000734:	4b8a      	ldr	r3, [pc, #552]	; (8000960 <main+0x2f4>)
 8000736:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800073a:	461d      	mov	r5, r3
 800073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800073e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000740:	682b      	ldr	r3, [r5, #0]
 8000742:	6023      	str	r3, [r4, #0]
		  	  	  	  0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00};
  uint8_t nonce_receiv[35] = {0};
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800074a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800074e:	221f      	movs	r2, #31
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 ff1a 	bl	800358c <memset>
  uint8_t tempnonce[35] = {0};
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800075e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000762:	221f      	movs	r2, #31
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f002 ff10 	bl	800358c <memset>


  // SHA-256
  uint8_t sha_init[1] = {0};
 800076c:	2300      	movs	r3, #0
 800076e:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
  uint8_t SHA_receiv[35] = {0};
 8000772:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000776:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	3304      	adds	r3, #4
 8000780:	221f      	movs	r2, #31
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f002 ff01 	bl	800358c <memset>

  // GENDIG
  uint8_t gendig_receiv[4] = {0};
 800078a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800078e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]

  uint8_t receiv_DATA2[35] = {0};
 8000796:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800079a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	3304      	adds	r3, #4
 80007a4:	221f      	movs	r2, #31
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 feef 	bl	800358c <memset>


  uint8_t read_byte[4];
  uint8_t receiv_ack[1] = {0};
 80007ae:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80007b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]

  //uint8_t read_config[32] = {0};
  uint8_t read_config0[35] = {0};
 80007ba:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80007be:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	3304      	adds	r3, #4
 80007c8:	221f      	movs	r2, #31
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fedd 	bl	800358c <memset>
  uint8_t read_config1[35] = {0};
 80007d2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80007d6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	221f      	movs	r2, #31
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fed1 	bl	800358c <memset>
  uint8_t read_config2[7] = {0};
 80007ea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80007ee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	3304      	adds	r3, #4
 80007f8:	2100      	movs	r1, #0
 80007fa:	460a      	mov	r2, r1
 80007fc:	801a      	strh	r2, [r3, #0]
 80007fe:	460a      	mov	r2, r1
 8000800:	709a      	strb	r2, [r3, #2]
  uint8_t read_config3[7] = {0};
 8000802:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000806:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	3304      	adds	r3, #4
 8000810:	2100      	movs	r1, #0
 8000812:	460a      	mov	r2, r1
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	460a      	mov	r2, r1
 8000818:	709a      	strb	r2, [r3, #2]
  uint8_t read_config4[7] = {0};
 800081a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800081e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	3304      	adds	r3, #4
 8000828:	2100      	movs	r1, #0
 800082a:	460a      	mov	r2, r1
 800082c:	801a      	strh	r2, [r3, #0]
 800082e:	460a      	mov	r2, r1
 8000830:	709a      	strb	r2, [r3, #2]
  uint8_t read_config5[7] = {0};
 8000832:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000836:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	3304      	adds	r3, #4
 8000840:	2100      	movs	r1, #0
 8000842:	460a      	mov	r2, r1
 8000844:	801a      	strh	r2, [r3, #0]
 8000846:	460a      	mov	r2, r1
 8000848:	709a      	strb	r2, [r3, #2]
  uint8_t read_config6[7] = {0};
 800084a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800084e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	3304      	adds	r3, #4
 8000858:	2100      	movs	r1, #0
 800085a:	460a      	mov	r2, r1
 800085c:	801a      	strh	r2, [r3, #0]
 800085e:	460a      	mov	r2, r1
 8000860:	709a      	strb	r2, [r3, #2]
  uint8_t read_config7[7] = {0};
 8000862:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000866:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	3304      	adds	r3, #4
 8000870:	2100      	movs	r1, #0
 8000872:	460a      	mov	r2, r1
 8000874:	801a      	strh	r2, [r3, #0]
 8000876:	460a      	mov	r2, r1
 8000878:	709a      	strb	r2, [r3, #2]
  uint8_t read_config8[7] = {0};
 800087a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800087e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	3304      	adds	r3, #4
 8000888:	2100      	movs	r1, #0
 800088a:	460a      	mov	r2, r1
 800088c:	801a      	strh	r2, [r3, #0]
 800088e:	460a      	mov	r2, r1
 8000890:	709a      	strb	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WakeUp(read_byte);
 8000892:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fca8 	bl	80001ec <WakeUp>
	  WriteConfigZone();
 800089c:	f7ff fd0c 	bl	80002b8 <WriteConfigZone>
	  BlockConfigZone(receiv_ack);
 80008a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fdbd 	bl	8000424 <BlockConfigZone>
	  //WriteDataZone();
	  //WriteOTPZone();
	  //BlockDataZone();

	  ReadConfig(readCommand0, 35, read_config0);
 80008aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80008ae:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80008b2:	2123      	movs	r1, #35	; 0x23
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcd9 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand1, 35, read_config1);
 80008ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80008be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80008c2:	2123      	movs	r1, #35	; 0x23
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fcd1 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand2, 7, read_config2);
 80008ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80008ce:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80008d2:	2107      	movs	r1, #7
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fcc9 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand3, 7, read_config3);
 80008da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008de:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80008e2:	2107      	movs	r1, #7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fcc1 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand4, 7, read_config4);
 80008ea:	f107 0220 	add.w	r2, r7, #32
 80008ee:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008f2:	2107      	movs	r1, #7
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fcb9 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand5, 7, read_config5);
 80008fa:	f107 0218 	add.w	r2, r7, #24
 80008fe:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000902:	2107      	movs	r1, #7
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fcb1 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand6, 7, read_config6);
 800090a:	f107 0210 	add.w	r2, r7, #16
 800090e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000912:	2107      	movs	r1, #7
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fca9 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand7, 7, read_config7);
 800091a:	f107 0208 	add.w	r2, r7, #8
 800091e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000922:	2107      	movs	r1, #7
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fca1 	bl	800026c <ReadConfig>
	  //SHACommandInit(1, sha_init);
	  //SHACommandCompute(35, SHA_receiv);

	  //ReadEncript(readDATA2, 35, receiv_DATA2);

	  HAL_Delay(10);
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fa80 	bl	8000e30 <HAL_Delay>
	  WakeUp(read_byte);
 8000930:	e7af      	b.n	8000892 <main+0x226>
 8000932:	bf00      	nop
 8000934:	080038c4 	.word	0x080038c4
 8000938:	080038cc 	.word	0x080038cc
 800093c:	080038d4 	.word	0x080038d4
 8000940:	080038dc 	.word	0x080038dc
 8000944:	080038e4 	.word	0x080038e4
 8000948:	080038ec 	.word	0x080038ec
 800094c:	080038f4 	.word	0x080038f4
 8000950:	080038fc 	.word	0x080038fc
 8000954:	08003904 	.word	0x08003904
 8000958:	0800390c 	.word	0x0800390c
 800095c:	08003914 	.word	0x08003914
 8000960:	0800391c 	.word	0x0800391c

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b090      	sub	sp, #64	; 0x40
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	2228      	movs	r2, #40	; 0x28
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f002 fe0a 	bl	800358c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000998:	2302      	movs	r3, #2
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 fd39 	bl	8002424 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009b8:	f000 f8ae 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 ffa6 	bl	8002928 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009e2:	f000 f899 	bl	8000b18 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3740      	adds	r7, #64	; 0x40
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_I2C2_Init+0x50>)
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_I2C2_Init+0x54>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_I2C2_Init+0x50>)
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_I2C2_Init+0x58>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a12:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_I2C2_Init+0x50>)
 8000a2e:	f000 fd2b 	bl	8001488 <HAL_I2C_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a38:	f000 f86e 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000028 	.word	0x20000028
 8000a44:	40005800 	.word	0x40005800
 8000a48:	000186a0 	.word	0x000186a0

08000a4c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <MX_USART1_Init+0x54>)
 8000a54:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USART1_Init+0x50>)
 8000a8a:	f002 f8e5 	bl	8002c58 <HAL_USART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 f840 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000007c 	.word	0x2000007c
 8000aa0:	40013800 	.word	0x40013800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f003 0310 	and.w	r3, r3, #16
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000ac8:	f043 0320 	orr.w	r3, r3, #32
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0320 	and.w	r3, r3, #32
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <MX_GPIO_Init+0x70>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	61d3      	str	r3, [r2, #28]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_MspInit+0x60>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_MspInit+0x60>)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <HAL_I2C_MspInit+0x74>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d124      	bne.n	8000bf2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_I2C_MspInit+0x78>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_I2C_MspInit+0x78>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_I2C_MspInit+0x78>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0308 	and.w	r3, r3, #8
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc6:	2312      	movs	r3, #18
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <HAL_I2C_MspInit+0x7c>)
 8000bd6:	f000 fad3 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_I2C_MspInit+0x78>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_I2C_MspInit+0x78>)
 8000be0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_I2C_MspInit+0x78>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3720      	adds	r7, #32
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010c00 	.word	0x40010c00

08000c08 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <HAL_USART_MspInit+0x9c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d139      	bne.n	8000c9c <HAL_USART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_USART_MspInit+0xa0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_USART_MspInit+0xa0>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_USART_MspInit+0xa0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_USART_MspInit+0xa0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <HAL_USART_MspInit+0xa0>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_USART_MspInit+0xa0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <HAL_USART_MspInit+0xa4>)
 8000c6e:	f000 fa87 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4619      	mov	r1, r3
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_USART_MspInit+0xa4>)
 8000c88:	f000 fa7a 	bl	8001180 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2025      	movs	r0, #37	; 0x25
 8000c92:	f000 f9c8 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c96:	2025      	movs	r0, #37	; 0x25
 8000c98:	f000 f9e1 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40013800 	.word	0x40013800
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf6:	f000 f87f 	bl	8000df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART1_IRQHandler+0x10>)
 8000d06:	f001 ffe9 	bl	8002cdc <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000007c 	.word	0x2000007c

08000d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <Reset_Handler>:
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <LoopFillZerobss+0x12>)
 8000d22:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LoopFillZerobss+0x16>)
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <LoopFillZerobss+0x1a>)
 8000d26:	2300      	movs	r3, #0
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:
 8000d2a:	58d4      	ldr	r4, [r2, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:
 8000d30:	18c4      	adds	r4, r0, r3
 8000d32:	428c      	cmp	r4, r1
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <LoopFillZerobss+0x1e>)
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <LoopFillZerobss+0x22>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:
 8000d42:	42a2      	cmp	r2, r4
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>
 8000d46:	f7ff ffe5 	bl	8000d14 <SystemInit>
 8000d4a:	f002 fbfb 	bl	8003544 <__libc_init_array>
 8000d4e:	f7ff fc8d 	bl	800066c <main>
 8000d52:	4770      	bx	lr
 8000d54:	20000000 	.word	0x20000000
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	08003960 	.word	0x08003960
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	200000c4 	.word	0x200000c4

08000d68 <ADC1_2_IRQHandler>:
 8000d68:	e7fe      	b.n	8000d68 <ADC1_2_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_Init+0x28>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_Init+0x28>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	f000 f947 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d82:	200f      	movs	r0, #15
 8000d84:	f000 f808 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d88:	f7ff fecc 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40022000 	.word	0x40022000

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x54>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x58>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f95f 	bl	800107a <HAL_SYSTICK_Config>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00e      	b.n	8000de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d80a      	bhi.n	8000de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd4:	f000 f927 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <HAL_InitTick+0x5c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000004 	.word	0x20000004

08000df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x1c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_IncTick+0x20>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <HAL_IncTick+0x20>)
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	20000008 	.word	0x20000008
 8000e18:	200000c0 	.word	0x200000c0

08000e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b02      	ldr	r3, [pc, #8]	; (8000e2c <HAL_GetTick+0x10>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	200000c0 	.word	0x200000c0

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff fff0 	bl	8000e1c <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffe0 	bl	8000e1c <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4906      	ldr	r1, [pc, #24]	; (8000f10 <__NVIC_EnableIRQ+0x34>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	f7ff ff90 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff2d 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff42 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff35 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d005      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2204      	movs	r2, #4
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e051      	b.n	800115a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 020e 	bic.w	r2, r2, #14
 80010c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <HAL_DMA_Abort_IT+0xd0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d029      	beq.n	8001134 <HAL_DMA_Abort_IT+0xa0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <HAL_DMA_Abort_IT+0xd4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d022      	beq.n	8001130 <HAL_DMA_Abort_IT+0x9c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_DMA_Abort_IT+0xd8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d01a      	beq.n	800112a <HAL_DMA_Abort_IT+0x96>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_DMA_Abort_IT+0xdc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d012      	beq.n	8001124 <HAL_DMA_Abort_IT+0x90>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_DMA_Abort_IT+0xe0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00a      	beq.n	800111e <HAL_DMA_Abort_IT+0x8a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_DMA_Abort_IT+0xe4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d102      	bne.n	8001118 <HAL_DMA_Abort_IT+0x84>
 8001112:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001116:	e00e      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111c:	e00b      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 800111e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001122:	e008      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	e005      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 800112a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112e:	e002      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001130:	2310      	movs	r3, #16
 8001132:	e000      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001134:	2301      	movs	r3, #1
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_DMA_Abort_IT+0xe8>)
 8001138:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	4798      	blx	r3
    } 
  }
  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40020008 	.word	0x40020008
 8001168:	4002001c 	.word	0x4002001c
 800116c:	40020030 	.word	0x40020030
 8001170:	40020044 	.word	0x40020044
 8001174:	40020058 	.word	0x40020058
 8001178:	4002006c 	.word	0x4002006c
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e169      	b.n	8001468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8158 	bne.w	8001462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a9a      	ldr	r2, [pc, #616]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d05e      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011bc:	4a98      	ldr	r2, [pc, #608]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d875      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011c2:	4a98      	ldr	r2, [pc, #608]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d058      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011c8:	4a96      	ldr	r2, [pc, #600]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d86f      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011ce:	4a96      	ldr	r2, [pc, #600]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d052      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011d4:	4a94      	ldr	r2, [pc, #592]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d869      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011da:	4a94      	ldr	r2, [pc, #592]	; (800142c <HAL_GPIO_Init+0x2ac>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d04c      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011e0:	4a92      	ldr	r2, [pc, #584]	; (800142c <HAL_GPIO_Init+0x2ac>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d863      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011e6:	4a92      	ldr	r2, [pc, #584]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d046      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011ec:	4a90      	ldr	r2, [pc, #576]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d85d      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011f2:	2b12      	cmp	r3, #18
 80011f4:	d82a      	bhi.n	800124c <HAL_GPIO_Init+0xcc>
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d859      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <HAL_GPIO_Init+0x80>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	0800127b 	.word	0x0800127b
 8001204:	08001255 	.word	0x08001255
 8001208:	08001267 	.word	0x08001267
 800120c:	080012a9 	.word	0x080012a9
 8001210:	080012af 	.word	0x080012af
 8001214:	080012af 	.word	0x080012af
 8001218:	080012af 	.word	0x080012af
 800121c:	080012af 	.word	0x080012af
 8001220:	080012af 	.word	0x080012af
 8001224:	080012af 	.word	0x080012af
 8001228:	080012af 	.word	0x080012af
 800122c:	080012af 	.word	0x080012af
 8001230:	080012af 	.word	0x080012af
 8001234:	080012af 	.word	0x080012af
 8001238:	080012af 	.word	0x080012af
 800123c:	080012af 	.word	0x080012af
 8001240:	080012af 	.word	0x080012af
 8001244:	0800125d 	.word	0x0800125d
 8001248:	08001271 	.word	0x08001271
 800124c:	4a79      	ldr	r2, [pc, #484]	; (8001434 <HAL_GPIO_Init+0x2b4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001252:	e02c      	b.n	80012ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e029      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	3304      	adds	r3, #4
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e024      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	3308      	adds	r3, #8
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e01f      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	330c      	adds	r3, #12
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e01a      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001282:	2304      	movs	r3, #4
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e013      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001290:	2308      	movs	r3, #8
 8001292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	611a      	str	r2, [r3, #16]
          break;
 800129a:	e009      	b.n	80012b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800129c:	2308      	movs	r3, #8
 800129e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	615a      	str	r2, [r3, #20]
          break;
 80012a6:	e003      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          break;
 80012ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d801      	bhi.n	80012ba <HAL_GPIO_Init+0x13a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_Init+0x13e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d802      	bhi.n	80012cc <HAL_GPIO_Init+0x14c>
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x152>
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	3b08      	subs	r3, #8
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	210f      	movs	r1, #15
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	401a      	ands	r2, r3
 80012e4:	6a39      	ldr	r1, [r7, #32]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80b1 	beq.w	8001462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001300:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2bc>)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_GPIO_Init+0x1ec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <HAL_GPIO_Init+0x2c4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <HAL_GPIO_Init+0x1e8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x1e4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3d      	ldr	r2, [pc, #244]	; (800144c <HAL_GPIO_Init+0x2cc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_GPIO_Init+0x1e0>
 800135c:	2303      	movs	r3, #3
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001360:	2304      	movs	r3, #4
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001364:	2302      	movs	r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 800136c:	2300      	movs	r3, #0
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800137e:	492f      	ldr	r1, [pc, #188]	; (800143c <HAL_GPIO_Init+0x2bc>)
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	492c      	ldr	r1, [pc, #176]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4928      	ldr	r1, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4922      	ldr	r1, [pc, #136]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	491e      	ldr	r1, [pc, #120]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4918      	ldr	r1, [pc, #96]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4914      	ldr	r1, [pc, #80]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d021      	beq.n	8001454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
 800141c:	e021      	b.n	8001462 <HAL_GPIO_Init+0x2e2>
 800141e:	bf00      	nop
 8001420:	10320000 	.word	0x10320000
 8001424:	10310000 	.word	0x10310000
 8001428:	10220000 	.word	0x10220000
 800142c:	10210000 	.word	0x10210000
 8001430:	10120000 	.word	0x10120000
 8001434:	10110000 	.word	0x10110000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40011000 	.word	0x40011000
 800144c:	40011400 	.word	0x40011400
 8001450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	43db      	mvns	r3, r3
 800145c:	4909      	ldr	r1, [pc, #36]	; (8001484 <HAL_GPIO_Init+0x304>)
 800145e:	4013      	ands	r3, r2
 8001460:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f ae8e 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	372c      	adds	r7, #44	; 0x2c
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e12b      	b.n	80016f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fb6a 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2224      	movs	r2, #36	; 0x24
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014ec:	f001 fb6e 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 80014f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a81      	ldr	r2, [pc, #516]	; (80016fc <HAL_I2C_Init+0x274>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d807      	bhi.n	800150c <HAL_I2C_Init+0x84>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a80      	ldr	r2, [pc, #512]	; (8001700 <HAL_I2C_Init+0x278>)
 8001500:	4293      	cmp	r3, r2
 8001502:	bf94      	ite	ls
 8001504:	2301      	movls	r3, #1
 8001506:	2300      	movhi	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	e006      	b.n	800151a <HAL_I2C_Init+0x92>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a7d      	ldr	r2, [pc, #500]	; (8001704 <HAL_I2C_Init+0x27c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	bf94      	ite	ls
 8001514:	2301      	movls	r3, #1
 8001516:	2300      	movhi	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e0e7      	b.n	80016f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4a78      	ldr	r2, [pc, #480]	; (8001708 <HAL_I2C_Init+0x280>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	430a      	orrs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a6a      	ldr	r2, [pc, #424]	; (80016fc <HAL_I2C_Init+0x274>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d802      	bhi.n	800155c <HAL_I2C_Init+0xd4>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3301      	adds	r3, #1
 800155a:	e009      	b.n	8001570 <HAL_I2C_Init+0xe8>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	4a69      	ldr	r2, [pc, #420]	; (800170c <HAL_I2C_Init+0x284>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	099b      	lsrs	r3, r3, #6
 800156e:	3301      	adds	r3, #1
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	430b      	orrs	r3, r1
 8001576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	495c      	ldr	r1, [pc, #368]	; (80016fc <HAL_I2C_Init+0x274>)
 800158c:	428b      	cmp	r3, r1
 800158e:	d819      	bhi.n	80015c4 <HAL_I2C_Init+0x13c>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1e59      	subs	r1, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fbb1 f3f3 	udiv	r3, r1, r3
 800159e:	1c59      	adds	r1, r3, #1
 80015a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015a4:	400b      	ands	r3, r1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00a      	beq.n	80015c0 <HAL_I2C_Init+0x138>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1e59      	subs	r1, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015be:	e051      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e04f      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d111      	bne.n	80015f0 <HAL_I2C_Init+0x168>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	440b      	add	r3, r1
 80015da:	fbb0 f3f3 	udiv	r3, r0, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bf0c      	ite	eq
 80015e8:	2301      	moveq	r3, #1
 80015ea:	2300      	movne	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	e012      	b.n	8001616 <HAL_I2C_Init+0x18e>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_I2C_Init+0x196>
 800161a:	2301      	movs	r3, #1
 800161c:	e022      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10e      	bne.n	8001644 <HAL_I2C_Init+0x1bc>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e58      	subs	r0, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	440b      	add	r3, r1
 8001634:	fbb0 f3f3 	udiv	r3, r0, r3
 8001638:	3301      	adds	r3, #1
 800163a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001642:	e00f      	b.n	8001664 <HAL_I2C_Init+0x1dc>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	0099      	lsls	r1, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	6809      	ldr	r1, [r1, #0]
 8001668:	4313      	orrs	r3, r2
 800166a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6911      	ldr	r1, [r2, #16]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68d2      	ldr	r2, [r2, #12]
 800169e:	4311      	orrs	r1, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2220      	movs	r2, #32
 80016de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	000186a0 	.word	0x000186a0
 8001700:	001e847f 	.word	0x001e847f
 8001704:	003d08ff 	.word	0x003d08ff
 8001708:	431bde83 	.word	0x431bde83
 800170c:	10624dd3 	.word	0x10624dd3

08001710 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	461a      	mov	r2, r3
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
 8001720:	4613      	mov	r3, r2
 8001722:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fb7a 	bl	8000e1c <HAL_GetTick>
 8001728:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	f040 80e0 	bne.w	80018f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2319      	movs	r3, #25
 800173e:	2201      	movs	r2, #1
 8001740:	4970      	ldr	r1, [pc, #448]	; (8001904 <HAL_I2C_Master_Transmit+0x1f4>)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fc92 	bl	800206c <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
 8001750:	e0d3      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2C_Master_Transmit+0x50>
 800175c:	2302      	movs	r3, #2
 800175e:	e0cc      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d007      	beq.n	8001786 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001794:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2221      	movs	r2, #33	; 0x21
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2210      	movs	r2, #16
 80017a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	893a      	ldrh	r2, [r7, #8]
 80017b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <HAL_I2C_Master_Transmit+0x1f8>)
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c8:	8979      	ldrh	r1, [r7, #10]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 fafc 	bl	8001dcc <I2C_MasterRequestWrite>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e08d      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017f4:	e066      	b.n	80018c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fd0c 	bl	8002218 <I2C_WaitOnTXEFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2b04      	cmp	r3, #4
 800180c:	d107      	bne.n	800181e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800181c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06b      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	781a      	ldrb	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b04      	cmp	r3, #4
 800185e:	d11b      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x188>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d017      	beq.n	8001898 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	6a39      	ldr	r1, [r7, #32]
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f000 fcfc 	bl	800229a <I2C_WaitOnBTFFlagUntilTimeout>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00d      	beq.n	80018c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d107      	bne.n	80018c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e01a      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d194      	bne.n	80017f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	00100002 	.word	0x00100002
 8001908:	ffff0000 	.word	0xffff0000

0800190c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	460b      	mov	r3, r1
 800191a:	817b      	strh	r3, [r7, #10]
 800191c:	4613      	mov	r3, r2
 800191e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff fa7a 	bl	8000e1c <HAL_GetTick>
 8001928:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b20      	cmp	r3, #32
 8001934:	f040 823f 	bne.w	8001db6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2319      	movs	r3, #25
 800193e:	2201      	movs	r2, #1
 8001940:	497f      	ldr	r1, [pc, #508]	; (8001b40 <HAL_I2C_Master_Receive+0x234>)
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fb92 	bl	800206c <I2C_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800194e:	2302      	movs	r3, #2
 8001950:	e232      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_I2C_Master_Receive+0x54>
 800195c:	2302      	movs	r3, #2
 800195e:	e22b      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d007      	beq.n	8001986 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0201 	orr.w	r2, r2, #1
 8001984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001994:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2222      	movs	r2, #34	; 0x22
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2210      	movs	r2, #16
 80019a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a5f      	ldr	r2, [pc, #380]	; (8001b44 <HAL_I2C_Master_Receive+0x238>)
 80019c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019c8:	8979      	ldrh	r1, [r7, #10]
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fa7e 	bl	8001ed0 <I2C_MasterRequestRead>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e1ec      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d113      	bne.n	8001a0e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	e1c0      	b.n	8001d90 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d11e      	bne.n	8001a54 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a50:	b662      	cpsie	i
}
 8001a52:	e035      	b.n	8001ac0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d11e      	bne.n	8001a9a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a96:	b662      	cpsie	i
}
 8001a98:	e012      	b.n	8001ac0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ac0:	e166      	b.n	8001d90 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	f200 811f 	bhi.w	8001d0a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d123      	bne.n	8001b1c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 fc1f 	bl	800231c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e167      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	3b01      	subs	r3, #1
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b1a:	e139      	b.n	8001d90 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d152      	bne.n	8001bca <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4906      	ldr	r1, [pc, #24]	; (8001b48 <HAL_I2C_Master_Receive+0x23c>)
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fa9c 	bl	800206c <I2C_WaitOnFlagUntilTimeout>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e13c      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
 8001b3e:	bf00      	nop
 8001b40:	00100002 	.word	0x00100002
 8001b44:	ffff0000 	.word	0xffff0000
 8001b48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b92:	b662      	cpsie	i
}
 8001b94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bc8:	e0e2      	b.n	8001d90 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	497b      	ldr	r1, [pc, #492]	; (8001dc0 <HAL_I2C_Master_Receive+0x4b4>)
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fa49 	bl	800206c <I2C_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0e9      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c2a:	4b66      	ldr	r3, [pc, #408]	; (8001dc4 <HAL_I2C_Master_Receive+0x4b8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	08db      	lsrs	r3, r3, #3
 8001c30:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_I2C_Master_Receive+0x4bc>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	0a1a      	lsrs	r2, r3, #8
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00da      	lsls	r2, r3, #3
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d118      	bne.n	8001c82 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c72:	b662      	cpsie	i
}
 8001c74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e09a      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d1d9      	bne.n	8001c44 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001cd2:	b662      	cpsie	i
}
 8001cd4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3b01      	subs	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d08:	e042      	b.n	8001d90 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fb04 	bl	800231c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e04c      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d118      	bne.n	8001d90 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f47f ae94 	bne.w	8001ac2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
  }
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	00010004 	.word	0x00010004
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	14f8b589 	.word	0x14f8b589

08001dcc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d006      	beq.n	8001df6 <I2C_MasterRequestWrite+0x2a>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d003      	beq.n	8001df6 <I2C_MasterRequestWrite+0x2a>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001df4:	d108      	bne.n	8001e08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e00b      	b.n	8001e20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	2b12      	cmp	r3, #18
 8001e0e:	d107      	bne.n	8001e20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f91d 	bl	800206c <I2C_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e46:	d103      	bne.n	8001e50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e035      	b.n	8001ec0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e5c:	d108      	bne.n	8001e70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e6c:	611a      	str	r2, [r3, #16]
 8001e6e:	e01b      	b.n	8001ea8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e70:	897b      	ldrh	r3, [r7, #10]
 8001e72:	11db      	asrs	r3, r3, #7
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 0306 	and.w	r3, r3, #6
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f063 030f 	orn	r3, r3, #15
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <I2C_MasterRequestWrite+0xfc>)
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f943 	bl	800211a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e010      	b.n	8001ec0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e9e:	897b      	ldrh	r3, [r7, #10]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4907      	ldr	r1, [pc, #28]	; (8001ecc <I2C_MasterRequestWrite+0x100>)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f933 	bl	800211a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	00010008 	.word	0x00010008
 8001ecc:	00010002 	.word	0x00010002

08001ed0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	460b      	mov	r3, r1
 8001ede:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d006      	beq.n	8001f0a <I2C_MasterRequestRead+0x3a>
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d003      	beq.n	8001f0a <I2C_MasterRequestRead+0x3a>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f08:	d108      	bne.n	8001f1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	e00b      	b.n	8001f34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d107      	bne.n	8001f34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f893 	bl	800206c <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5a:	d103      	bne.n	8001f64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e079      	b.n	800205c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f70:	d108      	bne.n	8001f84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f72:	897b      	ldrh	r3, [r7, #10]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	e05f      	b.n	8002044 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f84:	897b      	ldrh	r3, [r7, #10]
 8001f86:	11db      	asrs	r3, r3, #7
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 0306 	and.w	r3, r3, #6
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f063 030f 	orn	r3, r3, #15
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4930      	ldr	r1, [pc, #192]	; (8002064 <I2C_MasterRequestRead+0x194>)
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f8b9 	bl	800211a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e054      	b.n	800205c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4929      	ldr	r1, [pc, #164]	; (8002068 <I2C_MasterRequestRead+0x198>)
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f8a9 	bl	800211a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e044      	b.n	800205c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f831 	bl	800206c <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201e:	d103      	bne.n	8002028 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e017      	b.n	800205c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800202c:	897b      	ldrh	r3, [r7, #10]
 800202e:	11db      	asrs	r3, r3, #7
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f003 0306 	and.w	r3, r3, #6
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f063 030e 	orn	r3, r3, #14
 800203c:	b2da      	uxtb	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <I2C_MasterRequestRead+0x198>)
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f865 	bl	800211a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	00010008 	.word	0x00010008
 8002068:	00010002 	.word	0x00010002

0800206c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	4613      	mov	r3, r2
 800207a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800207c:	e025      	b.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002084:	d021      	beq.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002086:	f7fe fec9 	bl	8000e1c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d302      	bcc.n	800209c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d116      	bne.n	80020ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f043 0220 	orr.w	r2, r3, #32
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e023      	b.n	8002112 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10d      	bne.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4013      	ands	r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	e00c      	b.n	800210a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	43da      	mvns	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4013      	ands	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	429a      	cmp	r2, r3
 800210e:	d0b6      	beq.n	800207e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002128:	e051      	b.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002138:	d123      	bne.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002148:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002152:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e046      	b.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002188:	d021      	beq.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218a:	f7fe fe47 	bl	8000e1c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	d302      	bcc.n	80021a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d116      	bne.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f043 0220 	orr.w	r2, r3, #32
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e020      	b.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10c      	bne.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4013      	ands	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e00b      	b.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	43da      	mvns	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4013      	ands	r3, r2
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d18d      	bne.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002224:	e02d      	b.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 f8ce 	bl	80023c8 <I2C_IsAcknowledgeFailed>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e02d      	b.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800223c:	d021      	beq.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223e:	f7fe fded 	bl	8000e1c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	429a      	cmp	r2, r3
 800224c:	d302      	bcc.n	8002254 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d116      	bne.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f043 0220 	orr.w	r2, r3, #32
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e007      	b.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d1ca      	bne.n	8002226 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b084      	sub	sp, #16
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022a6:	e02d      	b.n	8002304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f88d 	bl	80023c8 <I2C_IsAcknowledgeFailed>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e02d      	b.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022be:	d021      	beq.n	8002304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c0:	f7fe fdac 	bl	8000e1c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d302      	bcc.n	80022d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d116      	bne.n	8002304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f043 0220 	orr.w	r2, r3, #32
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e007      	b.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d1ca      	bne.n	80022a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002328:	e042      	b.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d119      	bne.n	800236c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e029      	b.n	80023c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236c:	f7fe fd56 	bl	8000e1c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d302      	bcc.n	8002382 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f043 0220 	orr.w	r2, r3, #32
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e007      	b.n	80023c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	d1b5      	bne.n	800232a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023de:	d11b      	bne.n	8002418 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f043 0204 	orr.w	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e272      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8087 	beq.w	8002552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b04      	cmp	r3, #4
 800244e:	d00c      	beq.n	800246a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002450:	4b8f      	ldr	r3, [pc, #572]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	2b08      	cmp	r3, #8
 800245a:	d112      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
 800245c:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d10b      	bne.n	8002482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d06c      	beq.n	8002550 <HAL_RCC_OscConfig+0x12c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d168      	bne.n	8002550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e24c      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x76>
 800248c:	4b80      	ldr	r3, [pc, #512]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	e02e      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x98>
 80024a2:	4b7b      	ldr	r3, [pc, #492]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7a      	ldr	r2, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	4b78      	ldr	r3, [pc, #480]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a77      	ldr	r2, [pc, #476]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e01d      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0xbc>
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a71      	ldr	r2, [pc, #452]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a6e      	ldr	r2, [pc, #440]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0xd4>
 80024e0:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d013      	beq.n	8002528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7fe fc8c 	bl	8000e1c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe fc88 	bl	8000e1c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e200      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0xe4>
 8002526:	e014      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe fc78 	bl	8000e1c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fc74 	bl	8000e1c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e1ec      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x10c>
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d063      	beq.n	8002626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800255e:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b08      	cmp	r3, #8
 8002574:	d11c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
 8002576:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d116      	bne.n	80025b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c0      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4939      	ldr	r1, [pc, #228]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	e03a      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe fc2d 	bl	8000e1c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c6:	f7fe fc29 	bl	8000e1c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e1a1      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4927      	ldr	r1, [pc, #156]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
 80025f8:	e015      	b.n	8002626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_RCC_OscConfig+0x270>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fc0c 	bl	8000e1c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002608:	f7fe fc08 	bl	8000e1c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e180      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d03a      	beq.n	80026a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d019      	beq.n	800266e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7fe fbec 	bl	8000e1c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fbe8 	bl	8000e1c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e160      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_RCC_OscConfig+0x26c>)
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002666:	2001      	movs	r0, #1
 8002668:	f000 fad8 	bl	8002c1c <RCC_Delay>
 800266c:	e01c      	b.n	80026a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_RCC_OscConfig+0x274>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002674:	f7fe fbd2 	bl	8000e1c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267a:	e00f      	b.n	800269c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe fbce 	bl	8000e1c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d908      	bls.n	800269c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e146      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
 800268e:	bf00      	nop
 8002690:	40021000 	.word	0x40021000
 8002694:	42420000 	.word	0x42420000
 8002698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b92      	ldr	r3, [pc, #584]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e9      	bne.n	800267c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80a6 	beq.w	8002802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b8b      	ldr	r3, [pc, #556]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a87      	ldr	r2, [pc, #540]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]
 80026d2:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e2:	4b82      	ldr	r3, [pc, #520]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ee:	4b7f      	ldr	r3, [pc, #508]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7e      	ldr	r2, [pc, #504]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fb8f 	bl	8000e1c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7fe fb8b 	bl	8000e1c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	; 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e103      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_RCC_OscConfig+0x4c8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x312>
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a6e      	ldr	r2, [pc, #440]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e02d      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x334>
 800273e:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a69      	ldr	r2, [pc, #420]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a66      	ldr	r2, [pc, #408]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	e01c      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x356>
 8002760:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a60      	ldr	r2, [pc, #384]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6213      	str	r3, [r2, #32]
 800276c:	4b5e      	ldr	r3, [pc, #376]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6213      	str	r3, [r2, #32]
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x36e>
 800277a:	4b5b      	ldr	r3, [pc, #364]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a5a      	ldr	r2, [pc, #360]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	4b58      	ldr	r3, [pc, #352]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279a:	f7fe fb3f 	bl	8000e1c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fb3b 	bl	8000e1c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0b1      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ee      	beq.n	80027a2 <HAL_RCC_OscConfig+0x37e>
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c6:	f7fe fb29 	bl	8000e1c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fb25 	bl	8000e1c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e09b      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a3b      	ldr	r2, [pc, #236]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d061      	beq.n	80028dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d146      	bne.n	80028ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe faf9 	bl	8000e1c <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe faf5 	bl	8000e1c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e06d      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d108      	bne.n	8002868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4921      	ldr	r1, [pc, #132]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a19      	ldr	r1, [r3, #32]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	430b      	orrs	r3, r1
 800287a:	491b      	ldr	r1, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe fac9 	bl	8000e1c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe fac5 	bl	8000e1c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e03d      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x46a>
 80028ac:	e035      	b.n	800291a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_RCC_OscConfig+0x4cc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fab2 	bl	8000e1c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe faae 	bl	8000e1c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e026      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x498>
 80028da:	e01e      	b.n	800291a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e019      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
 80028f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_OscConfig+0x500>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	429a      	cmp	r2, r3
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0d0      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d910      	bls.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b67      	ldr	r3, [pc, #412]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4965      	ldr	r1, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800298e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d040      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d115      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e073      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4936      	ldr	r1, [pc, #216]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fa00 	bl	8000e1c <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe f9fc 	bl	8000e1c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e053      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d210      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 0207 	bic.w	r2, r3, #7
 8002a5e:	4922      	ldr	r1, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe f95e 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08003940 	.word	0x08003940
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b490      	push	{r4, r7}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b02:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002b04:	1d3c      	adds	r4, r7, #4
 8002b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b0c:	f240 2301 	movw	r3, #513	; 0x201
 8002b10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x46>
 8002b3a:	e02b      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b3e:	623b      	str	r3, [r7, #32]
      break;
 8002b40:	e02b      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	0c9b      	lsrs	r3, r3, #18
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	3328      	adds	r3, #40	; 0x28
 8002b4c:	443b      	add	r3, r7
 8002b4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b52:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	0c5b      	lsrs	r3, r3, #17
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	3328      	adds	r3, #40	; 0x28
 8002b6a:	443b      	add	r3, r7
 8002b6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b76:	fb03 f202 	mul.w	r2, r3, r2
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	e004      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	623b      	str	r3, [r7, #32]
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b96:	623b      	str	r3, [r7, #32]
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	; 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc90      	pop	{r4, r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	08003930 	.word	0x08003930
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	003d0900 	.word	0x003d0900

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000000 	.word	0x20000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff2 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08003950 	.word	0x08003950

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	0adb      	lsrs	r3, r3, #11
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08003950 	.word	0x08003950

08002c1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <RCC_Delay+0x34>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <RCC_Delay+0x38>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c38:	bf00      	nop
  }
  while (Delay --);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1e5a      	subs	r2, r3, #1
 8002c3e:	60fa      	str	r2, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f9      	bne.n	8002c38 <RCC_Delay+0x1c>
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	20000000 	.word	0x20000000
 8002c54:	10624dd3 	.word	0x10624dd3

08002c58 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e033      	b.n	8002cd2 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd ffc2 	bl	8000c08 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fb61 	bl	8003354 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d117      	bne.n	8002d42 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <HAL_USART_IRQHandler+0x66>
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b22      	cmp	r3, #34	; 0x22
 8002d30:	d103      	bne.n	8002d3a <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f9b4 	bl	80030a0 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8002d38:	e0e9      	b.n	8002f0e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa36 	bl	80031ac <USART_TransmitReceive_IT>
      return;
 8002d40:	e0e5      	b.n	8002f0e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80bb 	beq.w	8002ec0 <HAL_USART_IRQHandler+0x1e4>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_USART_IRQHandler+0x84>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80b0 	beq.w	8002ec0 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_USART_IRQHandler+0xa4>
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_USART_IRQHandler+0xc4>
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f043 0202 	orr.w	r2, r3, #2
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_USART_IRQHandler+0xe4>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d005      	beq.n	8002dc0 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00f      	beq.n	8002dea <HAL_USART_IRQHandler+0x10e>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <HAL_USART_IRQHandler+0x102>
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0208 	orr.w	r2, r3, #8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 808c 	beq.w	8002f0c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d011      	beq.n	8002e22 <HAL_USART_IRQHandler+0x146>
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00c      	beq.n	8002e22 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b22      	cmp	r3, #34	; 0x22
 8002e12:	d103      	bne.n	8002e1c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f943 	bl	80030a0 <USART_Receive_IT>
 8002e1a:	e002      	b.n	8002e22 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9c5 	bl	80031ac <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bf14      	ite	ne
 8002e30:	2301      	movne	r3, #1
 8002e32:	2300      	moveq	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <HAL_USART_IRQHandler+0x16e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d031      	beq.n	8002eae <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f888 	bl	8002f60 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d023      	beq.n	8002ea6 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e6c:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d013      	beq.n	8002e9e <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <HAL_USART_IRQHandler+0x238>)
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f906 	bl	8001094 <HAL_DMA_Abort_IT>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	e00e      	b.n	8002ebc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f855 	bl	8002f4e <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e00a      	b.n	8002ebc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f851 	bl	8002f4e <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	e006      	b.n	8002ebc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f84d 	bl	8002f4e <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002eba:	e027      	b.n	8002f0c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	bf00      	nop
    return;
 8002ebe:	e025      	b.n	8002f0c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_USART_IRQHandler+0x214>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b12      	cmp	r3, #18
 8002ede:	d103      	bne.n	8002ee8 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f86e 	bl	8002fc2 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8002ee6:	e012      	b.n	8002f0e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f95f 	bl	80031ac <USART_TransmitReceive_IT>
    return;
 8002eee:	e00e      	b.n	8002f0e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_USART_IRQHandler+0x232>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8ab 	bl	8003060 <USART_EndTransmit_IT>
    return;
 8002f0a:	e000      	b.n	8002f0e <HAL_USART_IRQHandler+0x232>
    return;
 8002f0c:	bf00      	nop
  }
}
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	08002f9b 	.word	0x08002f9b

08002f18 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f76:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff ffca 	bl	8002f4e <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b12      	cmp	r3, #18
 8002fd4:	d13e      	bne.n	8003054 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fde:	d114      	bne.n	800300a <USART_Transmit_IT+0x48>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d110      	bne.n	800300a <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ffc:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	1c9a      	adds	r2, r3, #2
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
 8003008:	e008      	b.n	800301c <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	1c59      	adds	r1, r3, #1
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6251      	str	r1, [r2, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29b      	uxth	r3, r3
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4619      	mov	r1, r3
 800302a:	8551      	strh	r1, [r2, #42]	; 0x2a
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10f      	bne.n	8003050 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800303e:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800304e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003076:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff ff41 	bl	8002f18 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b22      	cmp	r3, #34	; 0x22
 80030b2:	d176      	bne.n	80031a2 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030bc:	d117      	bne.n	80030ee <USART_Receive_IT+0x4e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ec:	e026      	b.n	800313c <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d007      	beq.n	8003112 <USART_Receive_IT+0x72>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10a      	bne.n	8003120 <USART_Receive_IT+0x80>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e008      	b.n	8003132 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d120      	bne.n	8003196 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0220 	bic.w	r2, r2, #32
 8003162:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003172:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fecc 	bl	8002f2a <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e006      	b.n	80031a4 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b32      	cmp	r3, #50	; 0x32
 80031be:	f040 80c4 	bne.w	800334a <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03f      	beq.n	800324c <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b80      	cmp	r3, #128	; 0x80
 80031d8:	d138      	bne.n	800324c <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d116      	bne.n	8003212 <USART_TransmitReceive_IT+0x66>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d112      	bne.n	8003212 <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003204:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	1c9a      	adds	r2, r3, #2
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24
 8003210:	e008      	b.n	8003224 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6251      	str	r1, [r2, #36]	; 0x24
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d107      	bne.n	800324c <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800324a:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d051      	beq.n	80032fa <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b20      	cmp	r3, #32
 8003262:	d14a      	bne.n	80032fa <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326c:	d117      	bne.n	800329e <USART_TransmitReceive_IT+0xf2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d113      	bne.n	800329e <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800328c:	b29a      	uxth	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	1c9a      	adds	r2, r3, #2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
 800329c:	e026      	b.n	80032ec <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d007      	beq.n	80032c2 <USART_TransmitReceive_IT+0x116>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10a      	bne.n	80032d0 <USART_TransmitReceive_IT+0x124>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e008      	b.n	80032e2 <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d120      	bne.n	8003346 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0220 	bic.w	r2, r2, #32
 8003312:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003322:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fdfd 	bl	8002f3c <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e002      	b.n	800334c <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	e000      	b.n	800334c <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800334a:	2302      	movs	r3, #2
  }
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 020c 	bic.w	r2, r2, #12
 800336e:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800337e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003388:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800339e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033b6:	f023 030c 	bic.w	r3, r3, #12
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033e8:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a53      	ldr	r2, [pc, #332]	; (800353c <USART_SetConfig+0x1e8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d14f      	bne.n	8003494 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033f4:	f7ff fbfe 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 80033f8:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009a      	lsls	r2, r3, #2
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	4a4b      	ldr	r2, [pc, #300]	; (8003540 <USART_SetConfig+0x1ec>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	0119      	lsls	r1, r3, #4
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009a      	lsls	r2, r3, #2
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003430:	4b43      	ldr	r3, [pc, #268]	; (8003540 <USART_SetConfig+0x1ec>)
 8003432:	fba3 0302 	umull	r0, r3, r3, r2
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2064      	movs	r0, #100	; 0x64
 800343a:	fb00 f303 	mul.w	r3, r0, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	3332      	adds	r3, #50	; 0x32
 8003444:	4a3e      	ldr	r2, [pc, #248]	; (8003540 <USART_SetConfig+0x1ec>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003452:	4419      	add	r1, r3
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009a      	lsls	r2, r3, #2
 800345e:	441a      	add	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	fbb2 f2f3 	udiv	r2, r2, r3
 800346a:	4b35      	ldr	r3, [pc, #212]	; (8003540 <USART_SetConfig+0x1ec>)
 800346c:	fba3 0302 	umull	r0, r3, r3, r2
 8003470:	095b      	lsrs	r3, r3, #5
 8003472:	2064      	movs	r0, #100	; 0x64
 8003474:	fb00 f303 	mul.w	r3, r0, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	3332      	adds	r3, #50	; 0x32
 800347e:	4a30      	ldr	r2, [pc, #192]	; (8003540 <USART_SetConfig+0x1ec>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	095b      	lsrs	r3, r3, #5
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	440a      	add	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003492:	e04e      	b.n	8003532 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7ff fb9a 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8003498:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	4a23      	ldr	r2, [pc, #140]	; (8003540 <USART_SetConfig+0x1ec>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	0119      	lsls	r1, r3, #4
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009a      	lsls	r2, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <USART_SetConfig+0x1ec>)
 80034d2:	fba3 0302 	umull	r0, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2064      	movs	r0, #100	; 0x64
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	3332      	adds	r3, #50	; 0x32
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <USART_SetConfig+0x1ec>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80034f2:	4419      	add	r1, r3
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009a      	lsls	r2, r3, #2
 80034fe:	441a      	add	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	fbb2 f2f3 	udiv	r2, r2, r3
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <USART_SetConfig+0x1ec>)
 800350c:	fba3 0302 	umull	r0, r3, r3, r2
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	2064      	movs	r0, #100	; 0x64
 8003514:	fb00 f303 	mul.w	r3, r0, r3
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	3332      	adds	r3, #50	; 0x32
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <USART_SetConfig+0x1ec>)
 8003520:	fba2 2303 	umull	r2, r3, r2, r3
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	440a      	add	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40013800 	.word	0x40013800
 8003540:	51eb851f 	.word	0x51eb851f

08003544 <__libc_init_array>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	2600      	movs	r6, #0
 8003548:	4d0c      	ldr	r5, [pc, #48]	; (800357c <__libc_init_array+0x38>)
 800354a:	4c0d      	ldr	r4, [pc, #52]	; (8003580 <__libc_init_array+0x3c>)
 800354c:	1b64      	subs	r4, r4, r5
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	42a6      	cmp	r6, r4
 8003552:	d109      	bne.n	8003568 <__libc_init_array+0x24>
 8003554:	f000 f822 	bl	800359c <_init>
 8003558:	2600      	movs	r6, #0
 800355a:	4d0a      	ldr	r5, [pc, #40]	; (8003584 <__libc_init_array+0x40>)
 800355c:	4c0a      	ldr	r4, [pc, #40]	; (8003588 <__libc_init_array+0x44>)
 800355e:	1b64      	subs	r4, r4, r5
 8003560:	10a4      	asrs	r4, r4, #2
 8003562:	42a6      	cmp	r6, r4
 8003564:	d105      	bne.n	8003572 <__libc_init_array+0x2e>
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	f855 3b04 	ldr.w	r3, [r5], #4
 800356c:	4798      	blx	r3
 800356e:	3601      	adds	r6, #1
 8003570:	e7ee      	b.n	8003550 <__libc_init_array+0xc>
 8003572:	f855 3b04 	ldr.w	r3, [r5], #4
 8003576:	4798      	blx	r3
 8003578:	3601      	adds	r6, #1
 800357a:	e7f2      	b.n	8003562 <__libc_init_array+0x1e>
 800357c:	08003958 	.word	0x08003958
 8003580:	08003958 	.word	0x08003958
 8003584:	08003958 	.word	0x08003958
 8003588:	0800395c 	.word	0x0800395c

0800358c <memset>:
 800358c:	4603      	mov	r3, r0
 800358e:	4402      	add	r2, r0
 8003590:	4293      	cmp	r3, r2
 8003592:	d100      	bne.n	8003596 <memset+0xa>
 8003594:	4770      	bx	lr
 8003596:	f803 1b01 	strb.w	r1, [r3], #1
 800359a:	e7f9      	b.n	8003590 <memset+0x4>

0800359c <_init>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr

080035a8 <_fini>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr
