
Encrypt_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f4  080031f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031f4  080031f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f4  080031f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f4  080031f4  000131f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08003208  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003208  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008af6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b0  00000000  00000000  00028b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001660b  00000000  00000000  0002b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae14  00000000  00000000  00041b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080468  00000000  00000000  0004c91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccd87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e4  00000000  00000000  000ccdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800310c 	.word	0x0800310c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800310c 	.word	0x0800310c

0800014c <WakeUp>:
// CRC https://www.scadacore.com/tools/programming-calculators/online-checksum-calculator/
// Zone encoding table 8-5

uint8_t rec_MasterKey[32];

void WakeUp(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8

	uint8_t data = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Receive(&hi2c2, 0xFE, &data, sizeof(data), 1000); 		// Ver onde fala do 0XFE
 8000156:	1dfa      	adds	r2, r7, #7
 8000158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800015c:	9300      	str	r3, [sp, #0]
 800015e:	2301      	movs	r3, #1
 8000160:	21fe      	movs	r1, #254	; 0xfe
 8000162:	4805      	ldr	r0, [pc, #20]	; (8000178 <WakeUp+0x2c>)
 8000164:	f001 f98a 	bl	800147c <HAL_I2C_Master_Receive>
	HAL_Delay(5); // 2.5 ms para acordar; 45 ms para entrar em sleep
 8000168:	2005      	movs	r0, #5
 800016a:	f000 fc19 	bl	80009a0 <HAL_Delay>
}
 800016e:	bf00      	nop
 8000170:	3708      	adds	r7, #8
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000028 	.word	0x20000028

0800017c <ReadConfig>:

void ReadConfig(uint8_t *readCommand, uint8_t *data_rec ,uint8_t *data_config) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b088      	sub	sp, #32
 8000180:	af02      	add	r7, sp, #8
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]

	WakeUp();
 8000188:	f7ff ffe0 	bl	800014c <WakeUp>
	uint8_t data = 0;
 800018c:	2300      	movs	r3, #0
 800018e:	75fb      	strb	r3, [r7, #23]

	// first read: 0 byte read - should receive an ACK
	HAL_I2C_Master_Receive(&hi2c2, 0xC8, &data, 1, 1000);
 8000190:	f107 0217 	add.w	r2, r7, #23
 8000194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000198:	9300      	str	r3, [sp, #0]
 800019a:	2301      	movs	r3, #1
 800019c:	21c8      	movs	r1, #200	; 0xc8
 800019e:	481d      	ldr	r0, [pc, #116]	; (8000214 <ReadConfig+0x98>)
 80001a0:	f001 f96c 	bl	800147c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80001a4:	2005      	movs	r0, #5
 80001a6:	f000 fbfb 	bl	80009a0 <HAL_Delay>

	// Read 88bytes
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, &data, sizeof(data), 1000);		// Envia 1 byte
 80001aa:	f107 0217 	add.w	r2, r7, #23
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2301      	movs	r3, #1
 80001b6:	21c8      	movs	r1, #200	; 0xc8
 80001b8:	4816      	ldr	r0, [pc, #88]	; (8000214 <ReadConfig+0x98>)
 80001ba:	f001 f861 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80001be:	2005      	movs	r0, #5
 80001c0:	f000 fbee 	bl	80009a0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, 0xC8, data_rec, 4, 1000); 		    	// Recebe 0x04 0x11 0x33 0x43
 80001c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001c8:	9300      	str	r3, [sp, #0]
 80001ca:	2304      	movs	r3, #4
 80001cc:	68ba      	ldr	r2, [r7, #8]
 80001ce:	21c8      	movs	r1, #200	; 0xc8
 80001d0:	4810      	ldr	r0, [pc, #64]	; (8000214 <ReadConfig+0x98>)
 80001d2:	f001 f953 	bl	800147c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80001d6:	2005      	movs	r0, #5
 80001d8:	f000 fbe2 	bl	80009a0 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, readCommand, 8, 1000); 		    // Enviar o comando de leitura
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2308      	movs	r3, #8
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	21c8      	movs	r1, #200	; 0xc8
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <ReadConfig+0x98>)
 80001ea:	f001 f849 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80001ee:	2005      	movs	r0, #5
 80001f0:	f000 fbd6 	bl	80009a0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, 0xC8, data_config, 32, 1000); 	        // Recebe(byte de tamanho, 35 em decimal)..0x01 0x23...
 80001f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2320      	movs	r3, #32
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	21c8      	movs	r1, #200	; 0xc8
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <ReadConfig+0x98>)
 8000202:	f001 f93b 	bl	800147c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000206:	2005      	movs	r0, #5
 8000208:	f000 fbca 	bl	80009a0 <HAL_Delay>
}
 800020c:	bf00      	nop
 800020e:	3718      	adds	r7, #24
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000028 	.word	0x20000028

08000218 <WriteConfigZone>:

void WriteConfigZone(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	b09a      	sub	sp, #104	; 0x68
 800021c:	af02      	add	r7, sp, #8
	// WritePwd1 + ReadPwd1
	// comando para configuração da zona de configuração do slot: 0x00 e 0x01
	uint8_t configSlot0_1[] = {0x03, 0x0B, 0x12, 0x00, 0x05, 0x00, 0x60, 0xE9, 0x70, 0xE8, 0x53, 0x98};
 800021e:	4a4d      	ldr	r2, [pc, #308]	; (8000354 <WriteConfigZone+0x13c>)
 8000220:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000224:	ca07      	ldmia	r2, {r0, r1, r2}
 8000226:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot0_1, sizeof(configSlot0_1), 1000);
 800022a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800022e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	230c      	movs	r3, #12
 8000236:	21c8      	movs	r1, #200	; 0xc8
 8000238:	4847      	ldr	r0, [pc, #284]	; (8000358 <WriteConfigZone+0x140>)
 800023a:	f001 f821 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800023e:	2005      	movs	r0, #5
 8000240:	f000 fbae 	bl	80009a0 <HAL_Delay>

	// DATA0 + DATA1
	// comando para configuração da zona de configuração do slot: 0x02 e 0x03
	uint8_t configSlot2_3[] = {0x03, 0x0B, 0x12, 0x00, 0x06, 0x00,  0x40, 0xE1, 0x80, 0xA1,0xB0, 0x68 };
 8000244:	4a45      	ldr	r2, [pc, #276]	; (800035c <WriteConfigZone+0x144>)
 8000246:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800024a:	ca07      	ldmia	r2, {r0, r1, r2}
 800024c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot2_3, sizeof(configSlot2_3), 1000);
 8000250:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	230c      	movs	r3, #12
 800025c:	21c8      	movs	r1, #200	; 0xc8
 800025e:	483e      	ldr	r0, [pc, #248]	; (8000358 <WriteConfigZone+0x140>)
 8000260:	f001 f80e 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000264:	2005      	movs	r0, #5
 8000266:	f000 fb9b 	bl	80009a0 <HAL_Delay>

	// PASSWORD1 + SECRET1
	// comando para configuração da zona de configuração do slot: 0x04 e 0x05
	uint8_t configSlot4_5[] = {0x03, 0x0B, 0x12, 0x00, 0x07, 0x00, 0x75, 0xC1, 0x60, 0xA0,  0x5B, 0x89};
 800026a:	4a3d      	ldr	r2, [pc, #244]	; (8000360 <WriteConfigZone+0x148>)
 800026c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000270:	ca07      	ldmia	r2, {r0, r1, r2}
 8000272:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot4_5, sizeof(configSlot4_5), 1000);
 8000276:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	230c      	movs	r3, #12
 8000282:	21c8      	movs	r1, #200	; 0xc8
 8000284:	4834      	ldr	r0, [pc, #208]	; (8000358 <WriteConfigZone+0x140>)
 8000286:	f000 fffb 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800028a:	2005      	movs	r0, #5
 800028c:	f000 fb88 	bl	80009a0 <HAL_Delay>

	// PASSWORD2 + SECRET2
	// comando para configuração da zona de configuração do slot: 0x06 e 0x07
	uint8_t configSlot6_7[] = {0x03, 0x0B, 0x12, 0x00, 0x08, 0x00,  0x47, 0xD1, 0x40, 0xB0, 0x2A, 0x61};
 8000290:	4a34      	ldr	r2, [pc, #208]	; (8000364 <WriteConfigZone+0x14c>)
 8000292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000296:	ca07      	ldmia	r2, {r0, r1, r2}
 8000298:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot6_7, sizeof(configSlot6_7), 1000);
 800029c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80002a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	230c      	movs	r3, #12
 80002a8:	21c8      	movs	r1, #200	; 0xc8
 80002aa:	482b      	ldr	r0, [pc, #172]	; (8000358 <WriteConfigZone+0x140>)
 80002ac:	f000 ffe8 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80002b0:	2005      	movs	r0, #5
 80002b2:	f000 fb75 	bl	80009a0 <HAL_Delay>

	// ReadPwd2 + WritePwd2
	// comando para configuração da zona de configuração do slot: 0x08 e 0x09
	uint8_t configSlot8_9[] = {0x03, 0x0B, 0x12, 0x00, 0x09, 0x00, 0x49,  0xCE, 0x49,  0xCE, 0xDB, 0x4C};
 80002b6:	4a2c      	ldr	r2, [pc, #176]	; (8000368 <WriteConfigZone+0x150>)
 80002b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80002be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot8_9, sizeof(configSlot8_9), 1000);
 80002c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80002c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	230c      	movs	r3, #12
 80002ce:	21c8      	movs	r1, #200	; 0xc8
 80002d0:	4821      	ldr	r0, [pc, #132]	; (8000358 <WriteConfigZone+0x140>)
 80002d2:	f000 ffd5 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80002d6:	2005      	movs	r0, #5
 80002d8:	f000 fb62 	bl	80009a0 <HAL_Delay>

	// DATA[2] + DATA[3]
	// comando para configuração da zona de configuração do slot: 0x10 e 0x11
	uint8_t configSlot10_11[] = {0x03, 0x0B, 0x12, 0x00, 0x0A, 0x00, 0x49, 0xC8, 0x89, 0x88, 0xD8, 0xC0};
 80002dc:	4a23      	ldr	r2, [pc, #140]	; (800036c <WriteConfigZone+0x154>)
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot10_11, sizeof(configSlot10_11), 1000);
 80002e8:	f107 0218 	add.w	r2, r7, #24
 80002ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	230c      	movs	r3, #12
 80002f4:	21c8      	movs	r1, #200	; 0xc8
 80002f6:	4818      	ldr	r0, [pc, #96]	; (8000358 <WriteConfigZone+0x140>)
 80002f8:	f000 ffc2 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80002fc:	2005      	movs	r0, #5
 80002fe:	f000 fb4f 	bl	80009a0 <HAL_Delay>

	// PASSWORD[3] + SECRET[3]
	// comando para configuração da zona de configuração do slot: 0x12 e 0x13
	uint8_t configSlot12_13[] = {0x03, 0x0B, 0x12, 0x00, 0x0B, 0x00, 0x4D, 0xD8,  0x49, 0x90, 0xAC, 0x4A };
 8000302:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <WriteConfigZone+0x158>)
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	ca07      	ldmia	r2, {r0, r1, r2}
 800030a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot12_13, sizeof(configSlot12_13), 1000);
 800030e:	f107 020c 	add.w	r2, r7, #12
 8000312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	230c      	movs	r3, #12
 800031a:	21c8      	movs	r1, #200	; 0xc8
 800031c:	480e      	ldr	r0, [pc, #56]	; (8000358 <WriteConfigZone+0x140>)
 800031e:	f000 ffaf 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000322:	2005      	movs	r0, #5
 8000324:	f000 fb3c 	bl	80009a0 <HAL_Delay>

	// MASTERKEY + DATA[4]
	// comando para configuração da zona de configuração do slot: 0x14 e 0x15
	uint8_t configSlot14_15[] = {0x03, 0x0B, 0x12, 0x00, 0x0C, 0x00, 0x0E, 0x0E, 0x49, 0x88, 0x2F, 0xE5 };
 8000328:	4a12      	ldr	r2, [pc, #72]	; (8000374 <WriteConfigZone+0x15c>)
 800032a:	463b      	mov	r3, r7
 800032c:	ca07      	ldmia	r2, {r0, r1, r2}
 800032e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_I2C_Master_Transmit(&hi2c2, 0xC8, configSlot14_15, sizeof(configSlot14_15), 1000);
 8000332:	463a      	mov	r2, r7
 8000334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	230c      	movs	r3, #12
 800033c:	21c8      	movs	r1, #200	; 0xc8
 800033e:	4806      	ldr	r0, [pc, #24]	; (8000358 <WriteConfigZone+0x140>)
 8000340:	f000 ff9e 	bl	8001280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000344:	2005      	movs	r0, #5
 8000346:	f000 fb2b 	bl	80009a0 <HAL_Delay>
}
 800034a:	bf00      	nop
 800034c:	3760      	adds	r7, #96	; 0x60
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	08003124 	.word	0x08003124
 8000358:	20000028 	.word	0x20000028
 800035c:	08003130 	.word	0x08003130
 8000360:	0800313c 	.word	0x0800313c
 8000364:	08003148 	.word	0x08003148
 8000368:	08003154 	.word	0x08003154
 800036c:	08003160 	.word	0x08003160
 8000370:	0800316c 	.word	0x0800316c
 8000374:	08003178 	.word	0x08003178

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b0b2      	sub	sp, #200	; 0xc8
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f000 faad 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 f8a7 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000386:	f000 f945 	bl	8000614 <MX_GPIO_Init>
  MX_USART1_Init();
 800038a:	f000 f917 	bl	80005bc <MX_USART1_Init>
  MX_I2C2_Init();
 800038e:	f000 f8e7 	bl	8000560 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  uint8_t readCommand0[8] = {0x03, 0x07, 0x02, 0x80, 0x00, 0x00, 0x09, 0xAD}; // read -> param1 = zone = 1000 0000
 8000392:	4a48      	ldr	r2, [pc, #288]	; (80004b4 <main+0x13c>)
 8000394:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000398:	e892 0003 	ldmia.w	r2, {r0, r1}
 800039c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand1[8] = {0x03, 0x07, 0x02, 0x80, 0x08, 0x00,0x0a, 0x4d}; // read -> param1 = zone = 1000 0000
 80003a0:	4a45      	ldr	r2, [pc, #276]	; (80004b8 <main+0x140>)
 80003a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80003a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003aa:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand2[8] = {0x03, 0x07, 0x02, 0x00, 0x10, 0x00, 0x1d, 0x9d}; // read -> param1 = zone = 1000 0000
 80003ae:	4a43      	ldr	r2, [pc, #268]	; (80004bc <main+0x144>)
 80003b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80003b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003b8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand3[8] = {0x03, 0x07, 0x02, 0x00, 0x11, 0x00, 0x14, 0x1d};
 80003bc:	4a40      	ldr	r2, [pc, #256]	; (80004c0 <main+0x148>)
 80003be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80003c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand4[8] = {0x03, 0x07, 0x02, 0x00, 0x12, 0x00, 0x1b, 0x1d};
 80003ca:	4a3e      	ldr	r2, [pc, #248]	; (80004c4 <main+0x14c>)
 80003cc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80003d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003d4:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand5[8] = {0x03, 0x07, 0x02, 0x00, 0x13, 0x00, 0x12, 0x9d};
 80003d8:	4a3b      	ldr	r2, [pc, #236]	; (80004c8 <main+0x150>)
 80003da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80003de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003e2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand6[8] = {0x03, 0x07, 0x02, 0x00, 0x14, 0x00, 0x1e, 0xdd};
 80003e6:	4a39      	ldr	r2, [pc, #228]	; (80004cc <main+0x154>)
 80003e8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80003ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003f0:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand7[8] = {0x03, 0x07, 0x02, 0x00, 0x15, 0x00, 0x17, 0x5d};
 80003f4:	4a36      	ldr	r2, [pc, #216]	; (80004d0 <main+0x158>)
 80003f6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003fe:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WakeUp();
 8000402:	f7ff fea3 	bl	800014c <WakeUp>
	  ReadConfig(readCommand0, read_byte1, read_config);
 8000406:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800040a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800040e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff feb2 	bl	800017c <ReadConfig>
	  WriteConfigZone();
 8000418:	f7ff fefe 	bl	8000218 <WriteConfigZone>
	  ReadConfig(readCommand0, read_byte, read_config0);
 800041c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000420:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000424:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fea7 	bl	800017c <ReadConfig>
	  ReadConfig(readCommand1, read_byte, read_config1);
 800042e:	f107 021c 	add.w	r2, r7, #28
 8000432:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000436:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fe9e 	bl	800017c <ReadConfig>
	  ReadConfig(readCommand2, read_byte, read_config2);
 8000440:	f107 0218 	add.w	r2, r7, #24
 8000444:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000448:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff fe95 	bl	800017c <ReadConfig>
	  ReadConfig(readCommand3, read_byte2, read_config3);
 8000452:	f107 0214 	add.w	r2, r7, #20
 8000456:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800045a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff fe8c 	bl	800017c <ReadConfig>
	  ReadConfig(readCommand4, read_byte, read_config4);
 8000464:	f107 0210 	add.w	r2, r7, #16
 8000468:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800046c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff fe83 	bl	800017c <ReadConfig>
	  ReadConfig(readCommand5, read_byte, read_config5);
 8000476:	f107 020c 	add.w	r2, r7, #12
 800047a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800047e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff fe7a 	bl	800017c <ReadConfig>
	  ReadConfig(readCommand6, read_byte, read_config6);
 8000488:	f107 0208 	add.w	r2, r7, #8
 800048c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000490:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff fe71 	bl	800017c <ReadConfig>
	  ReadConfig(readCommand7, read_byte, read_config7);
 800049a:	1d3a      	adds	r2, r7, #4
 800049c:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80004a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fe69 	bl	800017c <ReadConfig>

	  HAL_Delay(10);
 80004aa:	200a      	movs	r0, #10
 80004ac:	f000 fa78 	bl	80009a0 <HAL_Delay>
	  WakeUp();
 80004b0:	e7a7      	b.n	8000402 <main+0x8a>
 80004b2:	bf00      	nop
 80004b4:	0800318c 	.word	0x0800318c
 80004b8:	08003194 	.word	0x08003194
 80004bc:	0800319c 	.word	0x0800319c
 80004c0:	080031a4 	.word	0x080031a4
 80004c4:	080031ac 	.word	0x080031ac
 80004c8:	080031b4 	.word	0x080031b4
 80004cc:	080031bc 	.word	0x080031bc
 80004d0:	080031c4 	.word	0x080031c4

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b090      	sub	sp, #64	; 0x40
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fe0a 	bl	80030fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000504:	2301      	movs	r3, #1
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000508:	2302      	movs	r3, #2
 800050a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000512:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000516:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	f107 0318 	add.w	r3, r7, #24
 800051c:	4618      	mov	r0, r3
 800051e:	f001 fd39 	bl	8001f94 <HAL_RCC_OscConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000528:	f000 f8ae 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	230f      	movs	r3, #15
 800052e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000530:	2302      	movs	r3, #2
 8000532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2102      	movs	r1, #2
 8000546:	4618      	mov	r0, r3
 8000548:	f001 ffa6 	bl	8002498 <HAL_RCC_ClockConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000552:	f000 f899 	bl	8000688 <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3740      	adds	r7, #64	; 0x40
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C2_Init+0x50>)
 8000566:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <MX_I2C2_Init+0x54>)
 8000568:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C2_Init+0x50>)
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <MX_I2C2_Init+0x58>)
 800056e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C2_Init+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_I2C2_Init+0x50>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_I2C2_Init+0x50>)
 800057e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000582:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000584:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <MX_I2C2_Init+0x50>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_I2C2_Init+0x50>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <MX_I2C2_Init+0x50>)
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_I2C2_Init+0x50>)
 8000598:	2200      	movs	r2, #0
 800059a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_I2C2_Init+0x50>)
 800059e:	f000 fd2b 	bl	8000ff8 <HAL_I2C_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80005a8:	f000 f86e 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000028 	.word	0x20000028
 80005b4:	40005800 	.word	0x40005800
 80005b8:	000186a0 	.word	0x000186a0

080005bc <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_USART1_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_USART1_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART1_Init+0x50>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_USART1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_USART1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_USART1_Init+0x50>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_USART1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_USART1_Init+0x50>)
 80005fa:	f002 f8e5 	bl	80027c8 <HAL_USART_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f840 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000007c 	.word	0x2000007c
 8000610:	40013800 	.word	0x40013800

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_GPIO_Init+0x70>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a19      	ldr	r2, [pc, #100]	; (8000684 <MX_GPIO_Init+0x70>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_GPIO_Init+0x70>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_GPIO_Init+0x70>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <MX_GPIO_Init+0x70>)
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_GPIO_Init+0x70>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0320 	and.w	r3, r3, #32
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_GPIO_Init+0x70>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <MX_GPIO_Init+0x70>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_GPIO_Init+0x70>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_GPIO_Init+0x70>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a07      	ldr	r2, [pc, #28]	; (8000684 <MX_GPIO_Init+0x70>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_GPIO_Init+0x70>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	40021000 	.word	0x40021000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_MspInit+0x5c>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <HAL_MspInit+0x5c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_MspInit+0x5c>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_MspInit+0x5c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_MspInit+0x5c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_MspInit+0x5c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_MspInit+0x60>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_MspInit+0x60>)
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010000 	.word	0x40010000

080006f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a16      	ldr	r2, [pc, #88]	; (800076c <HAL_I2C_MspInit+0x74>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d124      	bne.n	8000762 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_I2C_MspInit+0x78>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_I2C_MspInit+0x78>)
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_I2C_MspInit+0x78>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000730:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000736:	2312      	movs	r3, #18
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <HAL_I2C_MspInit+0x7c>)
 8000746:	f000 fad3 	bl	8000cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_I2C_MspInit+0x78>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_I2C_MspInit+0x78>)
 8000750:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_I2C_MspInit+0x78>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40005800 	.word	0x40005800
 8000770:	40021000 	.word	0x40021000
 8000774:	40010c00 	.word	0x40010c00

08000778 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_USART_MspInit+0x9c>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d139      	bne.n	800080c <HAL_USART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <HAL_USART_MspInit+0xa0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a1e      	ldr	r2, [pc, #120]	; (8000818 <HAL_USART_MspInit+0xa0>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_USART_MspInit+0xa0>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_USART_MspInit+0xa0>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a18      	ldr	r2, [pc, #96]	; (8000818 <HAL_USART_MspInit+0xa0>)
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_USART_MspInit+0xa0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	480f      	ldr	r0, [pc, #60]	; (800081c <HAL_USART_MspInit+0xa4>)
 80007de:	f000 fa87 	bl	8000cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	4809      	ldr	r0, [pc, #36]	; (800081c <HAL_USART_MspInit+0xa4>)
 80007f8:	f000 fa7a 	bl	8000cf0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2025      	movs	r0, #37	; 0x25
 8000802:	f000 f9c8 	bl	8000b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000806:	2025      	movs	r0, #37	; 0x25
 8000808:	f000 f9e1 	bl	8000bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40013800 	.word	0x40013800
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000866:	f000 f87f 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <USART1_IRQHandler+0x10>)
 8000876:	f001 ffe9 	bl	800284c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000007c 	.word	0x2000007c

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	; (80008c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	; (80008d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008b6:	f7ff ffe5 	bl	8000884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f002 fbfb 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fd5b 	bl	8000378 <main>
  bx lr
 80008c2:	4770      	bx	lr
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008cc:	080031fc 	.word	0x080031fc
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d4:	200000c4 	.word	0x200000c4

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_Init+0x28>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_Init+0x28>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f947 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	200f      	movs	r0, #15
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff fecc 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f95f 	bl	8000bea <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f927 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000008 	.word	0x20000008
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_IncTick+0x1c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_IncTick+0x20>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <HAL_IncTick+0x20>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	20000008 	.word	0x20000008
 8000988:	200000c0 	.word	0x200000c0

0800098c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return uwTick;
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <HAL_GetTick+0x10>)
 8000992:	681b      	ldr	r3, [r3, #0]
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	200000c0 	.word	0x200000c0

080009a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a8:	f7ff fff0 	bl	800098c <HAL_GetTick>
 80009ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b8:	d005      	beq.n	80009c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_Delay+0x44>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4413      	add	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c6:	bf00      	nop
 80009c8:	f7ff ffe0 	bl	800098c <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d8f7      	bhi.n	80009c8 <HAL_Delay+0x28>
  {
  }
}
 80009d8:	bf00      	nop
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4906      	ldr	r1, [pc, #24]	; (8000a80 <__NVIC_EnableIRQ+0x34>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff90 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff2d 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba8:	f7ff ff42 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	6978      	ldr	r0, [r7, #20]
 8000bb4:	f7ff ff90 	bl	8000ad8 <NVIC_EncodePriority>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff5f 	bl	8000a84 <__NVIC_SetPriority>
}
 8000bc6:	bf00      	nop
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff35 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffa2 	bl	8000b3c <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d005      	beq.n	8000c26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e051      	b.n	8000cca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 020e 	bic.w	r2, r2, #14
 8000c34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0201 	bic.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <HAL_DMA_Abort_IT+0xd0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d029      	beq.n	8000ca4 <HAL_DMA_Abort_IT+0xa0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <HAL_DMA_Abort_IT+0xd4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d022      	beq.n	8000ca0 <HAL_DMA_Abort_IT+0x9c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <HAL_DMA_Abort_IT+0xd8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d01a      	beq.n	8000c9a <HAL_DMA_Abort_IT+0x96>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_DMA_Abort_IT+0xdc>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d012      	beq.n	8000c94 <HAL_DMA_Abort_IT+0x90>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <HAL_DMA_Abort_IT+0xe0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00a      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x8a>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_DMA_Abort_IT+0xe4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d102      	bne.n	8000c88 <HAL_DMA_Abort_IT+0x84>
 8000c82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c86:	e00e      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xa2>
 8000c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c8c:	e00b      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xa2>
 8000c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c92:	e008      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xa2>
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	e005      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xa2>
 8000c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9e:	e002      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xa2>
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	e000      	b.n	8000ca6 <HAL_DMA_Abort_IT+0xa2>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <HAL_DMA_Abort_IT+0xe8>)
 8000ca8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2201      	movs	r2, #1
 8000cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	4798      	blx	r3
    } 
  }
  return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40020008 	.word	0x40020008
 8000cd8:	4002001c 	.word	0x4002001c
 8000cdc:	40020030 	.word	0x40020030
 8000ce0:	40020044 	.word	0x40020044
 8000ce4:	40020058 	.word	0x40020058
 8000ce8:	4002006c 	.word	0x4002006c
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b08b      	sub	sp, #44	; 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e169      	b.n	8000fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d04:	2201      	movs	r2, #1
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8158 	bne.w	8000fd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4a9a      	ldr	r2, [pc, #616]	; (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05e      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d2c:	4a98      	ldr	r2, [pc, #608]	; (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d875      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d32:	4a98      	ldr	r2, [pc, #608]	; (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d058      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d38:	4a96      	ldr	r2, [pc, #600]	; (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d86f      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d3e:	4a96      	ldr	r2, [pc, #600]	; (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d052      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d44:	4a94      	ldr	r2, [pc, #592]	; (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d869      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d4a:	4a94      	ldr	r2, [pc, #592]	; (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d04c      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d50:	4a92      	ldr	r2, [pc, #584]	; (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d863      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d56:	4a92      	ldr	r2, [pc, #584]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d046      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d5c:	4a90      	ldr	r2, [pc, #576]	; (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d85d      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d82a      	bhi.n	8000dbc <HAL_GPIO_Init+0xcc>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d859      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <HAL_GPIO_Init+0x80>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000dd7 	.word	0x08000dd7
 8000d7c:	08000e19 	.word	0x08000e19
 8000d80:	08000e1f 	.word	0x08000e1f
 8000d84:	08000e1f 	.word	0x08000e1f
 8000d88:	08000e1f 	.word	0x08000e1f
 8000d8c:	08000e1f 	.word	0x08000e1f
 8000d90:	08000e1f 	.word	0x08000e1f
 8000d94:	08000e1f 	.word	0x08000e1f
 8000d98:	08000e1f 	.word	0x08000e1f
 8000d9c:	08000e1f 	.word	0x08000e1f
 8000da0:	08000e1f 	.word	0x08000e1f
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000e1f 	.word	0x08000e1f
 8000dac:	08000e1f 	.word	0x08000e1f
 8000db0:	08000e1f 	.word	0x08000e1f
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000de1 	.word	0x08000de1
 8000dbc:	4a79      	ldr	r2, [pc, #484]	; (8000fa4 <HAL_GPIO_Init+0x2b4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc2:	e02c      	b.n	8000e1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e029      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e024      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e01f      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	330c      	adds	r3, #12
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e01a      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df2:	2304      	movs	r3, #4
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e013      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	611a      	str	r2, [r3, #16]
          break;
 8000e0a:	e009      	b.n	8000e20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	615a      	str	r2, [r3, #20]
          break;
 8000e16:	e003      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          break;
 8000e1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	; 0xff
 8000e24:	d801      	bhi.n	8000e2a <HAL_GPIO_Init+0x13a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	e001      	b.n	8000e2e <HAL_GPIO_Init+0x13e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2bff      	cmp	r3, #255	; 0xff
 8000e34:	d802      	bhi.n	8000e3c <HAL_GPIO_Init+0x14c>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x152>
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	3b08      	subs	r3, #8
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	210f      	movs	r1, #15
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	6a39      	ldr	r1, [r7, #32]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80b1 	beq.w	8000fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e70:	4b4d      	ldr	r3, [pc, #308]	; (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e88:	4a48      	ldr	r2, [pc, #288]	; (8000fac <HAL_GPIO_Init+0x2bc>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a40      	ldr	r2, [pc, #256]	; (8000fb0 <HAL_GPIO_Init+0x2c0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d013      	beq.n	8000edc <HAL_GPIO_Init+0x1ec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3f      	ldr	r2, [pc, #252]	; (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <HAL_GPIO_Init+0x1e8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	; (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3d      	ldr	r2, [pc, #244]	; (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d101      	bne.n	8000ed0 <HAL_GPIO_Init+0x1e0>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000edc:	2300      	movs	r3, #0
 8000ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eee:	492f      	ldr	r1, [pc, #188]	; (8000fac <HAL_GPIO_Init+0x2bc>)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	492c      	ldr	r1, [pc, #176]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	600b      	str	r3, [r1, #0]
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4928      	ldr	r1, [pc, #160]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	4922      	ldr	r1, [pc, #136]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f3e:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	491e      	ldr	r1, [pc, #120]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	4918      	ldr	r1, [pc, #96]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	608b      	str	r3, [r1, #8]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4914      	ldr	r1, [pc, #80]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d021      	beq.n	8000fc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60cb      	str	r3, [r1, #12]
 8000f8c:	e021      	b.n	8000fd2 <HAL_GPIO_Init+0x2e2>
 8000f8e:	bf00      	nop
 8000f90:	10320000 	.word	0x10320000
 8000f94:	10310000 	.word	0x10310000
 8000f98:	10220000 	.word	0x10220000
 8000f9c:	10210000 	.word	0x10210000
 8000fa0:	10120000 	.word	0x10120000
 8000fa4:	10110000 	.word	0x10110000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40011400 	.word	0x40011400
 8000fc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	4909      	ldr	r1, [pc, #36]	; (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f47f ae8e 	bne.w	8000d04 <HAL_GPIO_Init+0x14>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	372c      	adds	r7, #44	; 0x2c
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e12b      	b.n	8001262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d106      	bne.n	8001024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fb6a 	bl	80006f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2224      	movs	r2, #36	; 0x24
 8001028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800104a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800105a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800105c:	f001 fb6e 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8001060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a81      	ldr	r2, [pc, #516]	; (800126c <HAL_I2C_Init+0x274>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d807      	bhi.n	800107c <HAL_I2C_Init+0x84>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4a80      	ldr	r2, [pc, #512]	; (8001270 <HAL_I2C_Init+0x278>)
 8001070:	4293      	cmp	r3, r2
 8001072:	bf94      	ite	ls
 8001074:	2301      	movls	r3, #1
 8001076:	2300      	movhi	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	e006      	b.n	800108a <HAL_I2C_Init+0x92>
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4a7d      	ldr	r2, [pc, #500]	; (8001274 <HAL_I2C_Init+0x27c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	bf94      	ite	ls
 8001084:	2301      	movls	r3, #1
 8001086:	2300      	movhi	r3, #0
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e0e7      	b.n	8001262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4a78      	ldr	r2, [pc, #480]	; (8001278 <HAL_I2C_Init+0x280>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	0c9b      	lsrs	r3, r3, #18
 800109c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a6a      	ldr	r2, [pc, #424]	; (800126c <HAL_I2C_Init+0x274>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d802      	bhi.n	80010cc <HAL_I2C_Init+0xd4>
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	3301      	adds	r3, #1
 80010ca:	e009      	b.n	80010e0 <HAL_I2C_Init+0xe8>
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010d2:	fb02 f303 	mul.w	r3, r2, r3
 80010d6:	4a69      	ldr	r2, [pc, #420]	; (800127c <HAL_I2C_Init+0x284>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	099b      	lsrs	r3, r3, #6
 80010de:	3301      	adds	r3, #1
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	430b      	orrs	r3, r1
 80010e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	495c      	ldr	r1, [pc, #368]	; (800126c <HAL_I2C_Init+0x274>)
 80010fc:	428b      	cmp	r3, r1
 80010fe:	d819      	bhi.n	8001134 <HAL_I2C_Init+0x13c>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	1e59      	subs	r1, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fbb1 f3f3 	udiv	r3, r1, r3
 800110e:	1c59      	adds	r1, r3, #1
 8001110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001114:	400b      	ands	r3, r1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00a      	beq.n	8001130 <HAL_I2C_Init+0x138>
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	1e59      	subs	r1, r3, #1
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fbb1 f3f3 	udiv	r3, r1, r3
 8001128:	3301      	adds	r3, #1
 800112a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112e:	e051      	b.n	80011d4 <HAL_I2C_Init+0x1dc>
 8001130:	2304      	movs	r3, #4
 8001132:	e04f      	b.n	80011d4 <HAL_I2C_Init+0x1dc>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d111      	bne.n	8001160 <HAL_I2C_Init+0x168>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1e58      	subs	r0, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6859      	ldr	r1, [r3, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	440b      	add	r3, r1
 800114a:	fbb0 f3f3 	udiv	r3, r0, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001154:	2b00      	cmp	r3, #0
 8001156:	bf0c      	ite	eq
 8001158:	2301      	moveq	r3, #1
 800115a:	2300      	movne	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	e012      	b.n	8001186 <HAL_I2C_Init+0x18e>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1e58      	subs	r0, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6859      	ldr	r1, [r3, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	0099      	lsls	r1, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	fbb0 f3f3 	udiv	r3, r0, r3
 8001176:	3301      	adds	r3, #1
 8001178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800117c:	2b00      	cmp	r3, #0
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_I2C_Init+0x196>
 800118a:	2301      	movs	r3, #1
 800118c:	e022      	b.n	80011d4 <HAL_I2C_Init+0x1dc>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10e      	bne.n	80011b4 <HAL_I2C_Init+0x1bc>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1e58      	subs	r0, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6859      	ldr	r1, [r3, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	440b      	add	r3, r1
 80011a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b2:	e00f      	b.n	80011d4 <HAL_I2C_Init+0x1dc>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	1e58      	subs	r0, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	0099      	lsls	r1, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ca:	3301      	adds	r3, #1
 80011cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	6809      	ldr	r1, [r1, #0]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69da      	ldr	r2, [r3, #28]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6911      	ldr	r1, [r2, #16]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68d2      	ldr	r2, [r2, #12]
 800120e:	4311      	orrs	r1, r2
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6812      	ldr	r2, [r2, #0]
 8001214:	430b      	orrs	r3, r1
 8001216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2220      	movs	r2, #32
 800124e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	000186a0 	.word	0x000186a0
 8001270:	001e847f 	.word	0x001e847f
 8001274:	003d08ff 	.word	0x003d08ff
 8001278:	431bde83 	.word	0x431bde83
 800127c:	10624dd3 	.word	0x10624dd3

08001280 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af02      	add	r7, sp, #8
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	461a      	mov	r2, r3
 800128c:	460b      	mov	r3, r1
 800128e:	817b      	strh	r3, [r7, #10]
 8001290:	4613      	mov	r3, r2
 8001292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff fb7a 	bl	800098c <HAL_GetTick>
 8001298:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b20      	cmp	r3, #32
 80012a4:	f040 80e0 	bne.w	8001468 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2319      	movs	r3, #25
 80012ae:	2201      	movs	r2, #1
 80012b0:	4970      	ldr	r1, [pc, #448]	; (8001474 <HAL_I2C_Master_Transmit+0x1f4>)
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 fc92 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012be:	2302      	movs	r3, #2
 80012c0:	e0d3      	b.n	800146a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_I2C_Master_Transmit+0x50>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e0cc      	b.n	800146a <HAL_I2C_Master_Transmit+0x1ea>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d007      	beq.n	80012f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0201 	orr.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2221      	movs	r2, #33	; 0x21
 800130a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2210      	movs	r2, #16
 8001312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	893a      	ldrh	r2, [r7, #8]
 8001326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132c:	b29a      	uxth	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4a50      	ldr	r2, [pc, #320]	; (8001478 <HAL_I2C_Master_Transmit+0x1f8>)
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001338:	8979      	ldrh	r1, [r7, #10]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	6a3a      	ldr	r2, [r7, #32]
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 fafc 	bl	800193c <I2C_MasterRequestWrite>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e08d      	b.n	800146a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001364:	e066      	b.n	8001434 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	6a39      	ldr	r1, [r7, #32]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fd0c 	bl	8001d88 <I2C_WaitOnTXEFlagUntilTimeout>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00d      	beq.n	8001392 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2b04      	cmp	r3, #4
 800137c:	d107      	bne.n	800138e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800138c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e06b      	b.n	800146a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	3b01      	subs	r3, #1
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ba:	3b01      	subs	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d11b      	bne.n	8001408 <HAL_I2C_Master_Transmit+0x188>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d017      	beq.n	8001408 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001400:	3b01      	subs	r3, #1
 8001402:	b29a      	uxth	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	6a39      	ldr	r1, [r7, #32]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 fcfc 	bl	8001e0a <I2C_WaitOnBTFFlagUntilTimeout>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00d      	beq.n	8001434 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800142e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e01a      	b.n	800146a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001438:	2b00      	cmp	r3, #0
 800143a:	d194      	bne.n	8001366 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800144a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2220      	movs	r2, #32
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001468:	2302      	movs	r3, #2
  }
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	00100002 	.word	0x00100002
 8001478:	ffff0000 	.word	0xffff0000

0800147c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08c      	sub	sp, #48	; 0x30
 8001480:	af02      	add	r7, sp, #8
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	607a      	str	r2, [r7, #4]
 8001486:	461a      	mov	r2, r3
 8001488:	460b      	mov	r3, r1
 800148a:	817b      	strh	r3, [r7, #10]
 800148c:	4613      	mov	r3, r2
 800148e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff fa7a 	bl	800098c <HAL_GetTick>
 8001498:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	f040 823f 	bne.w	8001926 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2319      	movs	r3, #25
 80014ae:	2201      	movs	r2, #1
 80014b0:	497f      	ldr	r1, [pc, #508]	; (80016b0 <HAL_I2C_Master_Receive+0x234>)
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fb92 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80014be:	2302      	movs	r3, #2
 80014c0:	e232      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_I2C_Master_Receive+0x54>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e22b      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d007      	beq.n	80014f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001504:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2222      	movs	r2, #34	; 0x22
 800150a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2210      	movs	r2, #16
 8001512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4a5f      	ldr	r2, [pc, #380]	; (80016b4 <HAL_I2C_Master_Receive+0x238>)
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001538:	8979      	ldrh	r1, [r7, #10]
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fa7e 	bl	8001a40 <I2C_MasterRequestRead>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e1ec      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001552:	2b00      	cmp	r3, #0
 8001554:	d113      	bne.n	800157e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e1c0      	b.n	8001900 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	2b01      	cmp	r3, #1
 8001584:	d11e      	bne.n	80015c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001594:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001596:	b672      	cpsid	i
}
 8001598:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015c0:	b662      	cpsie	i
}
 80015c2:	e035      	b.n	8001630 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d11e      	bne.n	800160a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001604:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001606:	b662      	cpsie	i
}
 8001608:	e012      	b.n	8001630 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001630:	e166      	b.n	8001900 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	2b03      	cmp	r3, #3
 8001638:	f200 811f 	bhi.w	800187a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001640:	2b01      	cmp	r3, #1
 8001642:	d123      	bne.n	800168c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fc1f 	bl	8001e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e167      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	3b01      	subs	r3, #1
 8001676:	b29a      	uxth	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001680:	b29b      	uxth	r3, r3
 8001682:	3b01      	subs	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800168a:	e139      	b.n	8001900 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	2b02      	cmp	r3, #2
 8001692:	d152      	bne.n	800173a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800169a:	2200      	movs	r2, #0
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <HAL_I2C_Master_Receive+0x23c>)
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fa9c 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d008      	beq.n	80016bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e13c      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
 80016ae:	bf00      	nop
 80016b0:	00100002 	.word	0x00100002
 80016b4:	ffff0000 	.word	0xffff0000
 80016b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	3b01      	subs	r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001702:	b662      	cpsie	i
}
 8001704:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	3b01      	subs	r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001738:	e0e2      	b.n	8001900 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001740:	2200      	movs	r2, #0
 8001742:	497b      	ldr	r1, [pc, #492]	; (8001930 <HAL_I2C_Master_Receive+0x4b4>)
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 fa49 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0e9      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001762:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800179a:	4b66      	ldr	r3, [pc, #408]	; (8001934 <HAL_I2C_Master_Receive+0x4b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	4a65      	ldr	r2, [pc, #404]	; (8001938 <HAL_I2C_Master_Receive+0x4bc>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0a1a      	lsrs	r2, r3, #8
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00da      	lsls	r2, r3, #3
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d118      	bne.n	80017f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2220      	movs	r2, #32
 80017ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80017e2:	b662      	cpsie	i
}
 80017e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e09a      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d1d9      	bne.n	80017b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	691a      	ldr	r2, [r3, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29b      	uxth	r3, r3
 800183a:	3b01      	subs	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001842:	b662      	cpsie	i
}
 8001844:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001878:	e042      	b.n	8001900 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fb04 	bl	8001e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e04c      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d118      	bne.n	8001900 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	f47f ae94 	bne.w	8001632 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2220      	movs	r2, #32
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
  }
}
 8001928:	4618      	mov	r0, r3
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	00010004 	.word	0x00010004
 8001934:	20000000 	.word	0x20000000
 8001938:	14f8b589 	.word	0x14f8b589

0800193c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	460b      	mov	r3, r1
 800194a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d006      	beq.n	8001966 <I2C_MasterRequestWrite+0x2a>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d003      	beq.n	8001966 <I2C_MasterRequestWrite+0x2a>
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001964:	d108      	bne.n	8001978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e00b      	b.n	8001990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	2b12      	cmp	r3, #18
 800197e:	d107      	bne.n	8001990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f91d 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b6:	d103      	bne.n	80019c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e035      	b.n	8001a30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019cc:	d108      	bne.n	80019e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	e01b      	b.n	8001a18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019e0:	897b      	ldrh	r3, [r7, #10]
 80019e2:	11db      	asrs	r3, r3, #7
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f003 0306 	and.w	r3, r3, #6
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	f063 030f 	orn	r3, r3, #15
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	490e      	ldr	r1, [pc, #56]	; (8001a38 <I2C_MasterRequestWrite+0xfc>)
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f943 	bl	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e010      	b.n	8001a30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a0e:	897b      	ldrh	r3, [r7, #10]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <I2C_MasterRequestWrite+0x100>)
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f933 	bl	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	00010008 	.word	0x00010008
 8001a3c:	00010002 	.word	0x00010002

08001a40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d006      	beq.n	8001a7a <I2C_MasterRequestRead+0x3a>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d003      	beq.n	8001a7a <I2C_MasterRequestRead+0x3a>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a78:	d108      	bne.n	8001a8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00b      	b.n	8001aa4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	2b11      	cmp	r3, #17
 8001a92:	d107      	bne.n	8001aa4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f893 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00d      	beq.n	8001ad8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aca:	d103      	bne.n	8001ad4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e079      	b.n	8001bcc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ae0:	d108      	bne.n	8001af4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	e05f      	b.n	8001bb4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001af4:	897b      	ldrh	r3, [r7, #10]
 8001af6:	11db      	asrs	r3, r3, #7
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f003 0306 	and.w	r3, r3, #6
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f063 030f 	orn	r3, r3, #15
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4930      	ldr	r1, [pc, #192]	; (8001bd4 <I2C_MasterRequestRead+0x194>)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f8b9 	bl	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e054      	b.n	8001bcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b22:	897b      	ldrh	r3, [r7, #10]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4929      	ldr	r1, [pc, #164]	; (8001bd8 <I2C_MasterRequestRead+0x198>)
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f8a9 	bl	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e044      	b.n	8001bcc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 f831 	bl	8001bdc <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00d      	beq.n	8001b9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b8e:	d103      	bne.n	8001b98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e017      	b.n	8001bcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	11db      	asrs	r3, r3, #7
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f003 0306 	and.w	r3, r3, #6
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f063 030e 	orn	r3, r3, #14
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <I2C_MasterRequestRead+0x198>)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f865 	bl	8001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	00010008 	.word	0x00010008
 8001bd8:	00010002 	.word	0x00010002

08001bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	4613      	mov	r3, r2
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bec:	e025      	b.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d021      	beq.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7fe fec9 	bl	800098c <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d116      	bne.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f043 0220 	orr.w	r2, r3, #32
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e023      	b.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	0c1b      	lsrs	r3, r3, #16
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d10d      	bne.n	8001c60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	e00c      	b.n	8001c7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf0c      	ite	eq
 8001c72:	2301      	moveq	r3, #1
 8001c74:	2300      	movne	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d0b6      	beq.n	8001bee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c98:	e051      	b.n	8001d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695b      	ldr	r3, [r3, #20]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca8:	d123      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f043 0204 	orr.w	r2, r3, #4
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e046      	b.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d021      	beq.n	8001d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfa:	f7fe fe47 	bl	800098c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d302      	bcc.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d116      	bne.n	8001d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f043 0220 	orr.w	r2, r3, #32
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e020      	b.n	8001d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	0c1b      	lsrs	r3, r3, #16
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d10c      	bne.n	8001d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4013      	ands	r3, r2
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e00b      	b.n	8001d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf14      	ite	ne
 8001d74:	2301      	movne	r3, #1
 8001d76:	2300      	moveq	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d18d      	bne.n	8001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d94:	e02d      	b.n	8001df2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f8ce 	bl	8001f38 <I2C_IsAcknowledgeFailed>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e02d      	b.n	8001e02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d021      	beq.n	8001df2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dae:	f7fe fded 	bl	800098c <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d302      	bcc.n	8001dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d116      	bne.n	8001df2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f043 0220 	orr.w	r2, r3, #32
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e007      	b.n	8001e02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d1ca      	bne.n	8001d96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e16:	e02d      	b.n	8001e74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f88d 	bl	8001f38 <I2C_IsAcknowledgeFailed>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e02d      	b.n	8001e84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2e:	d021      	beq.n	8001e74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e30:	f7fe fdac 	bl	800098c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d302      	bcc.n	8001e46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d116      	bne.n	8001e74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e007      	b.n	8001e84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d1ca      	bne.n	8001e18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e98:	e042      	b.n	8001f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b10      	cmp	r3, #16
 8001ea6:	d119      	bne.n	8001edc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0210 	mvn.w	r2, #16
 8001eb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e029      	b.n	8001f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001edc:	f7fe fd56 	bl	800098c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d302      	bcc.n	8001ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e007      	b.n	8001f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d1b5      	bne.n	8001e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4e:	d11b      	bne.n	8001f88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e272      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb4:	4b92      	ldr	r3, [pc, #584]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x12c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e24c      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x76>
 8001ffc:	4b80      	ldr	r3, [pc, #512]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7f      	ldr	r2, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7a      	ldr	r2, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a77      	ldr	r2, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xbc>
 8002036:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 8002050:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a67      	ldr	r2, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fc8c 	bl	800098c <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe fc88 	bl	800098c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e200      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xe4>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fc78 	bl	800098c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe fc74 	bl	800098c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1ec      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x10c>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ce:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
 80020e6:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c0      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4939      	ldr	r1, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fc2d 	bl	800098c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe fc29 	bl	800098c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a1      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4927      	ldr	r1, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fc0c 	bl	800098c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe fc08 	bl	800098c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e180      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03a      	beq.n	8002218 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d019      	beq.n	80021de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fbec 	bl	800098c <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe fbe8 	bl	800098c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e160      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fad8 	bl	800278c <RCC_Delay>
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7fe fbd2 	bl	800098c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ea:	e00f      	b.n	800220c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe fbce 	bl	800098c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d908      	bls.n	800220c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e146      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	42420000 	.word	0x42420000
 8002208:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e9      	bne.n	80021ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a6 	beq.w	8002372 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b8b      	ldr	r3, [pc, #556]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b7f      	ldr	r3, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7e      	ldr	r2, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7fe fb8f 	bl	800098c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7fe fb8b 	bl	800098c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e103      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e02d      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x334>
 80022ae:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a69      	ldr	r2, [pc, #420]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	e01c      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x356>
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a60      	ldr	r2, [pc, #384]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a5d      	ldr	r2, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022ea:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a5a      	ldr	r2, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b58      	ldr	r3, [pc, #352]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe fb3f 	bl	800098c <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fb3b 	bl	800098c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0b1      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ee      	beq.n	8002312 <HAL_RCC_OscConfig+0x37e>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe fb29 	bl	800098c <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fb25 	bl	800098c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e09b      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d061      	beq.n	800244c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d146      	bne.n	800241e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe faf9 	bl	800098c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe faf5 	bl	800098c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e06d      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4921      	ldr	r1, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a19      	ldr	r1, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	430b      	orrs	r3, r1
 80023ea:	491b      	ldr	r1, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe fac9 	bl	800098c <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe fac5 	bl	800098c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e03d      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x46a>
 800241c:	e035      	b.n	800248a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fab2 	bl	800098c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe faae 	bl	800098c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e026      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x498>
 800244a:	e01e      	b.n	800248a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e019      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_OscConfig+0x500>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	429a      	cmp	r2, r3
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0d0      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b67      	ldr	r3, [pc, #412]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 0207 	bic.w	r2, r3, #7
 80024c2:	4965      	ldr	r1, [pc, #404]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b8      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002518:	4b50      	ldr	r3, [pc, #320]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	494d      	ldr	r1, [pc, #308]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d040      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d115      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e07f      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e073      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06b      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4936      	ldr	r1, [pc, #216]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002588:	f7fe fa00 	bl	800098c <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7fe f9fc 	bl	800098c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e053      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1eb      	bne.n	8002590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d210      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e032      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	490e      	ldr	r1, [pc, #56]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002626:	f000 f821 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800262a:	4602      	mov	r2, r0
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	490a      	ldr	r1, [pc, #40]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1cc>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1d0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe f95e 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40022000 	.word	0x40022000
 800265c:	40021000 	.word	0x40021000
 8002660:	080031dc 	.word	0x080031dc
 8002664:	20000000 	.word	0x20000000
 8002668:	20000004 	.word	0x20000004

0800266c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b490      	push	{r4, r7}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCC_GetSysClockFreq+0xac>)
 8002674:	1d3c      	adds	r4, r7, #4
 8002676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800267c:	f240 2301 	movw	r3, #513	; 0x201
 8002680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	2300      	movs	r3, #0
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x40>
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x46>
 80026aa:	e02b      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ae:	623b      	str	r3, [r7, #32]
      break;
 80026b0:	e02b      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	0c9b      	lsrs	r3, r3, #18
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3328      	adds	r3, #40	; 0x28
 80026bc:	443b      	add	r3, r7
 80026be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026c2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0c5b      	lsrs	r3, r3, #17
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	3328      	adds	r3, #40	; 0x28
 80026da:	443b      	add	r3, r7
 80026dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	4a0e      	ldr	r2, [pc, #56]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e6:	fb03 f202 	mul.w	r2, r3, r2
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e004      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	623b      	str	r3, [r7, #32]
      break;
 8002702:	e002      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002706:	623b      	str	r3, [r7, #32]
      break;
 8002708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270a:	6a3b      	ldr	r3, [r7, #32]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bc90      	pop	{r4, r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	080031cc 	.word	0x080031cc
 800271c:	40021000 	.word	0x40021000
 8002720:	007a1200 	.word	0x007a1200
 8002724:	003d0900 	.word	0x003d0900

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	080031ec 	.word	0x080031ec

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffde 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0adb      	lsrs	r3, r3, #11
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	080031ec 	.word	0x080031ec

0800278c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <RCC_Delay+0x34>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <RCC_Delay+0x38>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a5b      	lsrs	r3, r3, #9
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027a8:	bf00      	nop
  }
  while (Delay --);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	60fa      	str	r2, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <RCC_Delay+0x1c>
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	20000000 	.word	0x20000000
 80027c4:	10624dd3 	.word	0x10624dd3

080027c8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e033      	b.n	8002842 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fd ffc2 	bl	8000778 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb61 	bl	8002ec4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002820:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002830:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d117      	bne.n	80028b2 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d012      	beq.n	80028b2 <HAL_USART_IRQHandler+0x66>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b22      	cmp	r3, #34	; 0x22
 80028a0:	d103      	bne.n	80028aa <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9b4 	bl	8002c10 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 80028a8:	e0e9      	b.n	8002a7e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa36 	bl	8002d1c <USART_TransmitReceive_IT>
      return;
 80028b0:	e0e5      	b.n	8002a7e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80bb 	beq.w	8002a30 <HAL_USART_IRQHandler+0x1e4>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_USART_IRQHandler+0x84>
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80b0 	beq.w	8002a30 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_USART_IRQHandler+0xa4>
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_USART_IRQHandler+0xc4>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0202 	orr.w	r2, r3, #2
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_USART_IRQHandler+0xe4>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00f      	beq.n	800295a <HAL_USART_IRQHandler+0x10e>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <HAL_USART_IRQHandler+0x102>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0208 	orr.w	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 808c 	beq.w	8002a7c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0320 	and.w	r3, r3, #32
 800296a:	2b00      	cmp	r3, #0
 800296c:	d011      	beq.n	8002992 <HAL_USART_IRQHandler+0x146>
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00c      	beq.n	8002992 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b22      	cmp	r3, #34	; 0x22
 8002982:	d103      	bne.n	800298c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f943 	bl	8002c10 <USART_Receive_IT>
 800298a:	e002      	b.n	8002992 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f9c5 	bl	8002d1c <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <HAL_USART_IRQHandler+0x16e>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d031      	beq.n	8002a1e <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f888 	bl	8002ad0 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029dc:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <HAL_USART_IRQHandler+0x238>)
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe f906 	bl	8000c04 <HAL_DMA_Abort_IT>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00e      	b.n	8002a2c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f855 	bl	8002abe <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e00a      	b.n	8002a2c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f851 	bl	8002abe <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e006      	b.n	8002a2c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f84d 	bl	8002abe <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a2a:	e027      	b.n	8002a7c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	bf00      	nop
    return;
 8002a2e:	e025      	b.n	8002a7c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d012      	beq.n	8002a60 <HAL_USART_IRQHandler+0x214>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00d      	beq.n	8002a60 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b12      	cmp	r3, #18
 8002a4e:	d103      	bne.n	8002a58 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f86e 	bl	8002b32 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8002a56:	e012      	b.n	8002a7e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f95f 	bl	8002d1c <USART_TransmitReceive_IT>
    return;
 8002a5e:	e00e      	b.n	8002a7e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_USART_IRQHandler+0x232>
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f8ab 	bl	8002bd0 <USART_EndTransmit_IT>
    return;
 8002a7a:	e000      	b.n	8002a7e <HAL_USART_IRQHandler+0x232>
    return;
 8002a7c:	bf00      	nop
  }
}
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	08002b0b 	.word	0x08002b0b

08002a88 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ae6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff ffca 	bl	8002abe <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b12      	cmp	r3, #18
 8002b44:	d13e      	bne.n	8002bc4 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	d114      	bne.n	8002b7a <USART_Transmit_IT+0x48>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d110      	bne.n	8002b7a <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b6c:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	1c9a      	adds	r2, r3, #2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
 8002b78:	e008      	b.n	8002b8c <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	1c59      	adds	r1, r3, #1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6251      	str	r1, [r2, #36]	; 0x24
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	8551      	strh	r1, [r2, #42]	; 0x2a
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10f      	bne.n	8002bc0 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bae:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be6:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0201 	bic.w	r2, r2, #1
 8002bf6:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff41 	bl	8002a88 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b22      	cmp	r3, #34	; 0x22
 8002c22:	d176      	bne.n	8002d12 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d117      	bne.n	8002c5e <USART_Receive_IT+0x4e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d113      	bne.n	8002c5e <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	1c9a      	adds	r2, r3, #2
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c5c:	e026      	b.n	8002cac <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c70:	d007      	beq.n	8002c82 <USART_Receive_IT+0x72>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10a      	bne.n	8002c90 <USART_Receive_IT+0x80>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e008      	b.n	8002ca2 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d120      	bne.n	8002d06 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0220 	bic.w	r2, r2, #32
 8002cd2:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce2:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff fecc 	bl	8002a9a <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e006      	b.n	8002d14 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	22ff      	movs	r2, #255	; 0xff
 8002d0c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e000      	b.n	8002d14 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
  }
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b32      	cmp	r3, #50	; 0x32
 8002d2e:	f040 80c4 	bne.w	8002eba <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d03f      	beq.n	8002dbc <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b80      	cmp	r3, #128	; 0x80
 8002d48:	d138      	bne.n	8002dbc <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d52:	d116      	bne.n	8002d82 <USART_TransmitReceive_IT+0x66>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d112      	bne.n	8002d82 <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d74:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	1c9a      	adds	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
 8002d80:	e008      	b.n	8002d94 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6251      	str	r1, [r2, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dba:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d051      	beq.n	8002e6a <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d14a      	bne.n	8002e6a <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ddc:	d117      	bne.n	8002e0e <USART_TransmitReceive_IT+0xf2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d113      	bne.n	8002e0e <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	1c9a      	adds	r2, r3, #2
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e0c:	e026      	b.n	8002e5c <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d007      	beq.n	8002e32 <USART_TransmitReceive_IT+0x116>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <USART_TransmitReceive_IT+0x124>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e008      	b.n	8002e52 <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d120      	bne.n	8002eb6 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0220 	bic.w	r2, r2, #32
 8002e82:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e92:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fdfd 	bl	8002aac <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	e002      	b.n	8002ebc <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 020c 	bic.w	r2, r2, #12
 8002ede:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002eee:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002ef8:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f26:	f023 030c 	bic.w	r3, r3, #12
 8002f2a:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f58:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a53      	ldr	r2, [pc, #332]	; (80030ac <USART_SetConfig+0x1e8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d14f      	bne.n	8003004 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7ff fbfe 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8002f68:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	009a      	lsls	r2, r3, #2
 8002f74:	441a      	add	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	4a4b      	ldr	r2, [pc, #300]	; (80030b0 <USART_SetConfig+0x1ec>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	0119      	lsls	r1, r3, #4
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009a      	lsls	r2, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa0:	4b43      	ldr	r3, [pc, #268]	; (80030b0 <USART_SetConfig+0x1ec>)
 8002fa2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2064      	movs	r0, #100	; 0x64
 8002faa:	fb00 f303 	mul.w	r3, r0, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	3332      	adds	r3, #50	; 0x32
 8002fb4:	4a3e      	ldr	r2, [pc, #248]	; (80030b0 <USART_SetConfig+0x1ec>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8002fc2:	4419      	add	r1, r3
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	009a      	lsls	r2, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fda:	4b35      	ldr	r3, [pc, #212]	; (80030b0 <USART_SetConfig+0x1ec>)
 8002fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2064      	movs	r0, #100	; 0x64
 8002fe4:	fb00 f303 	mul.w	r3, r0, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	3332      	adds	r3, #50	; 0x32
 8002fee:	4a30      	ldr	r2, [pc, #192]	; (80030b0 <USART_SetConfig+0x1ec>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	f003 020f 	and.w	r2, r3, #15
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	440a      	add	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003002:	e04e      	b.n	80030a2 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003004:	f7ff fb9a 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8003008:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	009a      	lsls	r2, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <USART_SetConfig+0x1ec>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	0119      	lsls	r1, r3, #4
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <USART_SetConfig+0x1ec>)
 8003042:	fba3 0302 	umull	r0, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2064      	movs	r0, #100	; 0x64
 800304a:	fb00 f303 	mul.w	r3, r0, r3
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	4a16      	ldr	r2, [pc, #88]	; (80030b0 <USART_SetConfig+0x1ec>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003062:	4419      	add	r1, r3
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	009a      	lsls	r2, r3, #2
 800306e:	441a      	add	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	fbb2 f2f3 	udiv	r2, r2, r3
 800307a:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <USART_SetConfig+0x1ec>)
 800307c:	fba3 0302 	umull	r0, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2064      	movs	r0, #100	; 0x64
 8003084:	fb00 f303 	mul.w	r3, r0, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	3332      	adds	r3, #50	; 0x32
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <USART_SetConfig+0x1ec>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	440a      	add	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40013800 	.word	0x40013800
 80030b0:	51eb851f 	.word	0x51eb851f

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	2600      	movs	r6, #0
 80030b8:	4d0c      	ldr	r5, [pc, #48]	; (80030ec <__libc_init_array+0x38>)
 80030ba:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <__libc_init_array+0x3c>)
 80030bc:	1b64      	subs	r4, r4, r5
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	f000 f822 	bl	800310c <_init>
 80030c8:	2600      	movs	r6, #0
 80030ca:	4d0a      	ldr	r5, [pc, #40]	; (80030f4 <__libc_init_array+0x40>)
 80030cc:	4c0a      	ldr	r4, [pc, #40]	; (80030f8 <__libc_init_array+0x44>)
 80030ce:	1b64      	subs	r4, r4, r5
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	080031f4 	.word	0x080031f4
 80030f0:	080031f4 	.word	0x080031f4
 80030f4:	080031f4 	.word	0x080031f4
 80030f8:	080031f8 	.word	0x080031f8

080030fc <memset>:
 80030fc:	4603      	mov	r3, r0
 80030fe:	4402      	add	r2, r0
 8003100:	4293      	cmp	r3, r2
 8003102:	d100      	bne.n	8003106 <memset+0xa>
 8003104:	4770      	bx	lr
 8003106:	f803 1b01 	strb.w	r1, [r3], #1
 800310a:	e7f9      	b.n	8003100 <memset+0x4>

0800310c <_init>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr

08003118 <_fini>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr
