
Encrypt_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037dc  080037dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037dc  080037dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037dc  080037dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080037f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080037f0  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009318  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000190e  00000000  00000000  0002934d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002ac60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166e3  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af83  00000000  00000000  00042513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000808c3  00000000  00000000  0004d496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdd59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a0  00000000  00000000  000cddac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003418 	.word	0x08003418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003418 	.word	0x08003418

0800014c <atCRC>:
// CRC https://www.scadacore.com/tools/programming-calculators/online-checksum-calculator/
// Zone encoding table 8-5


void atCRC(uint8_t *data, uint8_t size)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
    uint8_t counter;
    uint16_t crc_register = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	82bb      	strh	r3, [r7, #20]
    uint16_t polynom = 0x8005;
 800015c:	f248 0305 	movw	r3, #32773	; 0x8005
 8000160:	823b      	strh	r3, [r7, #16]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 1; counter < (size - 2); counter++)
 8000162:	2301      	movs	r3, #1
 8000164:	75fb      	strb	r3, [r7, #23]
 8000166:	e027      	b.n	80001b8 <atCRC+0x6c>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 8000168:	2301      	movs	r3, #1
 800016a:	74fb      	strb	r3, [r7, #19]
 800016c:	e01e      	b.n	80001ac <atCRC+0x60>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 800016e:	7dfb      	ldrb	r3, [r7, #23]
 8000170:	687a      	ldr	r2, [r7, #4]
 8000172:	4413      	add	r3, r2
 8000174:	781a      	ldrb	r2, [r3, #0]
 8000176:	7cfb      	ldrb	r3, [r7, #19]
 8000178:	4013      	ands	r3, r2
 800017a:	b2db      	uxtb	r3, r3
 800017c:	2b00      	cmp	r3, #0
 800017e:	bf14      	ite	ne
 8000180:	2301      	movne	r3, #1
 8000182:	2300      	moveq	r3, #0
 8000184:	b2db      	uxtb	r3, r3
 8000186:	73fb      	strb	r3, [r7, #15]
            crc_bit = crc_register >> 15;
 8000188:	8abb      	ldrh	r3, [r7, #20]
 800018a:	0bdb      	lsrs	r3, r3, #15
 800018c:	b29b      	uxth	r3, r3
 800018e:	73bb      	strb	r3, [r7, #14]
            crc_register <<= 1;
 8000190:	8abb      	ldrh	r3, [r7, #20]
 8000192:	005b      	lsls	r3, r3, #1
 8000194:	82bb      	strh	r3, [r7, #20]
            if (data_bit != crc_bit)
 8000196:	7bfa      	ldrb	r2, [r7, #15]
 8000198:	7bbb      	ldrb	r3, [r7, #14]
 800019a:	429a      	cmp	r2, r3
 800019c:	d003      	beq.n	80001a6 <atCRC+0x5a>
            {
                crc_register ^= polynom;
 800019e:	8aba      	ldrh	r2, [r7, #20]
 80001a0:	8a3b      	ldrh	r3, [r7, #16]
 80001a2:	4053      	eors	r3, r2
 80001a4:	82bb      	strh	r3, [r7, #20]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80001a6:	7cfb      	ldrb	r3, [r7, #19]
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	74fb      	strb	r3, [r7, #19]
 80001ac:	7cfb      	ldrb	r3, [r7, #19]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d1dd      	bne.n	800016e <atCRC+0x22>
    for (counter = 1; counter < (size - 2); counter++)
 80001b2:	7dfb      	ldrb	r3, [r7, #23]
 80001b4:	3301      	adds	r3, #1
 80001b6:	75fb      	strb	r3, [r7, #23]
 80001b8:	7dfa      	ldrb	r2, [r7, #23]
 80001ba:	78fb      	ldrb	r3, [r7, #3]
 80001bc:	3b02      	subs	r3, #2
 80001be:	429a      	cmp	r2, r3
 80001c0:	dbd2      	blt.n	8000168 <atCRC+0x1c>
            }
        }
    }
    data[size - 2] = (uint8_t)(crc_register & 0x00FF);
 80001c2:	78fb      	ldrb	r3, [r7, #3]
 80001c4:	3b02      	subs	r3, #2
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	8aba      	ldrh	r2, [r7, #20]
 80001cc:	b2d2      	uxtb	r2, r2
 80001ce:	701a      	strb	r2, [r3, #0]
    data[size - 1] = (uint8_t)(crc_register >> 8);
 80001d0:	8abb      	ldrh	r3, [r7, #20]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b299      	uxth	r1, r3
 80001d6:	78fb      	ldrb	r3, [r7, #3]
 80001d8:	3b01      	subs	r3, #1
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	b2ca      	uxtb	r2, r1
 80001e0:	701a      	strb	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	371c      	adds	r7, #28
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <WakeUp>:


void WakeUp(uint8_t *receiv){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af02      	add	r7, sp, #8
 80001f2:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Receive(&hi2c2, 0xFE, &data, sizeof(data), 1000);
 80001f8:	f107 020f 	add.w	r2, r7, #15
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	21fe      	movs	r1, #254	; 0xfe
 8000206:	4818      	ldr	r0, [pc, #96]	; (8000268 <WakeUp+0x7c>)
 8000208:	f001 fabe 	bl	8001788 <HAL_I2C_Master_Receive>
	HAL_Delay(5); // 2.5 ms para acordar; 45 ms para entrar em sleep
 800020c:	2005      	movs	r0, #5
 800020e:	f000 fd4d 	bl	8000cac <HAL_Delay>
	// first read: 0 byte read - should receive an ACK

	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, &data, 1, 1000);
 8000212:	f107 020f 	add.w	r2, r7, #15
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2301      	movs	r3, #1
 800021e:	21c8      	movs	r1, #200	; 0xc8
 8000220:	4811      	ldr	r0, [pc, #68]	; (8000268 <WakeUp+0x7c>)
 8000222:	f001 fab1 	bl	8001788 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000226:	2005      	movs	r0, #5
 8000228:	f000 fd40 	bl	8000cac <HAL_Delay>

	// Read 88bytes
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, &data, sizeof(data), 1000);		// Send 1 byte
 800022c:	f107 020f 	add.w	r2, r7, #15
 8000230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2301      	movs	r3, #1
 8000238:	21c8      	movs	r1, #200	; 0xc8
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <WakeUp+0x7c>)
 800023c:	f001 f9a6 	bl	800158c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000240:	2005      	movs	r0, #5
 8000242:	f000 fd33 	bl	8000cac <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, 4, 1000); 		    	// Receiv: 0x04, 0x11, 0x33, 0x43.
 8000246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2304      	movs	r3, #4
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	21c8      	movs	r1, #200	; 0xc8
 8000252:	4805      	ldr	r0, [pc, #20]	; (8000268 <WakeUp+0x7c>)
 8000254:	f001 fa98 	bl	8001788 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000258:	2005      	movs	r0, #5
 800025a:	f000 fd27 	bl	8000cac <HAL_Delay>
}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028

0800026c <ReadConfig>:


void ReadConfig(uint8_t *data, uint16_t size, uint8_t *receiv) {
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af02      	add	r7, sp, #8
 8000272:	60f8      	str	r0, [r7, #12]
 8000274:	460b      	mov	r3, r1
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, data, 8, 1000); 		    // Send read command
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2308      	movs	r3, #8
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	21c8      	movs	r1, #200	; 0xc8
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <ReadConfig+0x48>)
 8000288:	f001 f980 	bl	800158c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800028c:	2005      	movs	r0, #5
 800028e:	f000 fd0d 	bl	8000cac <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000); 	        // Receive: data packet size, 0x01 0x23..., CRC_LSB, CRC_MSB
 8000292:	897b      	ldrh	r3, [r7, #10]
 8000294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000298:	9200      	str	r2, [sp, #0]
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	21c8      	movs	r1, #200	; 0xc8
 800029e:	4805      	ldr	r0, [pc, #20]	; (80002b4 <ReadConfig+0x48>)
 80002a0:	f001 fa72 	bl	8001788 <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80002a4:	2005      	movs	r0, #5
 80002a6:	f000 fd01 	bl	8000cac <HAL_Delay>
}
 80002aa:	bf00      	nop
 80002ac:	3710      	adds	r7, #16
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000028 	.word	0x20000028

080002b8 <BlockConfigZone>:
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, configSlot14_15, sizeof(configSlot14_15), 1000);
	HAL_Delay(10);
}


void BlockConfigZone(uint8_t *receiv){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b0ae      	sub	sp, #184	; 0xb8
 80002bc:	af02      	add	r7, sp, #8
 80002be:	6078      	str	r0, [r7, #4]

	uint8_t DataReceive_35[35] = {0x00};
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80002c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002ca:	221f      	movs	r2, #31
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 f89a 	bl	8003408 <memset>
	uint8_t DataReceive_7[7] = {0x00};
 80002d4:	2300      	movs	r3, #0
 80002d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80002d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80002dc:	2100      	movs	r1, #0
 80002de:	460a      	mov	r2, r1
 80002e0:	801a      	strh	r2, [r3, #0]
 80002e2:	460a      	mov	r2, r1
 80002e4:	709a      	strb	r2, [r3, #2]
	uint8_t DataZoneConfig[90] = {0x00};
 80002e6:	2300      	movs	r3, #0
 80002e8:	623b      	str	r3, [r7, #32]
 80002ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ee:	2256      	movs	r2, #86	; 0x56
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f003 f888 	bl	8003408 <memset>
	uint8_t adress = 0x08;
 80002f8:	2308      	movs	r3, #8
 80002fa:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
	uint8_t size = 35;
 80002fe:	2323      	movs	r3, #35	; 0x23
 8000300:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint8_t slot;

	if (size == 35){
 8000304:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000308:	2b23      	cmp	r3, #35	; 0x23
 800030a:	d15a      	bne.n	80003c2 <BlockConfigZone+0x10a>
		for (uint8_t i = 0; i < 2; i++){
 800030c:	2300      	movs	r3, #0
 800030e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000312:	e04f      	b.n	80003b4 <BlockConfigZone+0xfc>
			slot = i*adress;
 8000314:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8000318:	f897 20aa 	ldrb.w	r2, [r7, #170]	; 0xaa
 800031c:	fb02 f303 	mul.w	r3, r2, r3
 8000320:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			uint8_t SendCommand[8] = {0x03, 0x07, 0x02, READ_WRITE_32, slot, 0x00, 0x00, 0x00};
 8000324:	2303      	movs	r3, #3
 8000326:	743b      	strb	r3, [r7, #16]
 8000328:	2307      	movs	r3, #7
 800032a:	747b      	strb	r3, [r7, #17]
 800032c:	2302      	movs	r3, #2
 800032e:	74bb      	strb	r3, [r7, #18]
 8000330:	2380      	movs	r3, #128	; 0x80
 8000332:	74fb      	strb	r3, [r7, #19]
 8000334:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8000338:	753b      	strb	r3, [r7, #20]
 800033a:	2300      	movs	r3, #0
 800033c:	757b      	strb	r3, [r7, #21]
 800033e:	2300      	movs	r3, #0
 8000340:	75bb      	strb	r3, [r7, #22]
 8000342:	2300      	movs	r3, #0
 8000344:	75fb      	strb	r3, [r7, #23]
			atCRC(SendCommand,sizeof(SendCommand));
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2108      	movs	r1, #8
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff fefd 	bl	800014c <atCRC>
			ReadConfig(SendCommand, size, DataReceive_35);
 8000352:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000356:	b299      	uxth	r1, r3
 8000358:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800035c:	f107 0310 	add.w	r3, r7, #16
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff83 	bl	800026c <ReadConfig>

			uint8_t length = i * 32;
 8000366:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800036a:	015b      	lsls	r3, r3, #5
 800036c:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
			for (uint8_t j = 0; j <= 32; j++){
 8000370:	2300      	movs	r3, #0
 8000372:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8000376:	e014      	b.n	80003a2 <BlockConfigZone+0xea>
				DataZoneConfig[length + j] = DataReceive_35[j+1];
 8000378:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800037c:	1c5a      	adds	r2, r3, #1
 800037e:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 8000382:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8000386:	440b      	add	r3, r1
 8000388:	32b0      	adds	r2, #176	; 0xb0
 800038a:	443a      	add	r2, r7
 800038c:	f812 2c2c 	ldrb.w	r2, [r2, #-44]
 8000390:	33b0      	adds	r3, #176	; 0xb0
 8000392:	443b      	add	r3, r7
 8000394:	f803 2c90 	strb.w	r2, [r3, #-144]
			for (uint8_t j = 0; j <= 32; j++){
 8000398:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 800039c:	3301      	adds	r3, #1
 800039e:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80003a2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80003a6:	2b20      	cmp	r3, #32
 80003a8:	d9e6      	bls.n	8000378 <BlockConfigZone+0xc0>
		for (uint8_t i = 0; i < 2; i++){
 80003aa:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80003ae:	3301      	adds	r3, #1
 80003b0:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80003b4:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d9ab      	bls.n	8000314 <BlockConfigZone+0x5c>
			}
		}
		size = 7;
 80003bc:	2307      	movs	r3, #7
 80003be:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	}

	if(size == 7){
 80003c2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80003c6:	2b07      	cmp	r3, #7
 80003c8:	d15c      	bne.n	8000484 <BlockConfigZone+0x1cc>
		for (uint8_t x = 0; x <= 5; x++){
 80003ca:	2300      	movs	r3, #0
 80003cc:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 80003d0:	e054      	b.n	800047c <BlockConfigZone+0x1c4>
			adress = 0x10;
 80003d2:	2310      	movs	r3, #16
 80003d4:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
			slot = x + adress;
 80003d8:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80003dc:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 80003e0:	4413      	add	r3, r2
 80003e2:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			uint8_t SendCommand[8] = {0x03, 0x07, 0x02, READ_WRITE_4, slot, 0x00, 0x00, 0x00};
 80003e6:	2303      	movs	r3, #3
 80003e8:	723b      	strb	r3, [r7, #8]
 80003ea:	2307      	movs	r3, #7
 80003ec:	727b      	strb	r3, [r7, #9]
 80003ee:	2302      	movs	r3, #2
 80003f0:	72bb      	strb	r3, [r7, #10]
 80003f2:	2300      	movs	r3, #0
 80003f4:	72fb      	strb	r3, [r7, #11]
 80003f6:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80003fa:	733b      	strb	r3, [r7, #12]
 80003fc:	2300      	movs	r3, #0
 80003fe:	737b      	strb	r3, [r7, #13]
 8000400:	2300      	movs	r3, #0
 8000402:	73bb      	strb	r3, [r7, #14]
 8000404:	2300      	movs	r3, #0
 8000406:	73fb      	strb	r3, [r7, #15]
			atCRC(SendCommand,sizeof(SendCommand));
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	2108      	movs	r1, #8
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff fe9c 	bl	800014c <atCRC>
			ReadConfig(SendCommand, size, DataReceive_7);
 8000414:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000418:	b299      	uxth	r1, r3
 800041a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff22 	bl	800026c <ReadConfig>

			for(uint8_t y = 0; y <= 3; y++){
 8000428:	2300      	movs	r3, #0
 800042a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800042e:	e01c      	b.n	800046a <BlockConfigZone+0x1b2>
				uint8_t length = (x*4) + 64 + y;
 8000430:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000434:	3310      	adds	r3, #16
 8000436:	b2db      	uxtb	r3, r3
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	b2da      	uxtb	r2, r3
 800043c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000440:	4413      	add	r3, r2
 8000442:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				DataZoneConfig[length] = DataReceive_7[y+1];
 8000446:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800044a:	1c5a      	adds	r2, r3, #1
 800044c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000450:	32b0      	adds	r2, #176	; 0xb0
 8000452:	443a      	add	r2, r7
 8000454:	f812 2c34 	ldrb.w	r2, [r2, #-52]
 8000458:	33b0      	adds	r3, #176	; 0xb0
 800045a:	443b      	add	r3, r7
 800045c:	f803 2c90 	strb.w	r2, [r3, #-144]
			for(uint8_t y = 0; y <= 3; y++){
 8000460:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8000464:	3301      	adds	r3, #1
 8000466:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800046a:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 800046e:	2b03      	cmp	r3, #3
 8000470:	d9de      	bls.n	8000430 <BlockConfigZone+0x178>
		for (uint8_t x = 0; x <= 5; x++){
 8000472:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000476:	3301      	adds	r3, #1
 8000478:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 800047c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8000480:	2b05      	cmp	r3, #5
 8000482:	d9a6      	bls.n	80003d2 <BlockConfigZone+0x11a>
		 	}
		 }
	}


	atCRC(DataZoneConfig, sizeof(DataZoneConfig));
 8000484:	f107 0320 	add.w	r3, r7, #32
 8000488:	215a      	movs	r1, #90	; 0x5a
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe5e 	bl	800014c <atCRC>

	// Lock command: {COMMAND, COUNT, OPCODE, ZONE, CRC_88_LSB,  CRC_88_MSB, CRC_LSB, CRC_MSB}
	uint8_t blockConfig[] = { COMMAND, SIZE_BLOCK_CONFIG, COMMAND_LOCK, ZONE_CONFIG_LOCK, 0xc5, 0xc6,/*0xc4, 0xe1*/ 0x00, 0x00};
 8000490:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <BlockConfigZone+0x22c>)
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800049a:	e883 0003 	stmia.w	r3, {r0, r1}
	atCRC(blockConfig,sizeof(blockConfig));
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	2108      	movs	r1, #8
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fe51 	bl	800014c <atCRC>
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, blockConfig, sizeof(blockConfig), 1000);
 80004aa:	f107 0218 	add.w	r2, r7, #24
 80004ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2308      	movs	r3, #8
 80004b6:	21c8      	movs	r1, #200	; 0xc8
 80004b8:	480b      	ldr	r0, [pc, #44]	; (80004e8 <BlockConfigZone+0x230>)
 80004ba:	f001 f867 	bl	800158c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80004be:	200a      	movs	r0, #10
 80004c0:	f000 fbf4 	bl	8000cac <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, 1, 1000);
 80004c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2301      	movs	r3, #1
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	21c8      	movs	r1, #200	; 0xc8
 80004d0:	4805      	ldr	r0, [pc, #20]	; (80004e8 <BlockConfigZone+0x230>)
 80004d2:	f001 f959 	bl	8001788 <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 80004d6:	200a      	movs	r0, #10
 80004d8:	f000 fbe8 	bl	8000cac <HAL_Delay>

}
 80004dc:	bf00      	nop
 80004de:	37b0      	adds	r7, #176	; 0xb0
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	08003490 	.word	0x08003490
 80004e8:	20000028 	.word	0x20000028

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b0ec      	sub	sp, #432	; 0x1b0
 80004f0:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80004f2:	f000 fb79 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f973 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 fa11 	bl	8000920 <MX_GPIO_Init>
  MX_USART1_Init();
 80004fe:	f000 f9e3 	bl	80008c8 <MX_USART1_Init>
  MX_I2C2_Init();
 8000502:	f000 f9b3 	bl	800086c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  uint8_t readCommand0[8] = {0x03, 0x07, 0x02, 0x80, 0x00, 0x00, 0x09, 0xAD};
 8000506:	4aaa      	ldr	r2, [pc, #680]	; (80007b0 <main+0x2c4>)
 8000508:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800050c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000510:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand1[8] = {0x03, 0x07, 0x02, 0x80, 0x08, 0x00, 0x0a, 0x4d};
 8000514:	4aa7      	ldr	r2, [pc, #668]	; (80007b4 <main+0x2c8>)
 8000516:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800051a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800051e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand2[8] = {0x03, 0x07, 0x02, 0x00, 0x10, 0x00, 0x1d, 0x9d};
 8000522:	4aa5      	ldr	r2, [pc, #660]	; (80007b8 <main+0x2cc>)
 8000524:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800052c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand3[8] = {0x03, 0x07, 0x02, 0x00, 0x11, 0x00, 0x14, 0x1d};
 8000530:	4aa2      	ldr	r2, [pc, #648]	; (80007bc <main+0x2d0>)
 8000532:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8000536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800053a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand4[8] = {0x03, 0x07, 0x02, 0x00, 0x12, 0x00, 0x1b, 0x1d};
 800053e:	4aa0      	ldr	r2, [pc, #640]	; (80007c0 <main+0x2d4>)
 8000540:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000548:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand5[8] = {0x03, 0x07, 0x02, 0x00, 0x13, 0x00, 0x12, 0x9d};
 800054c:	4a9d      	ldr	r2, [pc, #628]	; (80007c4 <main+0x2d8>)
 800054e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8000552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000556:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand6[8] = {0x03, 0x07, 0x02, 0x00, 0x14, 0x00, 0x1e, 0xdd};
 800055a:	4a9b      	ldr	r2, [pc, #620]	; (80007c8 <main+0x2dc>)
 800055c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000564:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand7[8] = {0x03, 0x07, 0x02, 0x00, 0x15, 0x00, 0x17, 0x5d};
 8000568:	4a98      	ldr	r2, [pc, #608]	; (80007cc <main+0x2e0>)
 800056a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800056e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000572:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t readMASTERKEY[8] = {0x03, 0x07, 0x02, 0x82, 0x70, 0x00, 0x09, 0x8c};
 8000576:	4a96      	ldr	r2, [pc, #600]	; (80007d0 <main+0x2e4>)
 8000578:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readDATA0[8] = {0x03, 0x07, 0x02, 0x82, 0x10, 0x00, 0x09, 0x98};
 8000584:	4a93      	ldr	r2, [pc, #588]	; (80007d4 <main+0x2e8>)
 8000586:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800058a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readDATA2[8] = {0x03, 0x07, 0x02, 0x82, 0x50, 0x00, 0x0a, 0x14};
 8000592:	4a91      	ldr	r2, [pc, #580]	; (80007d8 <main+0x2ec>)
 8000594:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059c:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t temp_nonce[] = {};

  uint8_t receiv_MASTERKEY[35] = {0};
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80005a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80005aa:	221f      	movs	r2, #31
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 ff2a 	bl	8003408 <memset>


  // NONCE
  uint8_t NumIn[20]= {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00,
 80005b4:	4b89      	ldr	r3, [pc, #548]	; (80007dc <main+0x2f0>)
 80005b6:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80005ba:	461d      	mov	r5, r3
 80005bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c0:	682b      	ldr	r3, [r5, #0]
 80005c2:	6023      	str	r3, [r4, #0]
		  	  	  	  0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00};
  uint8_t nonce_receiv[35] = {0};
 80005c4:	2300      	movs	r3, #0
 80005c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80005ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005ce:	221f      	movs	r2, #31
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 ff18 	bl	8003408 <memset>
  uint8_t tempnonce[35] = {0};
 80005d8:	2300      	movs	r3, #0
 80005da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80005de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80005e2:	221f      	movs	r2, #31
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 ff0e 	bl	8003408 <memset>


  // SHA-256
  uint8_t sha_init[1] = {0};
 80005ec:	2300      	movs	r3, #0
 80005ee:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
  uint8_t SHA_receiv[35] = {0};
 80005f2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80005f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	3304      	adds	r3, #4
 8000600:	221f      	movs	r2, #31
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 feff 	bl	8003408 <memset>

  // GENDIG
  uint8_t gendig_receiv[4] = {0};
 800060a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800060e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]

  uint8_t receiv_DATA2[35] = {0};
 8000616:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800061a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	3304      	adds	r3, #4
 8000624:	221f      	movs	r2, #31
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 feed 	bl	8003408 <memset>


  uint8_t read_byte[4];
  uint8_t receiv_ack[1] = {0};
 800062e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]

  //uint8_t read_config[32] = {0};
  uint8_t read_config0[35] = {0};
 800063a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800063e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	3304      	adds	r3, #4
 8000648:	221f      	movs	r2, #31
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fedb 	bl	8003408 <memset>
  uint8_t read_config1[35] = {0};
 8000652:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000656:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	3304      	adds	r3, #4
 8000660:	221f      	movs	r2, #31
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fecf 	bl	8003408 <memset>
  uint8_t read_config2[7] = {0};
 800066a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800066e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	3304      	adds	r3, #4
 8000678:	2100      	movs	r1, #0
 800067a:	460a      	mov	r2, r1
 800067c:	801a      	strh	r2, [r3, #0]
 800067e:	460a      	mov	r2, r1
 8000680:	709a      	strb	r2, [r3, #2]
  uint8_t read_config3[7] = {0};
 8000682:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8000686:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	3304      	adds	r3, #4
 8000690:	2100      	movs	r1, #0
 8000692:	460a      	mov	r2, r1
 8000694:	801a      	strh	r2, [r3, #0]
 8000696:	460a      	mov	r2, r1
 8000698:	709a      	strb	r2, [r3, #2]
  uint8_t read_config4[7] = {0};
 800069a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800069e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	3304      	adds	r3, #4
 80006a8:	2100      	movs	r1, #0
 80006aa:	460a      	mov	r2, r1
 80006ac:	801a      	strh	r2, [r3, #0]
 80006ae:	460a      	mov	r2, r1
 80006b0:	709a      	strb	r2, [r3, #2]
  uint8_t read_config5[7] = {0};
 80006b2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006b6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	3304      	adds	r3, #4
 80006c0:	2100      	movs	r1, #0
 80006c2:	460a      	mov	r2, r1
 80006c4:	801a      	strh	r2, [r3, #0]
 80006c6:	460a      	mov	r2, r1
 80006c8:	709a      	strb	r2, [r3, #2]
  uint8_t read_config6[7] = {0};
 80006ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006ce:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	3304      	adds	r3, #4
 80006d8:	2100      	movs	r1, #0
 80006da:	460a      	mov	r2, r1
 80006dc:	801a      	strh	r2, [r3, #0]
 80006de:	460a      	mov	r2, r1
 80006e0:	709a      	strb	r2, [r3, #2]
  uint8_t read_config7[7] = {0};
 80006e2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	3304      	adds	r3, #4
 80006f0:	2100      	movs	r1, #0
 80006f2:	460a      	mov	r2, r1
 80006f4:	801a      	strh	r2, [r3, #0]
 80006f6:	460a      	mov	r2, r1
 80006f8:	709a      	strb	r2, [r3, #2]
  uint8_t read_config8[7] = {0};
 80006fa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80006fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	3304      	adds	r3, #4
 8000708:	2100      	movs	r1, #0
 800070a:	460a      	mov	r2, r1
 800070c:	801a      	strh	r2, [r3, #0]
 800070e:	460a      	mov	r2, r1
 8000710:	709a      	strb	r2, [r3, #2]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WakeUp(read_byte);
 8000712:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd68 	bl	80001ec <WakeUp>
	  //WriteConfigZone();
	  BlockConfigZone(receiv_ack);
 800071c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdc9 	bl	80002b8 <BlockConfigZone>
	  //WriteDataZone();
	  //WriteOTPZone();
	  //BlockDataZone();

	  ReadConfig(readCommand0, 35, read_config0);
 8000726:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800072a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800072e:	2123      	movs	r1, #35	; 0x23
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd9b 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand1, 35, read_config1);
 8000736:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800073a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800073e:	2123      	movs	r1, #35	; 0x23
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd93 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand2, 7, read_config2);
 8000746:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800074a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800074e:	2107      	movs	r1, #7
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd8b 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand3, 7, read_config3);
 8000756:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800075a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800075e:	2107      	movs	r1, #7
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fd83 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand4, 7, read_config4);
 8000766:	f107 0220 	add.w	r2, r7, #32
 800076a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800076e:	2107      	movs	r1, #7
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fd7b 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand5, 7, read_config5);
 8000776:	f107 0218 	add.w	r2, r7, #24
 800077a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800077e:	2107      	movs	r1, #7
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd73 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand6, 7, read_config6);
 8000786:	f107 0210 	add.w	r2, r7, #16
 800078a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800078e:	2107      	movs	r1, #7
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fd6b 	bl	800026c <ReadConfig>
	  ReadConfig(readCommand7, 7, read_config7);
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800079e:	2107      	movs	r1, #7
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd63 	bl	800026c <ReadConfig>
	  //SHACommandInit(1, sha_init);
	  //SHACommandCompute(35, SHA_receiv);

	  //ReadEncript(readDATA2, 35, receiv_DATA2);

	  HAL_Delay(10);
 80007a6:	200a      	movs	r0, #10
 80007a8:	f000 fa80 	bl	8000cac <HAL_Delay>
	  WakeUp(read_byte);
 80007ac:	e7b1      	b.n	8000712 <main+0x226>
 80007ae:	bf00      	nop
 80007b0:	08003748 	.word	0x08003748
 80007b4:	08003750 	.word	0x08003750
 80007b8:	08003758 	.word	0x08003758
 80007bc:	08003760 	.word	0x08003760
 80007c0:	08003768 	.word	0x08003768
 80007c4:	08003770 	.word	0x08003770
 80007c8:	08003778 	.word	0x08003778
 80007cc:	08003780 	.word	0x08003780
 80007d0:	08003788 	.word	0x08003788
 80007d4:	08003790 	.word	0x08003790
 80007d8:	08003798 	.word	0x08003798
 80007dc:	080037a0 	.word	0x080037a0

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	; 0x40
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2228      	movs	r2, #40	; 0x28
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fe0a 	bl	8003408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800081e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fd39 	bl	80022a0 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000834:	f000 f8ae 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083c:	2302      	movs	r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2102      	movs	r1, #2
 8000852:	4618      	mov	r0, r3
 8000854:	f001 ffa6 	bl	80027a4 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800085e:	f000 f899 	bl	8000994 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3740      	adds	r7, #64	; 0x40
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C2_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MX_I2C2_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C2_Init+0x50>)
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <MX_I2C2_Init+0x58>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C2_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_I2C2_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_I2C2_Init+0x50>)
 800088a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800088e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <MX_I2C2_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_I2C2_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_I2C2_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_I2C2_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_I2C2_Init+0x50>)
 80008aa:	f000 fd2b 	bl	8001304 <HAL_I2C_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 f86e 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000028 	.word	0x20000028
 80008c0:	40005800 	.word	0x40005800
 80008c4:	000186a0 	.word	0x000186a0

080008c8 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_USART1_Init+0x50>)
 80008ce:	4a13      	ldr	r2, [pc, #76]	; (800091c <MX_USART1_Init+0x54>)
 80008d0:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART1_Init+0x50>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_USART1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_USART1_Init+0x50>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_USART1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USART1_Init+0x50>)
 8000906:	f002 f8e5 	bl	8002ad4 <HAL_USART_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000910:	f000 f840 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000007c 	.word	0x2000007c
 800091c:	40013800 	.word	0x40013800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_GPIO_Init+0x70>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <MX_GPIO_Init+0x70>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	6193      	str	r3, [r2, #24]
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_GPIO_Init+0x70>)
 8000934:	699b      	ldr	r3, [r3, #24]
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_GPIO_Init+0x70>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_GPIO_Init+0x70>)
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_GPIO_Init+0x70>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_GPIO_Init+0x70>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <MX_GPIO_Init+0x70>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_GPIO_Init+0x70>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_GPIO_Init+0x70>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <MX_GPIO_Init+0x70>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <MX_GPIO_Init+0x70>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <HAL_MspInit+0x5c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x5c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_MspInit+0x60>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_MspInit+0x60>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010000 	.word	0x40010000

08000a04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <HAL_I2C_MspInit+0x74>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d124      	bne.n	8000a6e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a42:	2312      	movs	r3, #18
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480b      	ldr	r0, [pc, #44]	; (8000a80 <HAL_I2C_MspInit+0x7c>)
 8000a52:	f000 fad3 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a60:	61d3      	str	r3, [r2, #28]
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_I2C_MspInit+0x78>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010c00 	.word	0x40010c00

08000a84 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <HAL_USART_MspInit+0x9c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d139      	bne.n	8000b18 <HAL_USART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <HAL_USART_MspInit+0xa0>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1e      	ldr	r2, [pc, #120]	; (8000b24 <HAL_USART_MspInit+0xa0>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_USART_MspInit+0xa0>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_USART_MspInit+0xa0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_USART_MspInit+0xa0>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_USART_MspInit+0xa0>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ad4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480f      	ldr	r0, [pc, #60]	; (8000b28 <HAL_USART_MspInit+0xa4>)
 8000aea:	f000 fa87 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_USART_MspInit+0xa4>)
 8000b04:	f000 fa7a 	bl	8000ffc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2025      	movs	r0, #37	; 0x25
 8000b0e:	f000 f9c8 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b12:	2025      	movs	r0, #37	; 0x25
 8000b14:	f000 f9e1 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010800 	.word	0x40010800

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f87f 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <USART1_IRQHandler+0x10>)
 8000b82:	f001 ffe9 	bl	8002b58 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000007c 	.word	0x2000007c

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <Reset_Handler>:
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x12>)
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x1a>)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:
 8000ba6:	58d4      	ldr	r4, [r2, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:
 8000bac:	18c4      	adds	r4, r0, r3
 8000bae:	428c      	cmp	r4, r1
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopFillZerobss+0x1e>)
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopFillZerobss+0x22>)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:
 8000bbe:	42a2      	cmp	r2, r4
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>
 8000bc2:	f7ff ffe5 	bl	8000b90 <SystemInit>
 8000bc6:	f002 fbfb 	bl	80033c0 <__libc_init_array>
 8000bca:	f7ff fc8f 	bl	80004ec <main>
 8000bce:	4770      	bx	lr
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	080037e4 	.word	0x080037e4
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	200000c4 	.word	0x200000c4

08000be4 <ADC1_2_IRQHandler>:
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_Init+0x28>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_Init+0x28>)
 8000bf2:	f043 0310 	orr.w	r3, r3, #16
 8000bf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	f000 f947 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f808 	bl	8000c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c04:	f7ff fecc 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x54>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_InitTick+0x58>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f95f 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00e      	b.n	8000c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b0f      	cmp	r3, #15
 8000c46:	d80a      	bhi.n	8000c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	f000 f927 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c54:	4a06      	ldr	r2, [pc, #24]	; (8000c70 <HAL_InitTick+0x5c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_IncTick+0x1c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x20>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_IncTick+0x20>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200000c0 	.word	0x200000c0

08000c98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <HAL_GetTick+0x10>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	200000c0 	.word	0x200000c0

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff fff0 	bl	8000c98 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_Delay+0x44>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffe0 	bl	8000c98 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4906      	ldr	r1, [pc, #24]	; (8000d8c <__NVIC_EnableIRQ+0x34>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6c:	f7ff ff90 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff2d 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff42 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff90 	bl	8000de4 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5f 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff35 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d005      	beq.n	8000f32 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2204      	movs	r2, #4
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e051      	b.n	8000fd6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 020e 	bic.w	r2, r2, #14
 8000f40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0201 	bic.w	r2, r2, #1
 8000f50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <HAL_DMA_Abort_IT+0xd0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d029      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0xa0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <HAL_DMA_Abort_IT+0xd4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d022      	beq.n	8000fac <HAL_DMA_Abort_IT+0x9c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_DMA_Abort_IT+0xd8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d01a      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x96>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_DMA_Abort_IT+0xdc>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d012      	beq.n	8000fa0 <HAL_DMA_Abort_IT+0x90>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_DMA_Abort_IT+0xe0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d00a      	beq.n	8000f9a <HAL_DMA_Abort_IT+0x8a>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_DMA_Abort_IT+0xe4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d102      	bne.n	8000f94 <HAL_DMA_Abort_IT+0x84>
 8000f8e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f92:	e00e      	b.n	8000fb2 <HAL_DMA_Abort_IT+0xa2>
 8000f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f98:	e00b      	b.n	8000fb2 <HAL_DMA_Abort_IT+0xa2>
 8000f9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9e:	e008      	b.n	8000fb2 <HAL_DMA_Abort_IT+0xa2>
 8000fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa4:	e005      	b.n	8000fb2 <HAL_DMA_Abort_IT+0xa2>
 8000fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000faa:	e002      	b.n	8000fb2 <HAL_DMA_Abort_IT+0xa2>
 8000fac:	2310      	movs	r3, #16
 8000fae:	e000      	b.n	8000fb2 <HAL_DMA_Abort_IT+0xa2>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <HAL_DMA_Abort_IT+0xe8>)
 8000fb4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	4798      	blx	r3
    } 
  }
  return status;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020008 	.word	0x40020008
 8000fe4:	4002001c 	.word	0x4002001c
 8000fe8:	40020030 	.word	0x40020030
 8000fec:	40020044 	.word	0x40020044
 8000ff0:	40020058 	.word	0x40020058
 8000ff4:	4002006c 	.word	0x4002006c
 8000ff8:	40020000 	.word	0x40020000

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b08b      	sub	sp, #44	; 0x2c
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100e:	e169      	b.n	80012e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001010:	2201      	movs	r2, #1
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8158 	bne.w	80012de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a9a      	ldr	r2, [pc, #616]	; (800129c <HAL_GPIO_Init+0x2a0>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d05e      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001038:	4a98      	ldr	r2, [pc, #608]	; (800129c <HAL_GPIO_Init+0x2a0>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d875      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800103e:	4a98      	ldr	r2, [pc, #608]	; (80012a0 <HAL_GPIO_Init+0x2a4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d058      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001044:	4a96      	ldr	r2, [pc, #600]	; (80012a0 <HAL_GPIO_Init+0x2a4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d86f      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800104a:	4a96      	ldr	r2, [pc, #600]	; (80012a4 <HAL_GPIO_Init+0x2a8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d052      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001050:	4a94      	ldr	r2, [pc, #592]	; (80012a4 <HAL_GPIO_Init+0x2a8>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d869      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001056:	4a94      	ldr	r2, [pc, #592]	; (80012a8 <HAL_GPIO_Init+0x2ac>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d04c      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 800105c:	4a92      	ldr	r2, [pc, #584]	; (80012a8 <HAL_GPIO_Init+0x2ac>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d863      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001062:	4a92      	ldr	r2, [pc, #584]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d046      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
 8001068:	4a90      	ldr	r2, [pc, #576]	; (80012ac <HAL_GPIO_Init+0x2b0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d85d      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 800106e:	2b12      	cmp	r3, #18
 8001070:	d82a      	bhi.n	80010c8 <HAL_GPIO_Init+0xcc>
 8001072:	2b12      	cmp	r3, #18
 8001074:	d859      	bhi.n	800112a <HAL_GPIO_Init+0x12e>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <HAL_GPIO_Init+0x80>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010f7 	.word	0x080010f7
 8001080:	080010d1 	.word	0x080010d1
 8001084:	080010e3 	.word	0x080010e3
 8001088:	08001125 	.word	0x08001125
 800108c:	0800112b 	.word	0x0800112b
 8001090:	0800112b 	.word	0x0800112b
 8001094:	0800112b 	.word	0x0800112b
 8001098:	0800112b 	.word	0x0800112b
 800109c:	0800112b 	.word	0x0800112b
 80010a0:	0800112b 	.word	0x0800112b
 80010a4:	0800112b 	.word	0x0800112b
 80010a8:	0800112b 	.word	0x0800112b
 80010ac:	0800112b 	.word	0x0800112b
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	0800112b 	.word	0x0800112b
 80010b8:	0800112b 	.word	0x0800112b
 80010bc:	0800112b 	.word	0x0800112b
 80010c0:	080010d9 	.word	0x080010d9
 80010c4:	080010ed 	.word	0x080010ed
 80010c8:	4a79      	ldr	r2, [pc, #484]	; (80012b0 <HAL_GPIO_Init+0x2b4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ce:	e02c      	b.n	800112a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e029      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	3304      	adds	r3, #4
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e024      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	3308      	adds	r3, #8
 80010e8:	623b      	str	r3, [r7, #32]
          break;
 80010ea:	e01f      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	330c      	adds	r3, #12
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	e01a      	b.n	800112c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010fe:	2304      	movs	r3, #4
 8001100:	623b      	str	r3, [r7, #32]
          break;
 8001102:	e013      	b.n	800112c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d105      	bne.n	8001118 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800110c:	2308      	movs	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	611a      	str	r2, [r3, #16]
          break;
 8001116:	e009      	b.n	800112c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	615a      	str	r2, [r3, #20]
          break;
 8001122:	e003      	b.n	800112c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x130>
          break;
 800112a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2bff      	cmp	r3, #255	; 0xff
 8001130:	d801      	bhi.n	8001136 <HAL_GPIO_Init+0x13a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	e001      	b.n	800113a <HAL_GPIO_Init+0x13e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3304      	adds	r3, #4
 800113a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	d802      	bhi.n	8001148 <HAL_GPIO_Init+0x14c>
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0x152>
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3b08      	subs	r3, #8
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	210f      	movs	r1, #15
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	401a      	ands	r2, r3
 8001160:	6a39      	ldr	r1, [r7, #32]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 80b1 	beq.w	80012de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b4a      	ldr	r3, [pc, #296]	; (80012b4 <HAL_GPIO_Init+0x2b8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_GPIO_Init+0x2bc>)
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a40      	ldr	r2, [pc, #256]	; (80012bc <HAL_GPIO_Init+0x2c0>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_Init+0x1ec>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <HAL_GPIO_Init+0x2c4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1e8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <HAL_GPIO_Init+0x2c8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <HAL_GPIO_Init+0x2cc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1e0>
 80011d8:	2303      	movs	r3, #3
 80011da:	e006      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011dc:	2304      	movs	r3, #4
 80011de:	e004      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e002      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_GPIO_Init+0x1ee>
 80011e8:	2300      	movs	r3, #0
 80011ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ec:	f002 0203 	and.w	r2, r2, #3
 80011f0:	0092      	lsls	r2, r2, #2
 80011f2:	4093      	lsls	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011fa:	492f      	ldr	r1, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x2bc>)
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3302      	adds	r3, #2
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d006      	beq.n	8001222 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	492c      	ldr	r1, [pc, #176]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	43db      	mvns	r3, r3
 800122a:	4928      	ldr	r1, [pc, #160]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800122c:	4013      	ands	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4922      	ldr	r1, [pc, #136]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	43db      	mvns	r3, r3
 8001252:	491e      	ldr	r1, [pc, #120]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001254:	4013      	ands	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	4918      	ldr	r1, [pc, #96]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	43db      	mvns	r3, r3
 800127a:	4914      	ldr	r1, [pc, #80]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800127c:	4013      	ands	r3, r2
 800127e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d021      	beq.n	80012d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	60cb      	str	r3, [r1, #12]
 8001298:	e021      	b.n	80012de <HAL_GPIO_Init+0x2e2>
 800129a:	bf00      	nop
 800129c:	10320000 	.word	0x10320000
 80012a0:	10310000 	.word	0x10310000
 80012a4:	10220000 	.word	0x10220000
 80012a8:	10210000 	.word	0x10210000
 80012ac:	10120000 	.word	0x10120000
 80012b0:	10110000 	.word	0x10110000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40011400 	.word	0x40011400
 80012cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4909      	ldr	r1, [pc, #36]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012da:	4013      	ands	r3, r2
 80012dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	fa22 f303 	lsr.w	r3, r2, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f47f ae8e 	bne.w	8001010 <HAL_GPIO_Init+0x14>
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	372c      	adds	r7, #44	; 0x2c
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e12b      	b.n	800156e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fb6a 	bl	8000a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2224      	movs	r2, #36	; 0x24
 8001334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001368:	f001 fb6e 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 800136c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a81      	ldr	r2, [pc, #516]	; (8001578 <HAL_I2C_Init+0x274>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d807      	bhi.n	8001388 <HAL_I2C_Init+0x84>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a80      	ldr	r2, [pc, #512]	; (800157c <HAL_I2C_Init+0x278>)
 800137c:	4293      	cmp	r3, r2
 800137e:	bf94      	ite	ls
 8001380:	2301      	movls	r3, #1
 8001382:	2300      	movhi	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	e006      	b.n	8001396 <HAL_I2C_Init+0x92>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a7d      	ldr	r2, [pc, #500]	; (8001580 <HAL_I2C_Init+0x27c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	bf94      	ite	ls
 8001390:	2301      	movls	r3, #1
 8001392:	2300      	movhi	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0e7      	b.n	800156e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a78      	ldr	r2, [pc, #480]	; (8001584 <HAL_I2C_Init+0x280>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <HAL_I2C_Init+0x274>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d802      	bhi.n	80013d8 <HAL_I2C_Init+0xd4>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	e009      	b.n	80013ec <HAL_I2C_Init+0xe8>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4a69      	ldr	r2, [pc, #420]	; (8001588 <HAL_I2C_Init+0x284>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	3301      	adds	r3, #1
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	495c      	ldr	r1, [pc, #368]	; (8001578 <HAL_I2C_Init+0x274>)
 8001408:	428b      	cmp	r3, r1
 800140a:	d819      	bhi.n	8001440 <HAL_I2C_Init+0x13c>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e59      	subs	r1, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fbb1 f3f3 	udiv	r3, r1, r3
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001420:	400b      	ands	r3, r1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <HAL_I2C_Init+0x138>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1e59      	subs	r1, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fbb1 f3f3 	udiv	r3, r1, r3
 8001434:	3301      	adds	r3, #1
 8001436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143a:	e051      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 800143c:	2304      	movs	r3, #4
 800143e:	e04f      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d111      	bne.n	800146c <HAL_I2C_Init+0x168>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e58      	subs	r0, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	440b      	add	r3, r1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	3301      	adds	r3, #1
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	e012      	b.n	8001492 <HAL_I2C_Init+0x18e>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e58      	subs	r0, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	0099      	lsls	r1, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x196>
 8001496:	2301      	movs	r3, #1
 8001498:	e022      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10e      	bne.n	80014c0 <HAL_I2C_Init+0x1bc>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e58      	subs	r0, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	440b      	add	r3, r1
 80014b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014be:	e00f      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1e58      	subs	r0, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	0099      	lsls	r1, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	6809      	ldr	r1, [r1, #0]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800150e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6911      	ldr	r1, [r2, #16]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68d2      	ldr	r2, [r2, #12]
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	000186a0 	.word	0x000186a0
 800157c:	001e847f 	.word	0x001e847f
 8001580:	003d08ff 	.word	0x003d08ff
 8001584:	431bde83 	.word	0x431bde83
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	460b      	mov	r3, r1
 800159a:	817b      	strh	r3, [r7, #10]
 800159c:	4613      	mov	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fb7a 	bl	8000c98 <HAL_GetTick>
 80015a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	f040 80e0 	bne.w	8001774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2319      	movs	r3, #25
 80015ba:	2201      	movs	r2, #1
 80015bc:	4970      	ldr	r1, [pc, #448]	; (8001780 <HAL_I2C_Master_Transmit+0x1f4>)
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 fc92 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	e0d3      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_I2C_Master_Transmit+0x50>
 80015d8:	2302      	movs	r3, #2
 80015da:	e0cc      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d007      	beq.n	8001602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2221      	movs	r2, #33	; 0x21
 8001616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2210      	movs	r2, #16
 800161e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	893a      	ldrh	r2, [r7, #8]
 8001632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4a50      	ldr	r2, [pc, #320]	; (8001784 <HAL_I2C_Master_Transmit+0x1f8>)
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001644:	8979      	ldrh	r1, [r7, #10]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fafc 	bl	8001c48 <I2C_MasterRequestWrite>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e08d      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001670:	e066      	b.n	8001740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	6a39      	ldr	r1, [r7, #32]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fd0c 	bl	8002094 <I2C_WaitOnTXEFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00d      	beq.n	800169e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2b04      	cmp	r3, #4
 8001688:	d107      	bne.n	800169a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e06b      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d11b      	bne.n	8001714 <HAL_I2C_Master_Transmit+0x188>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d017      	beq.n	8001714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fcfc 	bl	8002116 <I2C_WaitOnBTFFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2b04      	cmp	r3, #4
 800172a:	d107      	bne.n	800173c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e01a      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d194      	bne.n	8001672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001774:	2302      	movs	r3, #2
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	00100002 	.word	0x00100002
 8001784:	ffff0000 	.word	0xffff0000

08001788 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	460b      	mov	r3, r1
 8001796:	817b      	strh	r3, [r7, #10]
 8001798:	4613      	mov	r3, r2
 800179a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff fa7a 	bl	8000c98 <HAL_GetTick>
 80017a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	f040 823f 	bne.w	8001c32 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2319      	movs	r3, #25
 80017ba:	2201      	movs	r2, #1
 80017bc:	497f      	ldr	r1, [pc, #508]	; (80019bc <HAL_I2C_Master_Receive+0x234>)
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 fb92 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80017ca:	2302      	movs	r3, #2
 80017cc:	e232      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_I2C_Master_Receive+0x54>
 80017d8:	2302      	movs	r3, #2
 80017da:	e22b      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d007      	beq.n	8001802 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001810:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2222      	movs	r2, #34	; 0x22
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2210      	movs	r2, #16
 800181e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	893a      	ldrh	r2, [r7, #8]
 8001832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4a5f      	ldr	r2, [pc, #380]	; (80019c0 <HAL_I2C_Master_Receive+0x238>)
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001844:	8979      	ldrh	r1, [r7, #10]
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fa7e 	bl	8001d4c <I2C_MasterRequestRead>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e1ec      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	d113      	bne.n	800188a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	e1c0      	b.n	8001c0c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188e:	2b01      	cmp	r3, #1
 8001890:	d11e      	bne.n	80018d0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018a2:	b672      	cpsid	i
}
 80018a4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018cc:	b662      	cpsie	i
}
 80018ce:	e035      	b.n	800193c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d11e      	bne.n	8001916 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001910:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001912:	b662      	cpsie	i
}
 8001914:	e012      	b.n	800193c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800193c:	e166      	b.n	8001c0c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	2b03      	cmp	r3, #3
 8001944:	f200 811f 	bhi.w	8001b86 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	2b01      	cmp	r3, #1
 800194e:	d123      	bne.n	8001998 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 fc1f 	bl	8002198 <I2C_WaitOnRXNEFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e167      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691a      	ldr	r2, [r3, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001996:	e139      	b.n	8001c0c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	2b02      	cmp	r3, #2
 800199e:	d152      	bne.n	8001a46 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	2200      	movs	r2, #0
 80019a8:	4906      	ldr	r1, [pc, #24]	; (80019c4 <HAL_I2C_Master_Receive+0x23c>)
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 fa9c 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e13c      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
 80019ba:	bf00      	nop
 80019bc:	00100002 	.word	0x00100002
 80019c0:	ffff0000 	.word	0xffff0000
 80019c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691a      	ldr	r2, [r3, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a0e:	b662      	cpsie	i
}
 8001a10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a44:	e0e2      	b.n	8001c0c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	497b      	ldr	r1, [pc, #492]	; (8001c3c <HAL_I2C_Master_Receive+0x4b4>)
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fa49 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0e9      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	1c5a      	adds	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001aa6:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_I2C_Master_Receive+0x4b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	08db      	lsrs	r3, r3, #3
 8001aac:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <HAL_I2C_Master_Receive+0x4bc>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0a1a      	lsrs	r2, r3, #8
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d118      	bne.n	8001afe <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f043 0220 	orr.w	r2, r3, #32
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001aee:	b662      	cpsie	i
}
 8001af0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e09a      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d1d9      	bne.n	8001ac0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4e:	b662      	cpsie	i
}
 8001b50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b84:	e042      	b.n	8001c0c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fb04 	bl	8002198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e04c      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d118      	bne.n	8001c0c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f ae94 	bne.w	800193e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2220      	movs	r2, #32
 8001c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	00010004 	.word	0x00010004
 8001c40:	20000000 	.word	0x20000000
 8001c44:	14f8b589 	.word	0x14f8b589

08001c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d006      	beq.n	8001c72 <I2C_MasterRequestWrite+0x2a>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d003      	beq.n	8001c72 <I2C_MasterRequestWrite+0x2a>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c70:	d108      	bne.n	8001c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e00b      	b.n	8001c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d107      	bne.n	8001c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f91d 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc2:	d103      	bne.n	8001ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e035      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd8:	d108      	bne.n	8001cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	e01b      	b.n	8001d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cec:	897b      	ldrh	r3, [r7, #10]
 8001cee:	11db      	asrs	r3, r3, #7
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0306 	and.w	r3, r3, #6
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f063 030f 	orn	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <I2C_MasterRequestWrite+0xfc>)
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f943 	bl	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e010      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d1a:	897b      	ldrh	r3, [r7, #10]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <I2C_MasterRequestWrite+0x100>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f933 	bl	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	00010008 	.word	0x00010008
 8001d48:	00010002 	.word	0x00010002

08001d4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d006      	beq.n	8001d86 <I2C_MasterRequestRead+0x3a>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d003      	beq.n	8001d86 <I2C_MasterRequestRead+0x3a>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d84:	d108      	bne.n	8001d98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	2b11      	cmp	r3, #17
 8001d9e:	d107      	bne.n	8001db0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f893 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd6:	d103      	bne.n	8001de0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e079      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dec:	d108      	bne.n	8001e00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	e05f      	b.n	8001ec0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	11db      	asrs	r3, r3, #7
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 0306 	and.w	r3, r3, #6
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f063 030f 	orn	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4930      	ldr	r1, [pc, #192]	; (8001ee0 <I2C_MasterRequestRead+0x194>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f8b9 	bl	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e054      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4929      	ldr	r1, [pc, #164]	; (8001ee4 <I2C_MasterRequestRead+0x198>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f8a9 	bl	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e044      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f831 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9a:	d103      	bne.n	8001ea4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e017      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ea8:	897b      	ldrh	r3, [r7, #10]
 8001eaa:	11db      	asrs	r3, r3, #7
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f003 0306 	and.w	r3, r3, #6
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f063 030e 	orn	r3, r3, #14
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <I2C_MasterRequestRead+0x198>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f865 	bl	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	00010008 	.word	0x00010008
 8001ee4:	00010002 	.word	0x00010002

08001ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef8:	e025      	b.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f00:	d021      	beq.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	f7fe fec9 	bl	8000c98 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d116      	bne.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f043 0220 	orr.w	r2, r3, #32
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e023      	b.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10d      	bne.n	8001f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf0c      	ite	eq
 8001f62:	2301      	moveq	r3, #1
 8001f64:	2300      	movne	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	e00c      	b.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	43da      	mvns	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4013      	ands	r3, r2
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d0b6      	beq.n	8001efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fa4:	e051      	b.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb4:	d123      	bne.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e046      	b.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002004:	d021      	beq.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002006:	f7fe fe47 	bl	8000c98 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	d302      	bcc.n	800201c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d116      	bne.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f043 0220 	orr.w	r2, r3, #32
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e020      	b.n	800208c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0c1b      	lsrs	r3, r3, #16
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d10c      	bne.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4013      	ands	r3, r2
 8002060:	b29b      	uxth	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf14      	ite	ne
 8002066:	2301      	movne	r3, #1
 8002068:	2300      	moveq	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	e00b      	b.n	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	43da      	mvns	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4013      	ands	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d18d      	bne.n	8001fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a0:	e02d      	b.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f8ce 	bl	8002244 <I2C_IsAcknowledgeFailed>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e02d      	b.n	800210e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020b8:	d021      	beq.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ba:	f7fe fded 	bl	8000c98 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d116      	bne.n	80020fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f043 0220 	orr.w	r2, r3, #32
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e007      	b.n	800210e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002108:	2b80      	cmp	r3, #128	; 0x80
 800210a:	d1ca      	bne.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002122:	e02d      	b.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f88d 	bl	8002244 <I2C_IsAcknowledgeFailed>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e02d      	b.n	8002190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800213a:	d021      	beq.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800213c:	f7fe fdac 	bl	8000c98 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	d302      	bcc.n	8002152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	f043 0220 	orr.w	r2, r3, #32
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e007      	b.n	8002190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b04      	cmp	r3, #4
 800218c:	d1ca      	bne.n	8002124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021a4:	e042      	b.n	800222c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d119      	bne.n	80021e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0210 	mvn.w	r2, #16
 80021bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e029      	b.n	800223c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e8:	f7fe fd56 	bl	8000c98 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d302      	bcc.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e007      	b.n	800223c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	d1b5      	bne.n	80021a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225a:	d11b      	bne.n	8002294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e272      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8087 	beq.w	80023ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022c0:	4b92      	ldr	r3, [pc, #584]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d00c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022cc:	4b8f      	ldr	r3, [pc, #572]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d112      	bne.n	80022fe <HAL_RCC_OscConfig+0x5e>
 80022d8:	4b8c      	ldr	r3, [pc, #560]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d10b      	bne.n	80022fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e6:	4b89      	ldr	r3, [pc, #548]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d06c      	beq.n	80023cc <HAL_RCC_OscConfig+0x12c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d168      	bne.n	80023cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e24c      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x76>
 8002308:	4b80      	ldr	r3, [pc, #512]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a7f      	ldr	r2, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e02e      	b.n	8002374 <HAL_RCC_OscConfig+0xd4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x98>
 800231e:	4b7b      	ldr	r3, [pc, #492]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7a      	ldr	r2, [pc, #488]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b78      	ldr	r3, [pc, #480]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a77      	ldr	r2, [pc, #476]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xd4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0xbc>
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a71      	ldr	r2, [pc, #452]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6e      	ldr	r2, [pc, #440]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xd4>
 800235c:	4b6b      	ldr	r3, [pc, #428]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6a      	ldr	r2, [pc, #424]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b68      	ldr	r3, [pc, #416]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a67      	ldr	r2, [pc, #412]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fc8c 	bl	8000c98 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fc88 	bl	8000c98 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e200      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	4b5d      	ldr	r3, [pc, #372]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xe4>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fc78 	bl	8000c98 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe fc74 	bl	8000c98 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1ec      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x10c>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d063      	beq.n	80024a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023da:	4b4c      	ldr	r3, [pc, #304]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023e6:	4b49      	ldr	r3, [pc, #292]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d11c      	bne.n	800242c <HAL_RCC_OscConfig+0x18c>
 80023f2:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x176>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d001      	beq.n	8002416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1c0      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4939      	ldr	r1, [pc, #228]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	e03a      	b.n	80024a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002434:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_RCC_OscConfig+0x270>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe fc2d 	bl	8000c98 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fc29 	bl	8000c98 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e1a1      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4927      	ldr	r1, [pc, #156]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e015      	b.n	80024a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_RCC_OscConfig+0x270>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fc0c 	bl	8000c98 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002484:	f7fe fc08 	bl	8000c98 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e180      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03a      	beq.n	8002524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d019      	beq.n	80024ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b6:	4b17      	ldr	r3, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024bc:	f7fe fbec 	bl	8000c98 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7fe fbe8 	bl	8000c98 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e160      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f000 fad8 	bl	8002a98 <RCC_Delay>
 80024e8:	e01c      	b.n	8002524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7fe fbd2 	bl	8000c98 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f6:	e00f      	b.n	8002518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f8:	f7fe fbce 	bl	8000c98 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d908      	bls.n	8002518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e146      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	42420000 	.word	0x42420000
 8002514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	4b92      	ldr	r3, [pc, #584]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e9      	bne.n	80024f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a6 	beq.w	800267e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b8b      	ldr	r3, [pc, #556]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b88      	ldr	r3, [pc, #544]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	4a87      	ldr	r2, [pc, #540]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	61d3      	str	r3, [r2, #28]
 800254e:	4b85      	ldr	r3, [pc, #532]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b82      	ldr	r3, [pc, #520]	; (8002768 <HAL_RCC_OscConfig+0x4c8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <HAL_RCC_OscConfig+0x4c8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7e      	ldr	r2, [pc, #504]	; (8002768 <HAL_RCC_OscConfig+0x4c8>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe fb8f 	bl	8000c98 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe fb8b 	bl	8000c98 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e103      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	4b75      	ldr	r3, [pc, #468]	; (8002768 <HAL_RCC_OscConfig+0x4c8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x312>
 80025a4:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a6e      	ldr	r2, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6213      	str	r3, [r2, #32]
 80025b0:	e02d      	b.n	800260e <HAL_RCC_OscConfig+0x36e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x334>
 80025ba:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a69      	ldr	r2, [pc, #420]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4a66      	ldr	r2, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6213      	str	r3, [r2, #32]
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x36e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x356>
 80025dc:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a60      	ldr	r2, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	4b5e      	ldr	r3, [pc, #376]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4a5d      	ldr	r2, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x36e>
 80025f6:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a5a      	ldr	r2, [pc, #360]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6213      	str	r3, [r2, #32]
 8002602:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a57      	ldr	r2, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002616:	f7fe fb3f 	bl	8000c98 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fb3b 	bl	8000c98 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0b1      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x37e>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe fb29 	bl	8000c98 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fb25 	bl	8000c98 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e09b      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b40      	ldr	r3, [pc, #256]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b3c      	ldr	r3, [pc, #240]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a3b      	ldr	r2, [pc, #236]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8087 	beq.w	8002796 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002688:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d061      	beq.n	8002758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d146      	bne.n	800272a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b33      	ldr	r3, [pc, #204]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe faf9 	bl	8000c98 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe faf5 	bl	8000c98 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e06d      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4921      	ldr	r1, [pc, #132]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a19      	ldr	r1, [r3, #32]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	430b      	orrs	r3, r1
 80026f6:	491b      	ldr	r1, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7fe fac9 	bl	8000c98 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fac5 	bl	8000c98 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e03d      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x46a>
 8002728:	e035      	b.n	8002796 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_OscConfig+0x4cc>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fab2 	bl	8000c98 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe faae 	bl	8000c98 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e026      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x498>
 8002756:	e01e      	b.n	8002796 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e019      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
 8002764:	40021000 	.word	0x40021000
 8002768:	40007000 	.word	0x40007000
 800276c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCC_OscConfig+0x500>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	429a      	cmp	r2, r3
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d001      	beq.n	8002796 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0d0      	b.n	800295a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b8:	4b6a      	ldr	r3, [pc, #424]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d910      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c6:	4b67      	ldr	r3, [pc, #412]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 0207 	bic.w	r2, r3, #7
 80027ce:	4965      	ldr	r1, [pc, #404]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b8      	b.n	800295a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800280a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	494d      	ldr	r1, [pc, #308]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d040      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d115      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d107      	bne.n	8002872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002862:	4b41      	ldr	r3, [pc, #260]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e073      	b.n	800295a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06b      	b.n	800295a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002882:	4b39      	ldr	r3, [pc, #228]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4936      	ldr	r1, [pc, #216]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002894:	f7fe fa00 	bl	8000c98 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	e00a      	b.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7fe f9fc 	bl	8000c98 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e053      	b.n	800295a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 020c 	and.w	r2, r3, #12
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1eb      	bne.n	800289c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c4:	4b27      	ldr	r3, [pc, #156]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d210      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	4922      	ldr	r1, [pc, #136]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e032      	b.n	800295a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4916      	ldr	r1, [pc, #88]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490e      	ldr	r1, [pc, #56]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002932:	f000 f821 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c8>)
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1cc>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1d0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe f95e 	bl	8000c14 <HAL_InitTick>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40022000 	.word	0x40022000
 8002968:	40021000 	.word	0x40021000
 800296c:	080037c4 	.word	0x080037c4
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	b490      	push	{r4, r7}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xac>)
 8002980:	1d3c      	adds	r4, r7, #4
 8002982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002988:	f240 2301 	movw	r3, #513	; 0x201
 800298c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x40>
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x46>
 80029b6:	e02b      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b8:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ba:	623b      	str	r3, [r7, #32]
      break;
 80029bc:	e02b      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	0c9b      	lsrs	r3, r3, #18
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3328      	adds	r3, #40	; 0x28
 80029c8:	443b      	add	r3, r7
 80029ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0c5b      	lsrs	r3, r3, #17
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	3328      	adds	r3, #40	; 0x28
 80029e6:	443b      	add	r3, r7
 80029e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029f2:	fb03 f202 	mul.w	r2, r3, r2
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	e004      	b.n	8002a0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a04:	fb02 f303 	mul.w	r3, r2, r3
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	623b      	str	r3, [r7, #32]
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a12:	623b      	str	r3, [r7, #32]
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	6a3b      	ldr	r3, [r7, #32]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc90      	pop	{r4, r7}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	080037b4 	.word	0x080037b4
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	007a1200 	.word	0x007a1200
 8002a30:	003d0900 	.word	0x003d0900

08002a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	20000000 	.word	0x20000000

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff2 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	080037d4 	.word	0x080037d4

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffde 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	0adb      	lsrs	r3, r3, #11
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	080037d4 	.word	0x080037d4

08002a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <RCC_Delay+0x34>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <RCC_Delay+0x38>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a5b      	lsrs	r3, r3, #9
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ab4:	bf00      	nop
  }
  while (Delay --);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	60fa      	str	r2, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f9      	bne.n	8002ab4 <RCC_Delay+0x1c>
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	10624dd3 	.word	0x10624dd3

08002ad4 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e033      	b.n	8002b4e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd ffc2 	bl	8000a84 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fb61 	bl	80031d0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b2c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d117      	bne.n	8002bbe <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d012      	beq.n	8002bbe <HAL_USART_IRQHandler+0x66>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f003 0320 	and.w	r3, r3, #32
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b22      	cmp	r3, #34	; 0x22
 8002bac:	d103      	bne.n	8002bb6 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f9b4 	bl	8002f1c <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8002bb4:	e0e9      	b.n	8002d8a <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa36 	bl	8003028 <USART_TransmitReceive_IT>
      return;
 8002bbc:	e0e5      	b.n	8002d8a <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80bb 	beq.w	8002d3c <HAL_USART_IRQHandler+0x1e4>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <HAL_USART_IRQHandler+0x84>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80b0 	beq.w	8002d3c <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_USART_IRQHandler+0xa4>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_USART_IRQHandler+0xc4>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0202 	orr.w	r2, r3, #2
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_USART_IRQHandler+0xe4>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00f      	beq.n	8002c66 <HAL_USART_IRQHandler+0x10e>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <HAL_USART_IRQHandler+0x102>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f043 0208 	orr.w	r2, r3, #8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 808c 	beq.w	8002d88 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d011      	beq.n	8002c9e <HAL_USART_IRQHandler+0x146>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00c      	beq.n	8002c9e <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b22      	cmp	r3, #34	; 0x22
 8002c8e:	d103      	bne.n	8002c98 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f943 	bl	8002f1c <USART_Receive_IT>
 8002c96:	e002      	b.n	8002c9e <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f9c5 	bl	8003028 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	bf14      	ite	ne
 8002cac:	2301      	movne	r3, #1
 8002cae:	2300      	moveq	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_USART_IRQHandler+0x16e>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d031      	beq.n	8002d2a <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f888 	bl	8002ddc <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d023      	beq.n	8002d22 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce8:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d013      	beq.n	8002d1a <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <HAL_USART_IRQHandler+0x238>)
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f906 	bl	8000f10 <HAL_DMA_Abort_IT>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d14:	4610      	mov	r0, r2
 8002d16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	e00e      	b.n	8002d38 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f855 	bl	8002dca <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e00a      	b.n	8002d38 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f851 	bl	8002dca <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	e006      	b.n	8002d38 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f84d 	bl	8002dca <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d36:	e027      	b.n	8002d88 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8002d38:	bf00      	nop
    return;
 8002d3a:	e025      	b.n	8002d88 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d012      	beq.n	8002d6c <HAL_USART_IRQHandler+0x214>
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00d      	beq.n	8002d6c <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b12      	cmp	r3, #18
 8002d5a:	d103      	bne.n	8002d64 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f86e 	bl	8002e3e <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8002d62:	e012      	b.n	8002d8a <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f95f 	bl	8003028 <USART_TransmitReceive_IT>
    return;
 8002d6a:	e00e      	b.n	8002d8a <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_USART_IRQHandler+0x232>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d004      	beq.n	8002d8a <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f8ab 	bl	8002edc <USART_EndTransmit_IT>
    return;
 8002d86:	e000      	b.n	8002d8a <HAL_USART_IRQHandler+0x232>
    return;
 8002d88:	bf00      	nop
  }
}
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	08002e17 	.word	0x08002e17

08002d94 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002df2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7ff ffca 	bl	8002dca <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b12      	cmp	r3, #18
 8002e50:	d13e      	bne.n	8002ed0 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d114      	bne.n	8002e86 <USART_Transmit_IT+0x48>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d110      	bne.n	8002e86 <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e78:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24
 8002e84:	e008      	b.n	8002e98 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6251      	str	r1, [r2, #36]	; 0x24
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	8551      	strh	r1, [r2, #42]	; 0x2a
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10f      	bne.n	8002ecc <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eba:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef2:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695a      	ldr	r2, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff ff41 	bl	8002d94 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b22      	cmp	r3, #34	; 0x22
 8002f2e:	d176      	bne.n	800301e <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d117      	bne.n	8002f6a <USART_Receive_IT+0x4e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d113      	bne.n	8002f6a <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f68:	e026      	b.n	8002fb8 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d007      	beq.n	8002f8e <USART_Receive_IT+0x72>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <USART_Receive_IT+0x80>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	701a      	strb	r2, [r3, #0]
 8002f9a:	e008      	b.n	8002fae <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d120      	bne.n	8003012 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0220 	bic.w	r2, r2, #32
 8002fde:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fee:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fecc 	bl	8002da6 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e006      	b.n	8003020 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b32      	cmp	r3, #50	; 0x32
 800303a:	f040 80c4 	bne.w	80031c6 <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d03f      	beq.n	80030c8 <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b80      	cmp	r3, #128	; 0x80
 8003054:	d138      	bne.n	80030c8 <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305e:	d116      	bne.n	800308e <USART_TransmitReceive_IT+0x66>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d112      	bne.n	800308e <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003080:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
 800308c:	e008      	b.n	80030a0 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6251      	str	r1, [r2, #36]	; 0x24
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c6:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d051      	beq.n	8003176 <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d14a      	bne.n	8003176 <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	d117      	bne.n	800311a <USART_TransmitReceive_IT+0xf2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d113      	bne.n	800311a <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003108:	b29a      	uxth	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
 8003118:	e026      	b.n	8003168 <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312c:	d007      	beq.n	800313e <USART_TransmitReceive_IT+0x116>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <USART_TransmitReceive_IT+0x124>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e008      	b.n	800315e <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d120      	bne.n	80031c2 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0220 	bic.w	r2, r2, #32
 800318e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800319e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fdfd 	bl	8002db8 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e002      	b.n	80031c8 <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 020c 	bic.w	r2, r2, #12
 80031ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031fa:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003204:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800321a:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003232:	f023 030c 	bic.w	r3, r3, #12
 8003236:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003264:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a53      	ldr	r2, [pc, #332]	; (80033b8 <USART_SetConfig+0x1e8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d14f      	bne.n	8003310 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003270:	f7ff fbfe 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 8003274:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009a      	lsls	r2, r3, #2
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fbb2 f3f3 	udiv	r3, r2, r3
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <USART_SetConfig+0x1ec>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	0119      	lsls	r1, r3, #4
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009a      	lsls	r2, r3, #2
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ac:	4b43      	ldr	r3, [pc, #268]	; (80033bc <USART_SetConfig+0x1ec>)
 80032ae:	fba3 0302 	umull	r0, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	2064      	movs	r0, #100	; 0x64
 80032b6:	fb00 f303 	mul.w	r3, r0, r3
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	3332      	adds	r3, #50	; 0x32
 80032c0:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <USART_SetConfig+0x1ec>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80032ce:	4419      	add	r1, r3
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009a      	lsls	r2, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e6:	4b35      	ldr	r3, [pc, #212]	; (80033bc <USART_SetConfig+0x1ec>)
 80032e8:	fba3 0302 	umull	r0, r3, r3, r2
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	2064      	movs	r0, #100	; 0x64
 80032f0:	fb00 f303 	mul.w	r3, r0, r3
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	3332      	adds	r3, #50	; 0x32
 80032fa:	4a30      	ldr	r2, [pc, #192]	; (80033bc <USART_SetConfig+0x1ec>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	440a      	add	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 800330e:	e04e      	b.n	80033ae <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff fb9a 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003314:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009a      	lsls	r2, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <USART_SetConfig+0x1ec>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	0119      	lsls	r1, r3, #4
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009a      	lsls	r2, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fbb2 f2f3 	udiv	r2, r2, r3
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <USART_SetConfig+0x1ec>)
 800334e:	fba3 0302 	umull	r0, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2064      	movs	r0, #100	; 0x64
 8003356:	fb00 f303 	mul.w	r3, r0, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a16      	ldr	r2, [pc, #88]	; (80033bc <USART_SetConfig+0x1ec>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 800336e:	4419      	add	r1, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009a      	lsls	r2, r3, #2
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	fbb2 f2f3 	udiv	r2, r2, r3
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <USART_SetConfig+0x1ec>)
 8003388:	fba3 0302 	umull	r0, r3, r3, r2
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	2064      	movs	r0, #100	; 0x64
 8003390:	fb00 f303 	mul.w	r3, r0, r3
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	3332      	adds	r3, #50	; 0x32
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <USART_SetConfig+0x1ec>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	440a      	add	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40013800 	.word	0x40013800
 80033bc:	51eb851f 	.word	0x51eb851f

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2600      	movs	r6, #0
 80033c4:	4d0c      	ldr	r5, [pc, #48]	; (80033f8 <__libc_init_array+0x38>)
 80033c6:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <__libc_init_array+0x3c>)
 80033c8:	1b64      	subs	r4, r4, r5
 80033ca:	10a4      	asrs	r4, r4, #2
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	f000 f822 	bl	8003418 <_init>
 80033d4:	2600      	movs	r6, #0
 80033d6:	4d0a      	ldr	r5, [pc, #40]	; (8003400 <__libc_init_array+0x40>)
 80033d8:	4c0a      	ldr	r4, [pc, #40]	; (8003404 <__libc_init_array+0x44>)
 80033da:	1b64      	subs	r4, r4, r5
 80033dc:	10a4      	asrs	r4, r4, #2
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	080037dc 	.word	0x080037dc
 80033fc:	080037dc 	.word	0x080037dc
 8003400:	080037dc 	.word	0x080037dc
 8003404:	080037e0 	.word	0x080037e0

08003408 <memset>:
 8003408:	4603      	mov	r3, r0
 800340a:	4402      	add	r2, r0
 800340c:	4293      	cmp	r3, r2
 800340e:	d100      	bne.n	8003412 <memset+0xa>
 8003410:	4770      	bx	lr
 8003412:	f803 1b01 	strb.w	r1, [r3], #1
 8003416:	e7f9      	b.n	800340c <memset+0x4>

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
