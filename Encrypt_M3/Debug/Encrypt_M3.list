
Encrypt_M3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000409c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004440  08004440  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004440  08004440  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004440  08004440  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000007c  080044c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080044c4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098a7  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d06  00000000  00000000  0002998f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007bc  00000000  00000000  0002c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000177c1  00000000  00000000  0002c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d092  00000000  00000000  00044015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000847fd  00000000  00000000  000510a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c14  00000000  00000000  000d58a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d84b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004190 	.word	0x08004190

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004190 	.word	0x08004190

0800014c <atCRC>:
uint8_t CRC_LSB = 0x00;
uint8_t CRC_MSB = 0x00;


void atCRC(uint8_t *data, uint8_t size, uint8_t *crc_le)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]
    uint8_t counter;
    uint16_t crc_register = 0;
 800015a:	2300      	movs	r3, #0
 800015c:	83bb      	strh	r3, [r7, #28]
    uint16_t polynom = 0x8005;
 800015e:	f248 0305 	movw	r3, #32773	; 0x8005
 8000162:	833b      	strh	r3, [r7, #24]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 1; counter < (size - 2); counter++)
 8000164:	2301      	movs	r3, #1
 8000166:	77fb      	strb	r3, [r7, #31]
 8000168:	e027      	b.n	80001ba <atCRC+0x6e>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 800016a:	2301      	movs	r3, #1
 800016c:	76fb      	strb	r3, [r7, #27]
 800016e:	e01e      	b.n	80001ae <atCRC+0x62>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
 8000170:	7ffb      	ldrb	r3, [r7, #31]
 8000172:	68fa      	ldr	r2, [r7, #12]
 8000174:	4413      	add	r3, r2
 8000176:	781a      	ldrb	r2, [r3, #0]
 8000178:	7efb      	ldrb	r3, [r7, #27]
 800017a:	4013      	ands	r3, r2
 800017c:	b2db      	uxtb	r3, r3
 800017e:	2b00      	cmp	r3, #0
 8000180:	bf14      	ite	ne
 8000182:	2301      	movne	r3, #1
 8000184:	2300      	moveq	r3, #0
 8000186:	b2db      	uxtb	r3, r3
 8000188:	75fb      	strb	r3, [r7, #23]
            crc_bit = crc_register >> 15;
 800018a:	8bbb      	ldrh	r3, [r7, #28]
 800018c:	0bdb      	lsrs	r3, r3, #15
 800018e:	b29b      	uxth	r3, r3
 8000190:	75bb      	strb	r3, [r7, #22]
            crc_register <<= 1;
 8000192:	8bbb      	ldrh	r3, [r7, #28]
 8000194:	005b      	lsls	r3, r3, #1
 8000196:	83bb      	strh	r3, [r7, #28]
            if (data_bit != crc_bit)
 8000198:	7dfa      	ldrb	r2, [r7, #23]
 800019a:	7dbb      	ldrb	r3, [r7, #22]
 800019c:	429a      	cmp	r2, r3
 800019e:	d003      	beq.n	80001a8 <atCRC+0x5c>
            {
                crc_register ^= polynom;
 80001a0:	8bba      	ldrh	r2, [r7, #28]
 80001a2:	8b3b      	ldrh	r3, [r7, #24]
 80001a4:	4053      	eors	r3, r2
 80001a6:	83bb      	strh	r3, [r7, #28]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
 80001a8:	7efb      	ldrb	r3, [r7, #27]
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	76fb      	strb	r3, [r7, #27]
 80001ae:	7efb      	ldrb	r3, [r7, #27]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d1dd      	bne.n	8000170 <atCRC+0x24>
    for (counter = 1; counter < (size - 2); counter++)
 80001b4:	7ffb      	ldrb	r3, [r7, #31]
 80001b6:	3301      	adds	r3, #1
 80001b8:	77fb      	strb	r3, [r7, #31]
 80001ba:	7ffa      	ldrb	r2, [r7, #31]
 80001bc:	7afb      	ldrb	r3, [r7, #11]
 80001be:	3b02      	subs	r3, #2
 80001c0:	429a      	cmp	r2, r3
 80001c2:	dbd2      	blt.n	800016a <atCRC+0x1e>
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
 80001c4:	8bbb      	ldrh	r3, [r7, #28]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
 80001cc:	8bbb      	ldrh	r3, [r7, #28]
 80001ce:	0a1b      	lsrs	r3, r3, #8
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3301      	adds	r3, #1
 80001d6:	b2d2      	uxtb	r2, r2
 80001d8:	701a      	strb	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	3724      	adds	r7, #36	; 0x24
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <WakeUp>:


void WakeUp(uint8_t *receiv){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af02      	add	r7, sp, #8
 80001ea:	6078      	str	r0, [r7, #4]

	uint8_t data = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Receive(&hi2c2, 0xFE, &data, sizeof(data), 1000);
 80001f0:	f107 020f 	add.w	r2, r7, #15
 80001f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2301      	movs	r3, #1
 80001fc:	21fe      	movs	r1, #254	; 0xfe
 80001fe:	4818      	ldr	r0, [pc, #96]	; (8000260 <WakeUp+0x7c>)
 8000200:	f002 f8a4 	bl	800234c <HAL_I2C_Master_Receive>
	HAL_Delay(5); // 2.5 ms para acordar; 45 ms para entrar em sleep
 8000204:	2005      	movs	r0, #5
 8000206:	f001 fb33 	bl	8001870 <HAL_Delay>
	// first read: 0 byte read - should receive an ACK

	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, &data, 1, 1000);
 800020a:	f107 020f 	add.w	r2, r7, #15
 800020e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000212:	9300      	str	r3, [sp, #0]
 8000214:	2301      	movs	r3, #1
 8000216:	21c8      	movs	r1, #200	; 0xc8
 8000218:	4811      	ldr	r0, [pc, #68]	; (8000260 <WakeUp+0x7c>)
 800021a:	f002 f897 	bl	800234c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 800021e:	2005      	movs	r0, #5
 8000220:	f001 fb26 	bl	8001870 <HAL_Delay>

	// Read 88bytes
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, &data, sizeof(data), 1000);	// Send 1 byte
 8000224:	f107 020f 	add.w	r2, r7, #15
 8000228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2301      	movs	r3, #1
 8000230:	21c8      	movs	r1, #200	; 0xc8
 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <WakeUp+0x7c>)
 8000234:	f001 ff8c 	bl	8002150 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000238:	2005      	movs	r0, #5
 800023a:	f001 fb19 	bl	8001870 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, 4, 1000); 		    	// Receiv: 0x04, 0x11, 0x33, 0x43.
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	2304      	movs	r3, #4
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	21c8      	movs	r1, #200	; 0xc8
 800024a:	4805      	ldr	r0, [pc, #20]	; (8000260 <WakeUp+0x7c>)
 800024c:	f002 f87e 	bl	800234c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 8000250:	2005      	movs	r0, #5
 8000252:	f001 fb0d 	bl	8001870 <HAL_Delay>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000098 	.word	0x20000098

08000264 <ReadConfig>:


void ReadConfig(uint8_t *data, uint16_t size, uint8_t *receiv) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af02      	add	r7, sp, #8
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	460b      	mov	r3, r1
 800026e:	607a      	str	r2, [r7, #4]
 8000270:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, data, 8, 1000); 		    // Send read command
 8000272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2308      	movs	r3, #8
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	21c8      	movs	r1, #200	; 0xc8
 800027e:	480b      	ldr	r0, [pc, #44]	; (80002ac <ReadConfig+0x48>)
 8000280:	f001 ff66 	bl	8002150 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000284:	2005      	movs	r0, #5
 8000286:	f001 faf3 	bl	8001870 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000); 	    // Receive: data packet size, 0x01 0x23..., CRC_LSB, CRC_MSB
 800028a:	897b      	ldrh	r3, [r7, #10]
 800028c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000290:	9200      	str	r2, [sp, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	21c8      	movs	r1, #200	; 0xc8
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <ReadConfig+0x48>)
 8000298:	f002 f858 	bl	800234c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 800029c:	2005      	movs	r0, #5
 800029e:	f001 fae7 	bl	8001870 <HAL_Delay>
}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000098 	.word	0x20000098

080002b0 <CommandNonce>:
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
	HAL_Delay(5);
}


void CommandNonce(uint8_t *NumIn, uint16_t size, uint8_t *receiv){ //OK
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	460b      	mov	r3, r1
 80002ba:	607a      	str	r2, [r7, #4]
 80002bc:	817b      	strh	r3, [r7, #10]

	// NONCE command: {COMMAND, COUNT, OPCODE, Param1_mode, 0x00, 0x00, NumIn[20], CRC_LSB, CRC_MSB}
	uint8_t noncecommand[28]; //40
	uint8_t CRC_receiv[2];

    noncecommand[0] = COMMAND;
 80002be:	2303      	movs	r3, #3
 80002c0:	763b      	strb	r3, [r7, #24]
    noncecommand[1] =  ((sizeof(noncecommand)-1) & 0xFF); //20
 80002c2:	231b      	movs	r3, #27
 80002c4:	767b      	strb	r3, [r7, #25]
    noncecommand[2] = COMMAND_NONCE;
 80002c6:	2316      	movs	r3, #22
 80002c8:	76bb      	strb	r3, [r7, #26]
    noncecommand[3] = 0x00; // modo3
 80002ca:	2300      	movs	r3, #0
 80002cc:	76fb      	strb	r3, [r7, #27]
    noncecommand[4] = 0x00;
 80002ce:	2300      	movs	r3, #0
 80002d0:	773b      	strb	r3, [r7, #28]
    noncecommand[5] = 0x00;
 80002d2:	2300      	movs	r3, #0
 80002d4:	777b      	strb	r3, [r7, #29]

	for(uint8_t i = 0; i <= 20; i++){  // <=32
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80002dc:	e010      	b.n	8000300 <CommandNonce+0x50>
		 noncecommand[6 + i] = NumIn[i];
 80002de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	441a      	add	r2, r3
 80002e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002ea:	3306      	adds	r3, #6
 80002ec:	7812      	ldrb	r2, [r2, #0]
 80002ee:	3338      	adds	r3, #56	; 0x38
 80002f0:	443b      	add	r3, r7
 80002f2:	f803 2c20 	strb.w	r2, [r3, #-32]
	for(uint8_t i = 0; i <= 20; i++){  // <=32
 80002f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80002fa:	3301      	adds	r3, #1
 80002fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000304:	2b14      	cmp	r3, #20
 8000306:	d9ea      	bls.n	80002de <CommandNonce+0x2e>
	}

	atCRC(noncecommand,sizeof(noncecommand), CRC_receiv);
 8000308:	f107 0214 	add.w	r2, r7, #20
 800030c:	f107 0318 	add.w	r3, r7, #24
 8000310:	211c      	movs	r1, #28
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff1a 	bl	800014c <atCRC>
	noncecommand[sizeof(noncecommand) - 2] = CRC_receiv[0] ;
 8000318:	7d3b      	ldrb	r3, [r7, #20]
 800031a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	noncecommand[sizeof(noncecommand) - 1] = CRC_receiv[1] ;
 800031e:	7d7b      	ldrb	r3, [r7, #21]
 8000320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, noncecommand, sizeof(noncecommand), 1000);
 8000324:	f107 0218 	add.w	r2, r7, #24
 8000328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	231c      	movs	r3, #28
 8000330:	21c8      	movs	r1, #200	; 0xc8
 8000332:	480b      	ldr	r0, [pc, #44]	; (8000360 <CommandNonce+0xb0>)
 8000334:	f001 ff0c 	bl	8002150 <HAL_I2C_Master_Transmit>
	HAL_Delay(40);
 8000338:	2028      	movs	r0, #40	; 0x28
 800033a:	f001 fa99 	bl	8001870 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 800033e:	897b      	ldrh	r3, [r7, #10]
 8000340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	21c8      	movs	r1, #200	; 0xc8
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <CommandNonce+0xb0>)
 800034c:	f001 fffe 	bl	800234c <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 8000350:	200a      	movs	r0, #10
 8000352:	f001 fa8d 	bl	8001870 <HAL_Delay>
}
 8000356:	bf00      	nop
 8000358:	3738      	adds	r7, #56	; 0x38
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000098 	.word	0x20000098

08000364 <GendigCommand>:


void GendigCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t size, uint8_t *receiv){
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af02      	add	r7, sp, #8
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	4603      	mov	r3, r0
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	460b      	mov	r3, r1
 8000372:	71bb      	strb	r3, [r7, #6]
 8000374:	4613      	mov	r3, r2
 8000376:	717b      	strb	r3, [r7, #5]
	uint8_t GenDig[8];
	uint8_t CRC_receiv[2];
	//{COMMAND, SIZE_WRITE_GENDIG, COMMAND_GENDIG, ZONE_DATA, SlotID_LSB, SlotID_MSB, /*0x33, 0xe8*/ 0x00, 0x00};
	//atCRC(GenDig,sizeof(GenDig));

	GenDig[0] = COMMAND;
 8000378:	2303      	movs	r3, #3
 800037a:	743b      	strb	r3, [r7, #16]
	GenDig[1] = ((sizeof(GenDig)-1) & 0xFF);
 800037c:	2307      	movs	r3, #7
 800037e:	747b      	strb	r3, [r7, #17]
	GenDig[2] = COMMAND_GENDIG;
 8000380:	2315      	movs	r3, #21
 8000382:	74bb      	strb	r3, [r7, #18]
	GenDig[3] = ZONE_DATA;
 8000384:	2302      	movs	r3, #2
 8000386:	74fb      	strb	r3, [r7, #19]
	GenDig[4] = SlotID_LSB;
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	753b      	strb	r3, [r7, #20]
	GenDig[5] = SlotID_MSB;
 800038c:	79bb      	ldrb	r3, [r7, #6]
 800038e:	757b      	strb	r3, [r7, #21]

	atCRC(GenDig,sizeof(GenDig), CRC_receiv);
 8000390:	f107 020c 	add.w	r2, r7, #12
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2108      	movs	r1, #8
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fed6 	bl	800014c <atCRC>
	GenDig[6] = CRC_receiv[0] ;
 80003a0:	7b3b      	ldrb	r3, [r7, #12]
 80003a2:	75bb      	strb	r3, [r7, #22]
	GenDig[7] = CRC_receiv[1] ;
 80003a4:	7b7b      	ldrb	r3, [r7, #13]
 80003a6:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, GenDig, sizeof(GenDig), 1000);
 80003a8:	f107 0210 	add.w	r2, r7, #16
 80003ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b0:	9300      	str	r3, [sp, #0]
 80003b2:	2308      	movs	r3, #8
 80003b4:	21c8      	movs	r1, #200	; 0xc8
 80003b6:	480b      	ldr	r0, [pc, #44]	; (80003e4 <GendigCommand+0x80>)
 80003b8:	f001 feca 	bl	8002150 <HAL_I2C_Master_Transmit>
	HAL_Delay(30);
 80003bc:	201e      	movs	r0, #30
 80003be:	f001 fa57 	bl	8001870 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 80003c2:	797b      	ldrb	r3, [r7, #5]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ca:	9200      	str	r2, [sp, #0]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	21c8      	movs	r1, #200	; 0xc8
 80003d0:	4804      	ldr	r0, [pc, #16]	; (80003e4 <GendigCommand+0x80>)
 80003d2:	f001 ffbb 	bl	800234c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80003d6:	2005      	movs	r0, #5
 80003d8:	f001 fa4a 	bl	8001870 <HAL_Delay>
}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000098 	.word	0x20000098

080003e8 <MacCommand>:


void MacCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint16_t size, uint8_t *receiv){
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b098      	sub	sp, #96	; 0x60
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	603b      	str	r3, [r7, #0]
 80003f0:	4603      	mov	r3, r0
 80003f2:	71fb      	strb	r3, [r7, #7]
 80003f4:	460b      	mov	r3, r1
 80003f6:	71bb      	strb	r3, [r7, #6]
 80003f8:	4613      	mov	r3, r2
 80003fa:	80bb      	strh	r3, [r7, #4]

	uint8_t  MAC[40];
	uint8_t CRC_receiv[2];

	uint8_t Challenge [32] = {0x00};
 80003fc:	2300      	movs	r3, #0
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]
 8000412:	619a      	str	r2, [r3, #24]

	 MAC[0]= COMMAND;
 8000414:	2303      	movs	r3, #3
 8000416:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	 MAC[1]= ((sizeof(MAC)-1) & 0xFF); 	//size 0x27
 800041a:	2327      	movs	r3, #39	; 0x27
 800041c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	 MAC[2]= COMMAND_MAC;
 8000420:	2308      	movs	r3, #8
 8000422:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	 MAC[3]= 0x06 ; 	//mode funcional
 8000426:	2306      	movs	r3, #6
 8000428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 MAC[4]= SlotID_LSB;
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	 MAC[5]= SlotID_MSB;
 8000432:	79bb      	ldrb	r3, [r7, #6]
 8000434:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	for(uint8_t i = 0; i <= 32; i++){
 8000438:	2300      	movs	r3, #0
 800043a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800043e:	e011      	b.n	8000464 <MacCommand+0x7c>
		MAC[6 + i] = Challenge[i];
 8000440:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000448:	3306      	adds	r3, #6
 800044a:	3258      	adds	r2, #88	; 0x58
 800044c:	443a      	add	r2, r7
 800044e:	f812 2c50 	ldrb.w	r2, [r2, #-80]
 8000452:	3358      	adds	r3, #88	; 0x58
 8000454:	443b      	add	r3, r7
 8000456:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for(uint8_t i = 0; i <= 32; i++){
 800045a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800045e:	3301      	adds	r3, #1
 8000460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000468:	2b20      	cmp	r3, #32
 800046a:	d9e9      	bls.n	8000440 <MacCommand+0x58>
	}

	atCRC(MAC, sizeof(MAC), CRC_receiv);
 800046c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000474:	2128      	movs	r1, #40	; 0x28
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff fe68 	bl	800014c <atCRC>
	MAC[sizeof(MAC) - 2] = CRC_receiv[0] ;
 800047c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000480:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	MAC[sizeof(MAC) - 1] = CRC_receiv[1] ;
 8000484:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000488:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, MAC, sizeof(MAC), 1000);
 800048c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2328      	movs	r3, #40	; 0x28
 8000498:	21c8      	movs	r1, #200	; 0xc8
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <MacCommand+0xe0>)
 800049c:	f001 fe58 	bl	8002150 <HAL_I2C_Master_Transmit>
	HAL_Delay(35);
 80004a0:	2023      	movs	r0, #35	; 0x23
 80004a2:	f001 f9e5 	bl	8001870 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 80004a6:	88bb      	ldrh	r3, [r7, #4]
 80004a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	683a      	ldr	r2, [r7, #0]
 80004b0:	21c8      	movs	r1, #200	; 0xc8
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MacCommand+0xe0>)
 80004b4:	f001 ff4a 	bl	800234c <HAL_I2C_Master_Receive>
	HAL_Delay(5);
 80004b8:	2005      	movs	r0, #5
 80004ba:	f001 f9d9 	bl	8001870 <HAL_Delay>
}
 80004be:	bf00      	nop
 80004c0:	3758      	adds	r7, #88	; 0x58
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000098 	.word	0x20000098

080004cc <CheckMacCommand>:


void CheckMacCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t *ClientResp, uint16_t size, uint8_t *receiv) {
 80004cc:	b5b0      	push	{r4, r5, r7, lr}
 80004ce:	b0a8      	sub	sp, #160	; 0xa0
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	603a      	str	r2, [r7, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	460b      	mov	r3, r1
 80004dc:	71bb      	strb	r3, [r7, #6]
 80004de:	4613      	mov	r3, r2
 80004e0:	80bb      	strh	r3, [r7, #4]
    uint8_t CheckMAC[85];
    uint8_t CRC_receiv[2];
    uint8_t ClientChal[32] = {0x00};
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
 80004f6:	615a      	str	r2, [r3, #20]
 80004f8:	619a      	str	r2, [r3, #24]
    uint8_t OtherData[13] = {0x08, 0x01, SlotID_LSB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80004fa:	2308      	movs	r3, #8
 80004fc:	733b      	strb	r3, [r7, #12]
 80004fe:	2301      	movs	r3, #1
 8000500:	737b      	strb	r3, [r7, #13]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	73bb      	strb	r3, [r7, #14]
 8000506:	2300      	movs	r3, #0
 8000508:	73fb      	strb	r3, [r7, #15]
 800050a:	2300      	movs	r3, #0
 800050c:	743b      	strb	r3, [r7, #16]
 800050e:	2300      	movs	r3, #0
 8000510:	747b      	strb	r3, [r7, #17]
 8000512:	2300      	movs	r3, #0
 8000514:	74bb      	strb	r3, [r7, #18]
 8000516:	2300      	movs	r3, #0
 8000518:	74fb      	strb	r3, [r7, #19]
 800051a:	2300      	movs	r3, #0
 800051c:	753b      	strb	r3, [r7, #20]
 800051e:	2300      	movs	r3, #0
 8000520:	757b      	strb	r3, [r7, #21]
 8000522:	2300      	movs	r3, #0
 8000524:	75bb      	strb	r3, [r7, #22]
 8000526:	2300      	movs	r3, #0
 8000528:	75fb      	strb	r3, [r7, #23]
 800052a:	2300      	movs	r3, #0
 800052c:	763b      	strb	r3, [r7, #24]

    CheckMAC[0] = 0x03;
 800052e:	2303      	movs	r3, #3
 8000530:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    CheckMAC[1] = ((sizeof(CheckMAC)-1) & 0xFF);
 8000534:	2354      	movs	r3, #84	; 0x54
 8000536:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    CheckMAC[2] = COMMAND_CHECKMAC;
 800053a:	2328      	movs	r3, #40	; 0x28
 800053c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    CheckMAC[3] = 0x01;    // mode
 8000540:	2301      	movs	r3, #1
 8000542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    CheckMAC[4] = SlotID_LSB;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    CheckMAC[5] = SlotID_MSB;
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    memcpy(CheckMAC+6, ClientChal, 32);
 8000552:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000556:	3306      	adds	r3, #6
 8000558:	461d      	mov	r5, r3
 800055a:	f107 041c 	add.w	r4, r7, #28
 800055e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000560:	6028      	str	r0, [r5, #0]
 8000562:	6069      	str	r1, [r5, #4]
 8000564:	60aa      	str	r2, [r5, #8]
 8000566:	60eb      	str	r3, [r5, #12]
 8000568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800056a:	6128      	str	r0, [r5, #16]
 800056c:	6169      	str	r1, [r5, #20]
 800056e:	61aa      	str	r2, [r5, #24]
 8000570:	61eb      	str	r3, [r5, #28]
    memcpy(CheckMAC+38, ClientResp, 32);
 8000572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000576:	3326      	adds	r3, #38	; 0x26
 8000578:	2220      	movs	r2, #32
 800057a:	6839      	ldr	r1, [r7, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fdf9 	bl	8004174 <memcpy>
    memcpy(CheckMAC+70, OtherData, 13);
 8000582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000586:	3346      	adds	r3, #70	; 0x46
 8000588:	461c      	mov	r4, r3
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000590:	6020      	str	r0, [r4, #0]
 8000592:	6061      	str	r1, [r4, #4]
 8000594:	60a2      	str	r2, [r4, #8]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	7323      	strb	r3, [r4, #12]

    atCRC(CheckMAC, sizeof(CheckMAC), CRC_receiv);
 800059a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800059e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005a2:	2155      	movs	r1, #85	; 0x55
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fdd1 	bl	800014c <atCRC>
    CheckMAC[sizeof(CheckMAC) - 2] = CRC_receiv[0];
 80005aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80005ae:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    CheckMAC[sizeof(CheckMAC) - 1] = CRC_receiv[1];
 80005b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80005b6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDRESS, CheckMAC, sizeof(CheckMAC), 1000);
 80005ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2355      	movs	r3, #85	; 0x55
 80005c6:	21c8      	movs	r1, #200	; 0xc8
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <CheckMacCommand+0x12c>)
 80005ca:	f001 fdc1 	bl	8002150 <HAL_I2C_Master_Transmit>
    HAL_Delay(40);
 80005ce:	2028      	movs	r0, #40	; 0x28
 80005d0:	f001 f94e 	bl	8001870 <HAL_Delay>
    HAL_I2C_Master_Receive(&hi2c2, I2C_ADDRESS, receiv, size, 1000);
 80005d4:	88bb      	ldrh	r3, [r7, #4]
 80005d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80005e0:	21c8      	movs	r1, #200	; 0xc8
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <CheckMacCommand+0x12c>)
 80005e4:	f001 feb2 	bl	800234c <HAL_I2C_Master_Receive>
    HAL_Delay(5);
 80005e8:	2005      	movs	r0, #5
 80005ea:	f001 f941 	bl	8001870 <HAL_Delay>
}
 80005ee:	bf00      	nop
 80005f0:	3798      	adds	r7, #152	; 0x98
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bdb0      	pop	{r4, r5, r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000098 	.word	0x20000098

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 8000602:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000604:	f001 f8d2 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 fa2e 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 facc 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART1_Init();
 8000610:	f000 fa9e 	bl	8000b50 <MX_USART1_Init>
  MX_I2C2_Init();
 8000614:	f000 fa6e 	bl	8000af4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // read configuration zone: {COMMAND, COUNT, OPCODE, ZONE, ADDRESS_1, ADDRESS_2, CRC_LSB, CRC_MSB}
  uint8_t readCommand0[8] = {0x03, 0x07, 0x02, 0x80, 0x00, 0x00, 0x09, 0xAD};
 8000618:	4ac1      	ldr	r2, [pc, #772]	; (8000920 <main+0x324>)
 800061a:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800061e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000622:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand1[8] = {0x03, 0x07, 0x02, 0x80, 0x08, 0x00, 0x0a, 0x4d};
 8000626:	4abf      	ldr	r2, [pc, #764]	; (8000924 <main+0x328>)
 8000628:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand2[8] = {0x03, 0x07, 0x02, 0x00, 0x10, 0x00, 0x1d, 0x9d};
 8000634:	4abc      	ldr	r2, [pc, #752]	; (8000928 <main+0x32c>)
 8000636:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800063a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800063e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand3[8] = {0x03, 0x07, 0x02, 0x00, 0x11, 0x00, 0x14, 0x1d};
 8000642:	4aba      	ldr	r2, [pc, #744]	; (800092c <main+0x330>)
 8000644:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8000648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand4[8] = {0x03, 0x07, 0x02, 0x00, 0x12, 0x00, 0x1b, 0x1d};
 8000650:	4ab7      	ldr	r2, [pc, #732]	; (8000930 <main+0x334>)
 8000652:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand5[8] = {0x03, 0x07, 0x02, 0x00, 0x13, 0x00, 0x12, 0x9d};
 800065e:	4ab5      	ldr	r2, [pc, #724]	; (8000934 <main+0x338>)
 8000660:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8000664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000668:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand6[8] = {0x03, 0x07, 0x02, 0x00, 0x14, 0x00, 0x1e, 0xdd};
 800066c:	4ab2      	ldr	r2, [pc, #712]	; (8000938 <main+0x33c>)
 800066e:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8000672:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000676:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t readCommand7[8] = {0x03, 0x07, 0x02, 0x00, 0x15, 0x00, 0x17, 0x5d};
 800067a:	4ab0      	ldr	r2, [pc, #704]	; (800093c <main+0x340>)
 800067c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8000680:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000684:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t LOBBYKEY_2[8] =		 {0x03, 0x07, 0x02,  0x82, 0x20, 0x00, 0x09, 0xb0};
 8000688:	4aad      	ldr	r2, [pc, #692]	; (8000940 <main+0x344>)
 800068a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800068e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000692:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t SECRET_KEY[8] =	{0x03, 0x07, 0x02,  0x82, 0x08, 0x00, 0x09, 0xc8};
 8000696:	4aab      	ldr	r2, [pc, #684]	; (8000944 <main+0x348>)
 8000698:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800069c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a0:	e883 0003 	stmia.w	r3, {r0, r1}
  // NONCE
  uint8_t NumIn[20] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
 80006a4:	4ba8      	ldr	r3, [pc, #672]	; (8000948 <main+0x34c>)
 80006a6:	f507 7433 	add.w	r4, r7, #716	; 0x2cc
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	6023      	str	r3, [r4, #0]
		  	  	  	  	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
						// 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
						//  0x00, 0x01};
  uint8_t slot0[32] =	{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
 80006b4:	4ba5      	ldr	r3, [pc, #660]	; (800094c <main+0x350>)
 80006b6:	f507 742b 	add.w	r4, r7, #684	; 0x2ac
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slot2[32] =	{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29};
 80006c8:	4ba1      	ldr	r3, [pc, #644]	; (8000950 <main+0x354>)
 80006ca:	f507 7423 	add.w	r4, r7, #652	; 0x28c
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slot4[32] =	{0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44,  0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49};
 80006dc:	4b9d      	ldr	r3, [pc, #628]	; (8000954 <main+0x358>)
 80006de:	f507 741b 	add.w	r4, r7, #620	; 0x26c
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slotf[] = 		{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4,  0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9};
 80006f0:	4b99      	ldr	r3, [pc, #612]	; (8000958 <main+0x35c>)
 80006f2:	f507 7413 	add.w	r4, r7, #588	; 0x24c
 80006f6:	461d      	mov	r5, r3
 80006f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t slot5[] =		{0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54,  0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};
 8000704:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800070c:	4a93      	ldr	r2, [pc, #588]	; (800095c <main+0x360>)
 800070e:	461c      	mov	r4, r3
 8000710:	4615      	mov	r5, r2
 8000712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000716:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800071a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  uint8_t aux[35] = {0};
 800071e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000722:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	3304      	adds	r3, #4
 800072c:	221f      	movs	r2, #31
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fcdb 	bl	80040ec <memset>
  uint8_t randout[35] = {0};
 8000736:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800073a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	3304      	adds	r3, #4
 8000744:	221f      	movs	r2, #31
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f003 fccf 	bl	80040ec <memset>
  uint8_t tempkey[32] = {0};
 800074e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000752:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	3304      	adds	r3, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]
 800076a:	619a      	str	r2, [r3, #24]
  uint8_t DATA_rec[35];

  uint8_t receiv_sha256[35];

  // SHA-256
  uint8_t sha_init[1] = {0};
 800076c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000770:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
  uint8_t SHA_receiv[35] = {0};
 8000778:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800077c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	3304      	adds	r3, #4
 8000786:	221f      	movs	r2, #31
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f003 fcae 	bl	80040ec <memset>

  // GENDIG
  uint8_t gendig_receiv[4] = {0};
 8000790:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000794:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]


  //MAC
  uint8_t MAC_receiv[35] = {0};
 800079c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	3304      	adds	r3, #4
 80007aa:	221f      	movs	r2, #31
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fc9c 	bl	80040ec <memset>
  uint8_t gendig_calc[32] = {0};
 80007b4:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007b8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]
  uint8_t MAC_calc[32] = {0};
 80007d2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007d6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]
  uint8_t CheckMAC_receiv[4] = {0};
 80007f0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80007f4:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
  uint8_t dado[32] = {0};
 80007fc:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000800:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	3304      	adds	r3, #4
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	619a      	str	r2, [r3, #24]


  uint8_t read_byte[4];
  uint8_t receiv_ack[4] = {0};
 800081a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800081e:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]

  //uint8_t read_config[32] = {0};
  uint8_t read_config0[35] = {0};
 8000826:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800082a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	3304      	adds	r3, #4
 8000834:	221f      	movs	r2, #31
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fc57 	bl	80040ec <memset>
  uint8_t read_config1[35] = {0};
 800083e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000842:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	3304      	adds	r3, #4
 800084c:	221f      	movs	r2, #31
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f003 fc4b 	bl	80040ec <memset>
  uint8_t read_config2[7] = {0};
 8000856:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800085a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	3304      	adds	r3, #4
 8000864:	2100      	movs	r1, #0
 8000866:	460a      	mov	r2, r1
 8000868:	801a      	strh	r2, [r3, #0]
 800086a:	460a      	mov	r2, r1
 800086c:	709a      	strb	r2, [r3, #2]
  uint8_t read_config3[7] = {0};
 800086e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000872:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	3304      	adds	r3, #4
 800087c:	2100      	movs	r1, #0
 800087e:	460a      	mov	r2, r1
 8000880:	801a      	strh	r2, [r3, #0]
 8000882:	460a      	mov	r2, r1
 8000884:	709a      	strb	r2, [r3, #2]
  uint8_t read_config4[7] = {0};
 8000886:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800088a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	3304      	adds	r3, #4
 8000894:	2100      	movs	r1, #0
 8000896:	460a      	mov	r2, r1
 8000898:	801a      	strh	r2, [r3, #0]
 800089a:	460a      	mov	r2, r1
 800089c:	709a      	strb	r2, [r3, #2]
  uint8_t read_config5[7] = {0};
 800089e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008a2:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	3304      	adds	r3, #4
 80008ac:	2100      	movs	r1, #0
 80008ae:	460a      	mov	r2, r1
 80008b0:	801a      	strh	r2, [r3, #0]
 80008b2:	460a      	mov	r2, r1
 80008b4:	709a      	strb	r2, [r3, #2]
  uint8_t read_config6[7] = {0};
 80008b6:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008ba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	3304      	adds	r3, #4
 80008c4:	2100      	movs	r1, #0
 80008c6:	460a      	mov	r2, r1
 80008c8:	801a      	strh	r2, [r3, #0]
 80008ca:	460a      	mov	r2, r1
 80008cc:	709a      	strb	r2, [r3, #2]
  uint8_t read_config7[7] = {0};
 80008ce:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008d2:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	3304      	adds	r3, #4
 80008dc:	2100      	movs	r1, #0
 80008de:	460a      	mov	r2, r1
 80008e0:	801a      	strh	r2, [r3, #0]
 80008e2:	460a      	mov	r2, r1
 80008e4:	709a      	strb	r2, [r3, #2]
  uint8_t read_config8[7] = {0};
 80008e6:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80008ea:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	3304      	adds	r3, #4
 80008f4:	2100      	movs	r1, #0
 80008f6:	460a      	mov	r2, r1
 80008f8:	801a      	strh	r2, [r3, #0]
 80008fa:	460a      	mov	r2, r1
 80008fc:	709a      	strb	r2, [r3, #2]


  uint8_t data[32] = {0x00};
 80008fe:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8000902:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	3304      	adds	r3, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	619a      	str	r2, [r3, #24]
 800091c:	e020      	b.n	8000960 <main+0x364>
 800091e:	bf00      	nop
 8000920:	080041a8 	.word	0x080041a8
 8000924:	080041b0 	.word	0x080041b0
 8000928:	080041b8 	.word	0x080041b8
 800092c:	080041c0 	.word	0x080041c0
 8000930:	080041c8 	.word	0x080041c8
 8000934:	080041d0 	.word	0x080041d0
 8000938:	080041d8 	.word	0x080041d8
 800093c:	080041e0 	.word	0x080041e0
 8000940:	080041e8 	.word	0x080041e8
 8000944:	080041f0 	.word	0x080041f0
 8000948:	080041f8 	.word	0x080041f8
 800094c:	0800420c 	.word	0x0800420c
 8000950:	0800422c 	.word	0x0800422c
 8000954:	0800424c 	.word	0x0800424c
 8000958:	0800426c 	.word	0x0800426c
 800095c:	0800428c 	.word	0x0800428c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  WakeUp(read_byte);
 8000960:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fc3d 	bl	80001e4 <WakeUp>
	  //BlockConfigZone(receiv_ack);
	  //WriteDataZone();
	  //WriteOTPZone();
	  //BlockDataZone();

	  ReadConfig(readCommand0, 35, read_config0);
 800096a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800096e:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8000972:	2123      	movs	r1, #35	; 0x23
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc75 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand1, 35, read_config1);
 800097a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800097e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8000982:	2123      	movs	r1, #35	; 0x23
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fc6d 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand2, 7, read_config2);
 800098a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800098e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8000992:	2107      	movs	r1, #7
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc65 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand3, 7, read_config3);
 800099a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800099e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80009a2:	2107      	movs	r1, #7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc5d 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand4, 7, read_config4);
 80009aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80009ae:	f507 7342 	add.w	r3, r7, #776	; 0x308
 80009b2:	2107      	movs	r1, #7
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc55 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand5, 7, read_config5);
 80009ba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80009be:	f507 7340 	add.w	r3, r7, #768	; 0x300
 80009c2:	2107      	movs	r1, #7
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc4d 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand6, 7, read_config6);
 80009ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80009ce:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80009d2:	2107      	movs	r1, #7
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fc45 	bl	8000264 <ReadConfig>
	  ReadConfig(readCommand7, 7, read_config7);
 80009da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80009e2:	2107      	movs	r1, #7
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fc3d 	bl	8000264 <ReadConfig>

	  CommandNonce(NumIn, 35, randout);
 80009ea:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 80009ee:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80009f2:	2123      	movs	r1, #35	; 0x23
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc5b 	bl	80002b0 <CommandNonce>
	  GendigCommand(0x02, 0x00, 4, gendig_receiv);
 80009fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80009fe:	2204      	movs	r2, #4
 8000a00:	2100      	movs	r1, #0
 8000a02:	2002      	movs	r0, #2
 8000a04:	f7ff fcae 	bl	8000364 <GendigCommand>
	  //SHACommandInit(1, sha_init);
	  //SHACommandCompute(35, SHA_receiv);

	 NonceSHA256Hash(randout, NumIn, tempkey);
 8000a08:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000a0c:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 8000a10:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fc05 	bl	8001224 <NonceSHA256Hash>
	 GenDigSHA256Hash(slot2, tempkey, gendig_calc);
 8000a1a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000a1e:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8000a22:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fc44 	bl	80012b4 <GenDigSHA256Hash>
	 MACSHA256Hash(slot4, gendig_calc, MAC_calc);
 8000a2c:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8000a30:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000a34:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 fcab 	bl	8001394 <MACSHA256Hash>
	 CheckMacCommand(0x04, 0x00, MAC_calc, 4, CheckMAC_receiv); //coloca o conteudo de tempkey = slot5
 8000a3e:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8000a42:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2304      	movs	r3, #4
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2004      	movs	r0, #4
 8000a4e:	f7ff fd3d 	bl	80004cc <CheckMacCommand>

	  MacCommand(0x02, 0x00, 35, MAC_receiv);
 8000a52:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000a56:	2223      	movs	r2, #35	; 0x23
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2002      	movs	r0, #2
 8000a5c:	f7ff fcc4 	bl	80003e8 <MacCommand>

	 // CommandNonce(NumIn, 35, randout);
	  //GendigCommand(0x02, 0x00, 4, gendig_receiv);
	  //ReadEncript(SECRET_KEY, 35, DATA_rec);

	  HAL_Delay(10);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f000 ff05 	bl	8001870 <HAL_Delay>
	  WakeUp(read_byte);
 8000a66:	e77b      	b.n	8000960 <main+0x364>

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	; 0x40
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	2228      	movs	r2, #40	; 0x28
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f003 fb38 	bl	80040ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 f9d7 	bl	8002e64 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000abc:	f000 f8ae 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fc44 	bl	8003368 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ae6:	f000 f899 	bl	8000c1c <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3740      	adds	r7, #64	; 0x40
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000afa:	4a13      	ldr	r2, [pc, #76]	; (8000b48 <MX_I2C2_Init+0x54>)
 8000afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_I2C2_Init+0x58>)
 8000b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_I2C2_Init+0x50>)
 8000b32:	f001 f9c9 	bl	8001ec8 <HAL_I2C_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f000 f86e 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000098 	.word	0x20000098
 8000b48:	40005800 	.word	0x40005800
 8000b4c:	000186a0 	.word	0x000186a0

08000b50 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_USART1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_USART1_Init+0x50>)
 8000b8e:	f002 fd83 	bl	8003698 <HAL_USART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 f840 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000ec 	.word	0x200000ec
 8000ba4:	40013800 	.word	0x40013800

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bcc:	f043 0320 	orr.w	r3, r3, #32
 8000bd0:	6193      	str	r3, [r2, #24]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 0320 	and.w	r3, r3, #32
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <MX_GPIO_Init+0x70>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	40021000 	.word	0x40021000

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <sha256_init>:
};

SHA256 ctx;

// Implementação do construtor SHA256::SHA256()
void sha256_init(SHA256 *ctx) {
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    // Inicialize m_blocklen e m_bitlen
    ctx->m_blocklen = 0;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	669a      	str	r2, [r3, #104]	; 0x68
    ctx->m_bitlen = 0;
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

    // Inicialize o estado do hash
    ctx->m_state[0] = 0x6a09e667;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <sha256_init+0x58>)
 8000c48:	601a      	str	r2, [r3, #0]
    ctx->m_state[1] = 0xbb67ae85;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <sha256_init+0x5c>)
 8000c4e:	605a      	str	r2, [r3, #4]
    ctx->m_state[2] = 0x3c6ef372;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <sha256_init+0x60>)
 8000c54:	609a      	str	r2, [r3, #8]
    ctx->m_state[3] = 0xa54ff53a;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <sha256_init+0x64>)
 8000c5a:	60da      	str	r2, [r3, #12]
    ctx->m_state[4] = 0x510e527f;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <sha256_init+0x68>)
 8000c60:	611a      	str	r2, [r3, #16]
    ctx->m_state[5] = 0x9b05688c;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <sha256_init+0x6c>)
 8000c66:	615a      	str	r2, [r3, #20]
    ctx->m_state[6] = 0x1f83d9ab;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <sha256_init+0x70>)
 8000c6c:	619a      	str	r2, [r3, #24]
    ctx->m_state[7] = 0x5be0cd19;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <sha256_init+0x74>)
 8000c72:	61da      	str	r2, [r3, #28]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	6a09e667 	.word	0x6a09e667
 8000c84:	bb67ae85 	.word	0xbb67ae85
 8000c88:	3c6ef372 	.word	0x3c6ef372
 8000c8c:	a54ff53a 	.word	0xa54ff53a
 8000c90:	510e527f 	.word	0x510e527f
 8000c94:	9b05688c 	.word	0x9b05688c
 8000c98:	1f83d9ab 	.word	0x1f83d9ab
 8000c9c:	5be0cd19 	.word	0x5be0cd19

08000ca0 <sha256_update>:

void sha256_update(SHA256 *ctx, const uint8_t *data, uint8_t length) {
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	4613      	mov	r3, r2
 8000cac:	71fb      	strb	r3, [r7, #7]
    for (size_t i = 0; i < length; i++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e024      	b.n	8000cfe <sha256_update+0x5e>
        ctx->m_data[ctx->m_blocklen++] = data[i];
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	441a      	add	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cbe:	1c58      	adds	r0, r3, #1
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	6688      	str	r0, [r1, #104]	; 0x68
 8000cc4:	7811      	ldrb	r1, [r2, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	460a      	mov	r2, r1
 8000ccc:	f883 2020 	strb.w	r2, [r3, #32]
        if (ctx->m_blocklen == 64) {
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cd4:	2b40      	cmp	r3, #64	; 0x40
 8000cd6:	d10f      	bne.n	8000cf8 <sha256_update+0x58>
        	sha256_transform(ctx);
 8000cd8:	68f8      	ldr	r0, [r7, #12]
 8000cda:	f000 f893 	bl	8000e04 <sha256_transform>


            // Fim do bloco
            ctx->m_bitlen += 512;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000ce4:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8000ce8:	f143 0500 	adc.w	r5, r3, #0
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	e9c3 4518 	strd	r4, r5, [r3, #96]	; 0x60
            ctx->m_blocklen = 0;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	669a      	str	r2, [r3, #104]	; 0x68
    for (size_t i = 0; i < length; i++) {
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3d6      	bcc.n	8000cb4 <sha256_update+0x14>
        }
    }
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bdb0      	pop	{r4, r5, r7, pc}

08000d10 <sha256_digest>:
    size_t length = strlen(data);
    sha256_update(ctx, (const uint8_t *)data, length);
}


uint8_t *sha256_digest(SHA256 *ctx) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
    uint8_t *hash = (uint8_t *)malloc(32 * sizeof(uint8_t));
 8000d18:	2020      	movs	r0, #32
 8000d1a:	f003 f933 	bl	8003f84 <malloc>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	60fb      	str	r3, [r7, #12]
    if (hash == NULL) {
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <sha256_digest+0x1c>
        // Tratamento de erro, não foi possível alocar memória
        return NULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e004      	b.n	8000d36 <sha256_digest+0x26>
    }

    //sha256_pad(ctx);
    sha256_revert(ctx, hash);
 8000d2c:	68f9      	ldr	r1, [r7, #12]
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 fa48 	bl	80011c4 <sha256_revert>

    return hash;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <sha256_rotr>:


uint32_t sha256_rotr(uint32_t x, uint32_t n) {
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
    return (x >> n) | (x << (32 - n));
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	fa62 f303 	ror.w	r3, r2, r3
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <sha256_choose>:

uint32_t sha256_choose(uint32_t e, uint32_t f, uint32_t g) {
 8000d5a:	b480      	push	{r7}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
    return (e & f) ^ (~e & g);
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
 8000d74:	4053      	eors	r3, r2
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <sha256_majority>:

uint32_t sha256_majority(uint32_t a, uint32_t b, uint32_t c) {
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
    return (a & (b | c)) | (b & c);
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	401a      	ands	r2, r3
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
 8000d9c:	4313      	orrs	r3, r2
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <sha256_sig0>:

uint32_t sha256_sig0(uint32_t x) {
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    return sha256_rotr(x, 7) ^ sha256_rotr(x, 18) ^ (x >> 3);
 8000db0:	2107      	movs	r1, #7
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffc3 	bl	8000d3e <sha256_rotr>
 8000db8:	4604      	mov	r4, r0
 8000dba:	2112      	movs	r1, #18
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffbe 	bl	8000d3e <sha256_rotr>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	ea84 0203 	eor.w	r2, r4, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	4053      	eors	r3, r2
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd90      	pop	{r4, r7, pc}

08000dd6 <sha256_sig1>:

uint32_t sha256_sig1(uint32_t x) {
 8000dd6:	b590      	push	{r4, r7, lr}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
    return sha256_rotr(x, 17) ^ sha256_rotr(x, 19) ^ (x >> 10);
 8000dde:	2111      	movs	r1, #17
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffac 	bl	8000d3e <sha256_rotr>
 8000de6:	4604      	mov	r4, r0
 8000de8:	2113      	movs	r1, #19
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ffa7 	bl	8000d3e <sha256_rotr>
 8000df0:	4603      	mov	r3, r0
 8000df2:	ea84 0203 	eor.w	r2, r4, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	0a9b      	lsrs	r3, r3, #10
 8000dfa:	4053      	eors	r3, r2
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd90      	pop	{r4, r7, pc}

08000e04 <sha256_transform>:

void sha256_transform(SHA256 *ctx) {
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b0d5      	sub	sp, #340	; 0x154
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000e12:	6018      	str	r0, [r3, #0]
    uint32_t maj, xorA, ch, xorE, sum, newA, newE, m[64];
    uint32_t state[8];

    for (uint8_t i = 0, j = 0; i < 16; i++, j += 4) {
 8000e14:	2300      	movs	r3, #0
 8000e16:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8000e20:	e043      	b.n	8000eaa <sha256_transform+0xa6>
        m[i] = (ctx->m_data[j] << 24) | (ctx->m_data[j + 1] << 16) | (ctx->m_data[j + 2] << 8) | (ctx->m_data[j + 3]);
 8000e22:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000e26:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8000e2a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	4413      	add	r3, r2
 8000e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e36:	061a      	lsls	r2, r3, #24
 8000e38:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000e42:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000e46:	6809      	ldr	r1, [r1, #0]
 8000e48:	440b      	add	r3, r1
 8000e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000e56:	3302      	adds	r3, #2
 8000e58:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000e5c:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000e60:	6809      	ldr	r1, [r1, #0]
 8000e62:	440b      	add	r3, r1
 8000e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	f897 214e 	ldrb.w	r2, [r7, #334]	; 0x14e
 8000e70:	3203      	adds	r2, #3
 8000e72:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000e76:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 8000e7a:	6809      	ldr	r1, [r1, #0]
 8000e7c:	440a      	add	r2, r1
 8000e7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000e8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0, j = 0; i < 16; i++, j += 4) {
 8000e96:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 8000ea0:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 8000eaa:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d9b7      	bls.n	8000e22 <sha256_transform+0x1e>
    }

    for (uint8_t k = 16; k < 64; k++) {
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8000eb8:	e03d      	b.n	8000f36 <sha256_transform+0x132>
        m[k] = sha256_sig1(m[k - 2]) + m[k - 7] + sha256_sig0(m[k - 15]) + m[k - 16];
 8000eba:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000ebe:	1e9a      	subs	r2, r3, #2
 8000ec0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ec4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff82 	bl	8000dd6 <sha256_sig1>
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000ed8:	1fda      	subs	r2, r3, #7
 8000eda:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ede:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee6:	18cc      	adds	r4, r1, r3
 8000ee8:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000eec:	f1a3 020f 	sub.w	r2, r3, #15
 8000ef0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ef4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff53 	bl	8000da8 <sha256_sig0>
 8000f02:	4603      	mov	r3, r0
 8000f04:	18e1      	adds	r1, r4, r3
 8000f06:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f0a:	f1a3 0210 	sub.w	r2, r3, #16
 8000f0e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1a:	f897 214d 	ldrb.w	r2, [r7, #333]	; 0x14d
 8000f1e:	4419      	add	r1, r3
 8000f20:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t k = 16; k < 64; k++) {
 8000f2c:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f30:	3301      	adds	r3, #1
 8000f32:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 8000f36:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 8000f3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000f3c:	d9bd      	bls.n	8000eba <sha256_transform+0xb6>
    }

    for (uint8_t i = 0; i < 8; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8000f44:	e015      	b.n	8000f72 <sha256_transform+0x16e>
        state[i] = ctx->m_state[i];
 8000f46:	f897 114c 	ldrb.w	r1, [r7, #332]	; 0x14c
 8000f4a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8000f4e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8000f5c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f60:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 8000f68:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8000f72:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	d9e5      	bls.n	8000f46 <sha256_transform+0x142>
    }

    for (uint8_t i = 0; i < 64; i++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8000f80:	e0ea      	b.n	8001158 <sha256_transform+0x354>
        maj = sha256_majority(state[0], state[1], state[2]);
 8000f82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f90:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f94:	6859      	ldr	r1, [r3, #4]
 8000f96:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f7ff feed 	bl	8000d80 <sha256_majority>
 8000fa6:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
        xorA = sha256_rotr(state[0], 2) ^ sha256_rotr(state[0], 13) ^ sha256_rotr(state[0], 22);
 8000faa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fec1 	bl	8000d3e <sha256_rotr>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	210d      	movs	r1, #13
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff feb7 	bl	8000d3e <sha256_rotr>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	405c      	eors	r4, r3
 8000fd4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000fd8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2116      	movs	r1, #22
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff feac 	bl	8000d3e <sha256_rotr>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4063      	eors	r3, r4
 8000fea:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        ch = sha256_choose(state[4], state[5], state[6]);
 8000fee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ff2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000ff6:	6918      	ldr	r0, [r3, #16]
 8000ff8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000ffc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001000:	6959      	ldr	r1, [r3, #20]
 8001002:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001006:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	461a      	mov	r2, r3
 800100e:	f7ff fea4 	bl	8000d5a <sha256_choose>
 8001012:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

        xorE = sha256_rotr(state[4], 6) ^ sha256_rotr(state[4], 11) ^ sha256_rotr(state[4], 25);
 8001016:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800101a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2106      	movs	r1, #6
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe8b 	bl	8000d3e <sha256_rotr>
 8001028:	4604      	mov	r4, r0
 800102a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800102e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	210b      	movs	r1, #11
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe81 	bl	8000d3e <sha256_rotr>
 800103c:	4603      	mov	r3, r0
 800103e:	405c      	eors	r4, r3
 8001040:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001044:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2119      	movs	r1, #25
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe76 	bl	8000d3e <sha256_rotr>
 8001052:	4603      	mov	r3, r0
 8001054:	4063      	eors	r3, r4
 8001056:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

        sum = m[i] + K[i] + state[7] + ch + xorE;
 800105a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800105e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001062:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800106a:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800106e:	4954      	ldr	r1, [pc, #336]	; (80011c0 <sha256_transform+0x3bc>)
 8001070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001074:	441a      	add	r2, r3
 8001076:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800107a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	441a      	add	r2, r3
 8001082:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001086:	4413      	add	r3, r2
 8001088:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800108c:	4413      	add	r3, r2
 800108e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        newA = xorA + maj + sum;
 8001092:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001096:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800109a:	4413      	add	r3, r2
 800109c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80010a0:	4413      	add	r3, r2
 80010a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        newE = state[3] + sum;
 80010a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80010b4:	4413      	add	r3, r2
 80010b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        state[7] = state[6];
 80010ba:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010c2:	699a      	ldr	r2, [r3, #24]
 80010c4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010c8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010cc:	61da      	str	r2, [r3, #28]
        state[6] = state[5];
 80010ce:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010dc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010e0:	619a      	str	r2, [r3, #24]
        state[5] = state[4];
 80010e2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010e6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010ea:	691a      	ldr	r2, [r3, #16]
 80010ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010f4:	615a      	str	r2, [r3, #20]
        state[4] = newE;
 80010f6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80010fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80010fe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001102:	611a      	str	r2, [r3, #16]
        state[3] = state[2];
 8001104:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001108:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001112:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001116:	60da      	str	r2, [r3, #12]
        state[2] = state[1];
 8001118:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800111c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001126:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800112a:	609a      	str	r2, [r3, #8]
        state[1] = state[0];
 800112c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001130:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800113a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800113e:	605a      	str	r2, [r3, #4]
        state[0] = newA;
 8001140:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001144:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001148:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800114c:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < 64; i++) {
 800114e:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001152:	3301      	adds	r3, #1
 8001154:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8001158:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 800115c:	2b3f      	cmp	r3, #63	; 0x3f
 800115e:	f67f af10 	bls.w	8000f82 <sha256_transform+0x17e>
    }

    for (uint8_t i = 0; i < 8; i++) {
 8001162:	2300      	movs	r3, #0
 8001164:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 8001168:	e01f      	b.n	80011aa <sha256_transform+0x3a6>
        ctx->m_state[i] += state[i];
 800116a:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 800116e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001172:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800117c:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8001180:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001184:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 8001190:	4419      	add	r1, r3
 8001192:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001196:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t i = 0; i < 8; i++) {
 80011a0:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80011a4:	3301      	adds	r3, #1
 80011a6:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 80011aa:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	d9db      	bls.n	800116a <sha256_transform+0x366>
    }
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	08004328 	.word	0x08004328

080011c4 <sha256_revert>:
    ctx->m_data[57] = (uint8_t)(ctx->m_bitlen >> 48);
    ctx->m_data[56] = (uint8_t)(ctx->m_bitlen >> 56);
    sha256_transform(ctx);
}

void sha256_revert( SHA256 *ctx, uint8_t*hash) {
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
    // O SHA usa ordenação de bytes big-endian
    // Reverter todos os bytes
    for (uint8_t i = 0; i < 4; i++) {
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e01e      	b.n	8001212 <sha256_revert+0x4e>
        for (uint8_t j = 0; j < 8; j++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	73bb      	strb	r3, [r7, #14]
 80011d8:	e015      	b.n	8001206 <sha256_revert+0x42>
            hash[i + (j * 4)] = (ctx->m_state[j] >> (24 - i * 8)) & 0x000000ff;
 80011da:	7bba      	ldrb	r2, [r7, #14]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	f1c3 0303 	rsb	r3, r3, #3
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	fa22 f103 	lsr.w	r1, r2, r3
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	461a      	mov	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	b2ca      	uxtb	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < 8; j++) {
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	3301      	adds	r3, #1
 8001204:	73bb      	strb	r3, [r7, #14]
 8001206:	7bbb      	ldrb	r3, [r7, #14]
 8001208:	2b07      	cmp	r3, #7
 800120a:	d9e6      	bls.n	80011da <sha256_revert+0x16>
    for (uint8_t i = 0; i < 4; i++) {
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d9dd      	bls.n	80011d4 <sha256_revert+0x10>
        }
    }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <NonceSHA256Hash>:


void NonceSHA256Hash(uint8_t *data, uint8_t *NumIn, uint8_t *aux) {
 8001224:	b5b0      	push	{r4, r5, r7, lr}
 8001226:	b0a0      	sub	sp, #128	; 0x80
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]

	uint8_t nonce[64];
	uint8_t nonce_aux[32];
	uint8_t pad[] = {0x16, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8};
 8001230:	4a1f      	ldr	r2, [pc, #124]	; (80012b0 <NonceSHA256Hash+0x8c>)
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	ca07      	ldmia	r2, {r0, r1, r2}
 8001238:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    for (int i = 1; i<=32;i++){
 800123c:	2301      	movs	r3, #1
 800123e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001240:	e00c      	b.n	800125c <NonceSHA256Hash+0x38>
    	nonce_aux[i-1] =data[i];
 8001242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	441a      	add	r2, r3
 8001248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800124a:	3b01      	subs	r3, #1
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	3380      	adds	r3, #128	; 0x80
 8001250:	443b      	add	r3, r7
 8001252:	f803 2c64 	strb.w	r2, [r3, #-100]
    for (int i = 1; i<=32;i++){
 8001256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001258:	3301      	adds	r3, #1
 800125a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800125c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800125e:	2b20      	cmp	r3, #32
 8001260:	ddef      	ble.n	8001242 <NonceSHA256Hash+0x1e>
    }
	 memcpy(nonce, nonce_aux, sizeof(nonce_aux));
 8001262:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001266:	f107 051c 	add.w	r5, r7, #28
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 memcpy(nonce + 32, NumIn, 32);
 8001276:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800127a:	3320      	adds	r3, #32
 800127c:	2220      	movs	r2, #32
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 ff77 	bl	8004174 <memcpy>
	 memcpy(nonce + 52, pad, sizeof(pad));
 8001286:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800128a:	3334      	adds	r3, #52	; 0x34
 800128c:	461c      	mov	r4, r3
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001294:	6020      	str	r0, [r4, #0]
 8001296:	6061      	str	r1, [r4, #4]
 8001298:	60a2      	str	r2, [r4, #8]

	 calculateSHA256Hash(nonce, sizeof(nonce), aux);
 800129a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f8f0 	bl	8001488 <calculateSHA256Hash>
}
 80012a8:	bf00      	nop
 80012aa:	3780      	adds	r7, #128	; 0x80
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bdb0      	pop	{r4, r5, r7, pc}
 80012b0:	080042ac 	.word	0x080042ac

080012b4 <GenDigSHA256Hash>:

void GenDigSHA256Hash(uint8_t *slot , uint8_t *data, uint8_t *aux) {
 80012b4:	b5b0      	push	{r4, r5, r7, lr}
 80012b6:	b0b6      	sub	sp, #216	; 0xd8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]

	uint8_t gendig[128];
	uint8_t aux_gen[32];
	uint8_t config_gendig[32] = {	0x15, 0x02, /**/0x02, 0x00, 0xEE, 0x01, 0x23, 0x00,
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <GenDigSHA256Hash+0xd8>)
 80012c2:	f107 0414 	add.w	r4, r7, #20
 80012c6:	461d      	mov	r5, r3
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
														0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	 */

    memcpy(gendig, slot, 32);
 80012d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d8:	2220      	movs	r2, #32
 80012da:	68f9      	ldr	r1, [r7, #12]
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 ff49 	bl	8004174 <memcpy>
    memcpy(gendig + 32, config_gendig, 32);
 80012e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e6:	3320      	adds	r3, #32
 80012e8:	461d      	mov	r5, r3
 80012ea:	f107 0414 	add.w	r4, r7, #20
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	6028      	str	r0, [r5, #0]
 80012f2:	6069      	str	r1, [r5, #4]
 80012f4:	60aa      	str	r2, [r5, #8]
 80012f6:	60eb      	str	r3, [r5, #12]
 80012f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fa:	6128      	str	r0, [r5, #16]
 80012fc:	6169      	str	r1, [r5, #20]
 80012fe:	61aa      	str	r2, [r5, #24]
 8001300:	61eb      	str	r3, [r5, #28]
    for (int i = 0; i<32;i++){
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001308:	e010      	b.n	800132c <GenDigSHA256Hash+0x78>
    	aux_gen[i] =data[i];
 800130a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	4413      	add	r3, r2
 8001312:	7819      	ldrb	r1, [r3, #0]
 8001314:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800131c:	4413      	add	r3, r2
 800131e:	460a      	mov	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<32;i++){
 8001322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001326:	3301      	adds	r3, #1
 8001328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800132c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001330:	2b1f      	cmp	r3, #31
 8001332:	ddea      	ble.n	800130a <GenDigSHA256Hash+0x56>
    }
    memcpy(gendig + 64, aux_gen, sizeof(aux_gen));
 8001334:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001338:	3340      	adds	r3, #64	; 0x40
 800133a:	461d      	mov	r5, r3
 800133c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001342:	6028      	str	r0, [r5, #0]
 8001344:	6069      	str	r1, [r5, #4]
 8001346:	60aa      	str	r2, [r5, #8]
 8001348:	60eb      	str	r3, [r5, #12]
 800134a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134c:	6128      	str	r0, [r5, #16]
 800134e:	6169      	str	r1, [r5, #20]
 8001350:	61aa      	str	r2, [r5, #24]
 8001352:	61eb      	str	r3, [r5, #28]
    memcpy(gendig + 96, general_conf,  sizeof(general_conf));
 8001354:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001358:	3360      	adds	r3, #96	; 0x60
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <GenDigSHA256Hash+0xdc>)
 800135c:	461c      	mov	r4, r3
 800135e:	4615      	mov	r5, r2
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	6020      	str	r0, [r4, #0]
 8001364:	6061      	str	r1, [r4, #4]
 8001366:	60a2      	str	r2, [r4, #8]
 8001368:	60e3      	str	r3, [r4, #12]
 800136a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800136c:	6120      	str	r0, [r4, #16]
 800136e:	6161      	str	r1, [r4, #20]
 8001370:	61a2      	str	r2, [r4, #24]
 8001372:	61e3      	str	r3, [r4, #28]

    calculateSHA256Hash(gendig, sizeof(gendig), aux);
 8001374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f883 	bl	8001488 <calculateSHA256Hash>

}
 8001382:	bf00      	nop
 8001384:	37d8      	adds	r7, #216	; 0xd8
 8001386:	46bd      	mov	sp, r7
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	bf00      	nop
 800138c:	080042b8 	.word	0x080042b8
 8001390:	20000000 	.word	0x20000000

08001394 <MACSHA256Hash>:


void MACSHA256Hash(uint8_t *slot ,uint8_t *data, uint8_t *aux){
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b0be      	sub	sp, #248	; 0xf8
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]

	uint8_t mac[128];
	uint8_t aux_mac[32];
	uint8_t config_mac[32] = {	0x08, 0x01, /**/0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
 80013a0:	4b37      	ldr	r3, [pc, #220]	; (8001480 <MACSHA256Hash+0xec>)
 80013a2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80013a6:	461d      	mov	r5, r3
 80013a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE,
													0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x00, 0x00,
													0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

	uint8_t mac_pad[32] = 	{	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 80013b4:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MACSHA256Hash+0xf0>)
 80013b6:	f107 0414 	add.w	r4, r7, #20
 80013ba:	461d      	mov	r5, r3
 80013bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	  	  							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xC0};

    memcpy(mac, slot, 32);
 80013c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013cc:	2220      	movs	r2, #32
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fecf 	bl	8004174 <memcpy>
    for (int i = 0; i<32;i++){
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80013dc:	e010      	b.n	8001400 <MACSHA256Hash+0x6c>
    	aux_mac[i] =data[i];
 80013de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	7819      	ldrb	r1, [r3, #0]
 80013e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80013ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013f0:	4413      	add	r3, r2
 80013f2:	460a      	mov	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i<32;i++){
 80013f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013fa:	3301      	adds	r3, #1
 80013fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001404:	2b1f      	cmp	r3, #31
 8001406:	ddea      	ble.n	80013de <MACSHA256Hash+0x4a>
    }
    memcpy(mac + 32, aux_mac,  sizeof(aux_mac));
 8001408:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800140c:	3320      	adds	r3, #32
 800140e:	461d      	mov	r5, r3
 8001410:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001416:	6028      	str	r0, [r5, #0]
 8001418:	6069      	str	r1, [r5, #4]
 800141a:	60aa      	str	r2, [r5, #8]
 800141c:	60eb      	str	r3, [r5, #12]
 800141e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001420:	6128      	str	r0, [r5, #16]
 8001422:	6169      	str	r1, [r5, #20]
 8001424:	61aa      	str	r2, [r5, #24]
 8001426:	61eb      	str	r3, [r5, #28]
    memcpy(mac + 64, config_mac,  sizeof(config_mac));
 8001428:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800142c:	3340      	adds	r3, #64	; 0x40
 800142e:	461d      	mov	r5, r3
 8001430:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001436:	6028      	str	r0, [r5, #0]
 8001438:	6069      	str	r1, [r5, #4]
 800143a:	60aa      	str	r2, [r5, #8]
 800143c:	60eb      	str	r3, [r5, #12]
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	6128      	str	r0, [r5, #16]
 8001442:	6169      	str	r1, [r5, #20]
 8001444:	61aa      	str	r2, [r5, #24]
 8001446:	61eb      	str	r3, [r5, #28]
    memcpy(mac + 96, mac_pad, sizeof(mac_pad));
 8001448:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800144c:	3360      	adds	r3, #96	; 0x60
 800144e:	461d      	mov	r5, r3
 8001450:	f107 0414 	add.w	r4, r7, #20
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	6028      	str	r0, [r5, #0]
 8001458:	6069      	str	r1, [r5, #4]
 800145a:	60aa      	str	r2, [r5, #8]
 800145c:	60eb      	str	r3, [r5, #12]
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	6128      	str	r0, [r5, #16]
 8001462:	6169      	str	r1, [r5, #20]
 8001464:	61aa      	str	r2, [r5, #24]
 8001466:	61eb      	str	r3, [r5, #28]

    calculateSHA256Hash(mac, sizeof(mac), aux);
 8001468:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f809 	bl	8001488 <calculateSHA256Hash>
}
 8001476:	bf00      	nop
 8001478:	37f8      	adds	r7, #248	; 0xf8
 800147a:	46bd      	mov	sp, r7
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
 800147e:	bf00      	nop
 8001480:	080042d8 	.word	0x080042d8
 8001484:	080042f8 	.word	0x080042f8

08001488 <calculateSHA256Hash>:


void calculateSHA256Hash(uint8_t *data, uint8_t dataSize, uint8_t *aux) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b0a2      	sub	sp, #136	; 0x88
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	460b      	mov	r3, r1
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	72fb      	strb	r3, [r7, #11]
    SHA256 sha;

    sha256_init(&sha);
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fbc4 	bl	8000c28 <sha256_init>
    sha256_update(&sha, data, dataSize);
 80014a0:	7afa      	ldrb	r2, [r7, #11]
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	68f9      	ldr	r1, [r7, #12]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fbf9 	bl	8000ca0 <sha256_update>
    uint8_t *digest = sha256_digest(&sha);
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fc2c 	bl	8000d10 <sha256_digest>
 80014b8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

    for (int i =0; i<32;i++){
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014c2:	e00f      	b.n	80014e4 <calculateSHA256Hash+0x5c>
    	aux[i] = digest[i];
 80014c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80014cc:	441a      	add	r2, r3
 80014ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	440b      	add	r3, r1
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	701a      	strb	r2, [r3, #0]
    for (int i =0; i<32;i++){
 80014da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014de:	3301      	adds	r3, #1
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014e8:	2b1f      	cmp	r3, #31
 80014ea:	ddeb      	ble.n	80014c4 <calculateSHA256Hash+0x3c>
    }

    //free(digest);
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3788      	adds	r7, #136	; 0x88
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_MspInit+0x5c>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_MspInit+0x5c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x5c>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x5c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_MspInit+0x60>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_MspInit+0x60>)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000

0800155c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_I2C_MspInit+0x74>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d124      	bne.n	80015c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_I2C_MspInit+0x78>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_I2C_MspInit+0x78>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_I2C_MspInit+0x78>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001594:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159a:	2312      	movs	r3, #18
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <HAL_I2C_MspInit+0x7c>)
 80015aa:	f000 fb09 	bl	8001bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_I2C_MspInit+0x78>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_I2C_MspInit+0x78>)
 80015b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b8:	61d3      	str	r3, [r2, #28]
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_I2C_MspInit+0x78>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3720      	adds	r7, #32
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40005800 	.word	0x40005800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010c00 	.word	0x40010c00

080015dc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(husart->Instance==USART1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_USART_MspInit+0x9c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d139      	bne.n	8001670 <HAL_USART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_USART_MspInit+0xa0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_USART_MspInit+0xa0>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_USART_MspInit+0xa0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_USART_MspInit+0xa0>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_USART_MspInit+0xa0>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_USART_MspInit+0xa0>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800162c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001636:	2303      	movs	r3, #3
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	480f      	ldr	r0, [pc, #60]	; (8001680 <HAL_USART_MspInit+0xa4>)
 8001642:	f000 fabd 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <HAL_USART_MspInit+0xa4>)
 800165c:	f000 fab0 	bl	8001bc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2025      	movs	r0, #37	; 0x25
 8001666:	f000 f9fe 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166a:	2025      	movs	r0, #37	; 0x25
 800166c:	f000 fa17 	bl	8001a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40013800 	.word	0x40013800
 800167c:	40021000 	.word	0x40021000
 8001680:	40010800 	.word	0x40010800

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f000 f8b5 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <USART1_IRQHandler+0x10>)
 80016da:	f002 f81f 	bl	800371c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200000ec 	.word	0x200000ec

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	; (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f002 fd00 	bl	800411c <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20005000 	.word	0x20005000
 8001748:	00000400 	.word	0x00000400
 800174c:	20000130 	.word	0x20000130
 8001750:	20000280 	.word	0x20000280

08001754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001786:	f7ff ffe5 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f002 fccd 	bl	8004128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7fe ff35 	bl	80005fc <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800179c:	08004448 	.word	0x08004448
  ldr r2, =_sbss
 80017a0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80017a4:	20000280 	.word	0x20000280

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 f947 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	200f      	movs	r0, #15
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fe96 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f95f 	bl	8001aba <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 f927 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000020 	.word	0x20000020
 8001830:	20000028 	.word	0x20000028
 8001834:	20000024 	.word	0x20000024

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000028 	.word	0x20000028
 8001858:	20000134 	.word	0x20000134

0800185c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000134 	.word	0x20000134

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff fff0 	bl	800185c <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffe0 	bl	800185c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000028 	.word	0x20000028

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ea:	4a04      	ldr	r2, [pc, #16]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	60d3      	str	r3, [r2, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <__NVIC_EnableIRQ+0x34>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f7ff ff90 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff2d 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff42 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff90 	bl	80019a8 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5f 	bl	8001954 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff35 	bl	800191c <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d005      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e051      	b.n	8001b9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 020e 	bic.w	r2, r2, #14
 8001b04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_DMA_Abort_IT+0xd0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d029      	beq.n	8001b74 <HAL_DMA_Abort_IT+0xa0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_DMA_Abort_IT+0xd4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d022      	beq.n	8001b70 <HAL_DMA_Abort_IT+0x9c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1f      	ldr	r2, [pc, #124]	; (8001bac <HAL_DMA_Abort_IT+0xd8>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d01a      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x96>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_DMA_Abort_IT+0xdc>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d012      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x90>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <HAL_DMA_Abort_IT+0xe0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00a      	beq.n	8001b5e <HAL_DMA_Abort_IT+0x8a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1a      	ldr	r2, [pc, #104]	; (8001bb8 <HAL_DMA_Abort_IT+0xe4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d102      	bne.n	8001b58 <HAL_DMA_Abort_IT+0x84>
 8001b52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b56:	e00e      	b.n	8001b76 <HAL_DMA_Abort_IT+0xa2>
 8001b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b5c:	e00b      	b.n	8001b76 <HAL_DMA_Abort_IT+0xa2>
 8001b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b62:	e008      	b.n	8001b76 <HAL_DMA_Abort_IT+0xa2>
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	e005      	b.n	8001b76 <HAL_DMA_Abort_IT+0xa2>
 8001b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6e:	e002      	b.n	8001b76 <HAL_DMA_Abort_IT+0xa2>
 8001b70:	2310      	movs	r3, #16
 8001b72:	e000      	b.n	8001b76 <HAL_DMA_Abort_IT+0xa2>
 8001b74:	2301      	movs	r3, #1
 8001b76:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <HAL_DMA_Abort_IT+0xe8>)
 8001b78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	4798      	blx	r3
    } 
  }
  return status;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40020008 	.word	0x40020008
 8001ba8:	4002001c 	.word	0x4002001c
 8001bac:	40020030 	.word	0x40020030
 8001bb0:	40020044 	.word	0x40020044
 8001bb4:	40020058 	.word	0x40020058
 8001bb8:	4002006c 	.word	0x4002006c
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd2:	e169      	b.n	8001ea8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8158 	bne.w	8001ea2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a9a      	ldr	r2, [pc, #616]	; (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d05e      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001bfc:	4a98      	ldr	r2, [pc, #608]	; (8001e60 <HAL_GPIO_Init+0x2a0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d875      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c02:	4a98      	ldr	r2, [pc, #608]	; (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d058      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c08:	4a96      	ldr	r2, [pc, #600]	; (8001e64 <HAL_GPIO_Init+0x2a4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d86f      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c0e:	4a96      	ldr	r2, [pc, #600]	; (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d052      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c14:	4a94      	ldr	r2, [pc, #592]	; (8001e68 <HAL_GPIO_Init+0x2a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d869      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c1a:	4a94      	ldr	r2, [pc, #592]	; (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d04c      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c20:	4a92      	ldr	r2, [pc, #584]	; (8001e6c <HAL_GPIO_Init+0x2ac>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d863      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c26:	4a92      	ldr	r2, [pc, #584]	; (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d046      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
 8001c2c:	4a90      	ldr	r2, [pc, #576]	; (8001e70 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d85d      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d82a      	bhi.n	8001c8c <HAL_GPIO_Init+0xcc>
 8001c36:	2b12      	cmp	r3, #18
 8001c38:	d859      	bhi.n	8001cee <HAL_GPIO_Init+0x12e>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <HAL_GPIO_Init+0x80>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001cbb 	.word	0x08001cbb
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001ca7 	.word	0x08001ca7
 8001c4c:	08001ce9 	.word	0x08001ce9
 8001c50:	08001cef 	.word	0x08001cef
 8001c54:	08001cef 	.word	0x08001cef
 8001c58:	08001cef 	.word	0x08001cef
 8001c5c:	08001cef 	.word	0x08001cef
 8001c60:	08001cef 	.word	0x08001cef
 8001c64:	08001cef 	.word	0x08001cef
 8001c68:	08001cef 	.word	0x08001cef
 8001c6c:	08001cef 	.word	0x08001cef
 8001c70:	08001cef 	.word	0x08001cef
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cef 	.word	0x08001cef
 8001c7c:	08001cef 	.word	0x08001cef
 8001c80:	08001cef 	.word	0x08001cef
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001cb1 	.word	0x08001cb1
 8001c8c:	4a79      	ldr	r2, [pc, #484]	; (8001e74 <HAL_GPIO_Init+0x2b4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c92:	e02c      	b.n	8001cee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e029      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e024      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	3308      	adds	r3, #8
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e01f      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e01a      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e013      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	611a      	str	r2, [r3, #16]
          break;
 8001cda:	e009      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	615a      	str	r2, [r3, #20]
          break;
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e000      	b.n	8001cf0 <HAL_GPIO_Init+0x130>
          break;
 8001cee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	2bff      	cmp	r3, #255	; 0xff
 8001cf4:	d801      	bhi.n	8001cfa <HAL_GPIO_Init+0x13a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_Init+0x13e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2bff      	cmp	r3, #255	; 0xff
 8001d04:	d802      	bhi.n	8001d0c <HAL_GPIO_Init+0x14c>
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x152>
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	3b08      	subs	r3, #8
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	210f      	movs	r1, #15
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	401a      	ands	r2, r3
 8001d24:	6a39      	ldr	r1, [r7, #32]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80b1 	beq.w	8001ea2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d40:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a4c      	ldr	r2, [pc, #304]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d58:	4a48      	ldr	r2, [pc, #288]	; (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	089b      	lsrs	r3, r3, #2
 8001d5e:	3302      	adds	r3, #2
 8001d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	220f      	movs	r2, #15
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a40      	ldr	r2, [pc, #256]	; (8001e80 <HAL_GPIO_Init+0x2c0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_GPIO_Init+0x1ec>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a3f      	ldr	r2, [pc, #252]	; (8001e84 <HAL_GPIO_Init+0x2c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d00d      	beq.n	8001da8 <HAL_GPIO_Init+0x1e8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <HAL_GPIO_Init+0x2c8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d007      	beq.n	8001da4 <HAL_GPIO_Init+0x1e4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3d      	ldr	r2, [pc, #244]	; (8001e8c <HAL_GPIO_Init+0x2cc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_GPIO_Init+0x1e0>
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_Init+0x1ee>
 8001dac:	2300      	movs	r3, #0
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dbe:	492f      	ldr	r1, [pc, #188]	; (8001e7c <HAL_GPIO_Init+0x2bc>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	492c      	ldr	r1, [pc, #176]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001de6:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4928      	ldr	r1, [pc, #160]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4922      	ldr	r1, [pc, #136]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	491e      	ldr	r1, [pc, #120]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4918      	ldr	r1, [pc, #96]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	608b      	str	r3, [r1, #8]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4914      	ldr	r1, [pc, #80]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d021      	beq.n	8001e94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	490e      	ldr	r1, [pc, #56]	; (8001e90 <HAL_GPIO_Init+0x2d0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
 8001e5c:	e021      	b.n	8001ea2 <HAL_GPIO_Init+0x2e2>
 8001e5e:	bf00      	nop
 8001e60:	10320000 	.word	0x10320000
 8001e64:	10310000 	.word	0x10310000
 8001e68:	10220000 	.word	0x10220000
 8001e6c:	10210000 	.word	0x10210000
 8001e70:	10120000 	.word	0x10120000
 8001e74:	10110000 	.word	0x10110000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	4909      	ldr	r1, [pc, #36]	; (8001ec4 <HAL_GPIO_Init+0x304>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f47f ae8e 	bne.w	8001bd4 <HAL_GPIO_Init+0x14>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	372c      	adds	r7, #44	; 0x2c
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e12b      	b.n	8002132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fb34 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2224      	movs	r2, #36	; 0x24
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0201 	bic.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f2c:	f001 fb6e 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 8001f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a81      	ldr	r2, [pc, #516]	; (800213c <HAL_I2C_Init+0x274>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d807      	bhi.n	8001f4c <HAL_I2C_Init+0x84>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a80      	ldr	r2, [pc, #512]	; (8002140 <HAL_I2C_Init+0x278>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	bf94      	ite	ls
 8001f44:	2301      	movls	r3, #1
 8001f46:	2300      	movhi	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	e006      	b.n	8001f5a <HAL_I2C_Init+0x92>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4a7d      	ldr	r2, [pc, #500]	; (8002144 <HAL_I2C_Init+0x27c>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	bf94      	ite	ls
 8001f54:	2301      	movls	r3, #1
 8001f56:	2300      	movhi	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0e7      	b.n	8002132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4a78      	ldr	r2, [pc, #480]	; (8002148 <HAL_I2C_Init+0x280>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0c9b      	lsrs	r3, r3, #18
 8001f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a6a      	ldr	r2, [pc, #424]	; (800213c <HAL_I2C_Init+0x274>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d802      	bhi.n	8001f9c <HAL_I2C_Init+0xd4>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	e009      	b.n	8001fb0 <HAL_I2C_Init+0xe8>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_I2C_Init+0x284>)
 8001fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fac:	099b      	lsrs	r3, r3, #6
 8001fae:	3301      	adds	r3, #1
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	495c      	ldr	r1, [pc, #368]	; (800213c <HAL_I2C_Init+0x274>)
 8001fcc:	428b      	cmp	r3, r1
 8001fce:	d819      	bhi.n	8002004 <HAL_I2C_Init+0x13c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e59      	subs	r1, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_I2C_Init+0x138>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1e59      	subs	r1, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffe:	e051      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002000:	2304      	movs	r3, #4
 8002002:	e04f      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d111      	bne.n	8002030 <HAL_I2C_Init+0x168>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1e58      	subs	r0, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	440b      	add	r3, r1
 800201a:	fbb0 f3f3 	udiv	r3, r0, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e012      	b.n	8002056 <HAL_I2C_Init+0x18e>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1e58      	subs	r0, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6859      	ldr	r1, [r3, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	0099      	lsls	r1, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	fbb0 f3f3 	udiv	r3, r0, r3
 8002046:	3301      	adds	r3, #1
 8002048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_I2C_Init+0x196>
 800205a:	2301      	movs	r3, #1
 800205c:	e022      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10e      	bne.n	8002084 <HAL_I2C_Init+0x1bc>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1e58      	subs	r0, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	440b      	add	r3, r1
 8002074:	fbb0 f3f3 	udiv	r3, r0, r3
 8002078:	3301      	adds	r3, #1
 800207a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002082:	e00f      	b.n	80020a4 <HAL_I2C_Init+0x1dc>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	0099      	lsls	r1, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	fbb0 f3f3 	udiv	r3, r0, r3
 800209a:	3301      	adds	r3, #1
 800209c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	6809      	ldr	r1, [r1, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6911      	ldr	r1, [r2, #16]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68d2      	ldr	r2, [r2, #12]
 80020de:	4311      	orrs	r1, r2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	000186a0 	.word	0x000186a0
 8002140:	001e847f 	.word	0x001e847f
 8002144:	003d08ff 	.word	0x003d08ff
 8002148:	431bde83 	.word	0x431bde83
 800214c:	10624dd3 	.word	0x10624dd3

08002150 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
 8002160:	4613      	mov	r3, r2
 8002162:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002164:	f7ff fb7a 	bl	800185c <HAL_GetTick>
 8002168:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b20      	cmp	r3, #32
 8002174:	f040 80e0 	bne.w	8002338 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2319      	movs	r3, #25
 800217e:	2201      	movs	r2, #1
 8002180:	4970      	ldr	r1, [pc, #448]	; (8002344 <HAL_I2C_Master_Transmit+0x1f4>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fc92 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	e0d3      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_I2C_Master_Transmit+0x50>
 800219c:	2302      	movs	r3, #2
 800219e:	e0cc      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d007      	beq.n	80021c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2221      	movs	r2, #33	; 0x21
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2210      	movs	r2, #16
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	893a      	ldrh	r2, [r7, #8]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a50      	ldr	r2, [pc, #320]	; (8002348 <HAL_I2C_Master_Transmit+0x1f8>)
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002208:	8979      	ldrh	r1, [r7, #10]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	6a3a      	ldr	r2, [r7, #32]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fafc 	bl	800280c <I2C_MasterRequestWrite>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e08d      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002234:	e066      	b.n	8002304 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	6a39      	ldr	r1, [r7, #32]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fd0c 	bl	8002c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00d      	beq.n	8002262 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	2b04      	cmp	r3, #4
 800224c:	d107      	bne.n	800225e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b04      	cmp	r3, #4
 800229e:	d11b      	bne.n	80022d8 <HAL_I2C_Master_Transmit+0x188>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	6a39      	ldr	r1, [r7, #32]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fcfc 	bl	8002cda <I2C_WaitOnBTFFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d107      	bne.n	8002300 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e01a      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d194      	bne.n	8002236 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e000      	b.n	800233a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002338:	2302      	movs	r3, #2
  }
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	00100002 	.word	0x00100002
 8002348:	ffff0000 	.word	0xffff0000

0800234c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	461a      	mov	r2, r3
 8002358:	460b      	mov	r3, r1
 800235a:	817b      	strh	r3, [r7, #10]
 800235c:	4613      	mov	r3, r2
 800235e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff fa7a 	bl	800185c <HAL_GetTick>
 8002368:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	f040 823f 	bne.w	80027f6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2319      	movs	r3, #25
 800237e:	2201      	movs	r2, #1
 8002380:	497f      	ldr	r1, [pc, #508]	; (8002580 <HAL_I2C_Master_Receive+0x234>)
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fb92 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
 8002390:	e232      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_I2C_Master_Receive+0x54>
 800239c:	2302      	movs	r3, #2
 800239e:	e22b      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d007      	beq.n	80023c6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0201 	orr.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2222      	movs	r2, #34	; 0x22
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2210      	movs	r2, #16
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	893a      	ldrh	r2, [r7, #8]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a5f      	ldr	r2, [pc, #380]	; (8002584 <HAL_I2C_Master_Receive+0x238>)
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002408:	8979      	ldrh	r1, [r7, #10]
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa7e 	bl	8002910 <I2C_MasterRequestRead>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1ec      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e1c0      	b.n	80027d0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11e      	bne.n	8002494 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002464:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002466:	b672      	cpsid	i
}
 8002468:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002490:	b662      	cpsie	i
}
 8002492:	e035      	b.n	8002500 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	2b02      	cmp	r3, #2
 800249a:	d11e      	bne.n	80024da <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024ac:	b672      	cpsid	i
}
 80024ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024d6:	b662      	cpsie	i
}
 80024d8:	e012      	b.n	8002500 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002500:	e166      	b.n	80027d0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	2b03      	cmp	r3, #3
 8002508:	f200 811f 	bhi.w	800274a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	2b01      	cmp	r3, #1
 8002512:	d123      	bne.n	800255c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fc1f 	bl	8002d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e167      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800255a:	e139      	b.n	80027d0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b02      	cmp	r3, #2
 8002562:	d152      	bne.n	800260a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	2200      	movs	r2, #0
 800256c:	4906      	ldr	r1, [pc, #24]	; (8002588 <HAL_I2C_Master_Receive+0x23c>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fa9c 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e13c      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
 800257e:	bf00      	nop
 8002580:	00100002 	.word	0x00100002
 8002584:	ffff0000 	.word	0xffff0000
 8002588:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800258c:	b672      	cpsid	i
}
 800258e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025d2:	b662      	cpsie	i
}
 80025d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002608:	e0e2      	b.n	80027d0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	2200      	movs	r2, #0
 8002612:	497b      	ldr	r1, [pc, #492]	; (8002800 <HAL_I2C_Master_Receive+0x4b4>)
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fa49 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0e9      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800266a:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_I2C_Master_Receive+0x4b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	4a65      	ldr	r2, [pc, #404]	; (8002808 <HAL_I2C_Master_Receive+0x4bc>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0a1a      	lsrs	r2, r3, #8
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	00da      	lsls	r2, r3, #3
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	3b01      	subs	r3, #1
 8002688:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0220 	orr.w	r2, r3, #32
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026b2:	b662      	cpsie	i
}
 80026b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e09a      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d1d9      	bne.n	8002684 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002712:	b662      	cpsie	i
}
 8002714:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002748:	e042      	b.n	80027d0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb04 	bl	8002d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e04c      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d118      	bne.n	80027d0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f ae94 	bne.w	8002502 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	00010004 	.word	0x00010004
 8002804:	20000020 	.word	0x20000020
 8002808:	14f8b589 	.word	0x14f8b589

0800280c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af02      	add	r7, sp, #8
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	460b      	mov	r3, r1
 800281a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d006      	beq.n	8002836 <I2C_MasterRequestWrite+0x2a>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d003      	beq.n	8002836 <I2C_MasterRequestWrite+0x2a>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002834:	d108      	bne.n	8002848 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e00b      	b.n	8002860 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	2b12      	cmp	r3, #18
 800284e:	d107      	bne.n	8002860 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f91d 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002886:	d103      	bne.n	8002890 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e035      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800289c:	d108      	bne.n	80028b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	e01b      	b.n	80028e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	11db      	asrs	r3, r3, #7
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 0306 	and.w	r3, r3, #6
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f063 030f 	orn	r3, r3, #15
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	490e      	ldr	r1, [pc, #56]	; (8002908 <I2C_MasterRequestWrite+0xfc>)
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f943 	bl	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e010      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <I2C_MasterRequestWrite+0x100>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f933 	bl	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	00010008 	.word	0x00010008
 800290c:	00010002 	.word	0x00010002

08002910 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	460b      	mov	r3, r1
 800291e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002934:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d006      	beq.n	800294a <I2C_MasterRequestRead+0x3a>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d003      	beq.n	800294a <I2C_MasterRequestRead+0x3a>
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002948:	d108      	bne.n	800295c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e00b      	b.n	8002974 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	2b11      	cmp	r3, #17
 8002962:	d107      	bne.n	8002974 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f893 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800299a:	d103      	bne.n	80029a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e079      	b.n	8002a9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029b0:	d108      	bne.n	80029c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	611a      	str	r2, [r3, #16]
 80029c2:	e05f      	b.n	8002a84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029c4:	897b      	ldrh	r3, [r7, #10]
 80029c6:	11db      	asrs	r3, r3, #7
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 0306 	and.w	r3, r3, #6
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f063 030f 	orn	r3, r3, #15
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4930      	ldr	r1, [pc, #192]	; (8002aa4 <I2C_MasterRequestRead+0x194>)
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f8b9 	bl	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e054      	b.n	8002a9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4929      	ldr	r1, [pc, #164]	; (8002aa8 <I2C_MasterRequestRead+0x198>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8a9 	bl	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e044      	b.n	8002a9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f831 	bl	8002aac <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5e:	d103      	bne.n	8002a68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e017      	b.n	8002a9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	11db      	asrs	r3, r3, #7
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f003 0306 	and.w	r3, r3, #6
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f063 030e 	orn	r3, r3, #14
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <I2C_MasterRequestRead+0x198>)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f865 	bl	8002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	00010008 	.word	0x00010008
 8002aa8:	00010002 	.word	0x00010002

08002aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002abc:	e025      	b.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d021      	beq.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac6:	f7fe fec9 	bl	800185c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d302      	bcc.n	8002adc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d116      	bne.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e023      	b.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10d      	bne.n	8002b30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	e00c      	b.n	8002b4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d0b6      	beq.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b68:	e051      	b.n	8002c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b78:	d123      	bne.n	8002bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f043 0204 	orr.w	r2, r3, #4
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e046      	b.n	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc8:	d021      	beq.n	8002c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bca:	f7fe fe47 	bl	800185c <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d116      	bne.n	8002c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f043 0220 	orr.w	r2, r3, #32
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e020      	b.n	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10c      	bne.n	8002c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4013      	ands	r3, r2
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	bf14      	ite	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	2300      	moveq	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	e00b      	b.n	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d18d      	bne.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c64:	e02d      	b.n	8002cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8ce 	bl	8002e08 <I2C_IsAcknowledgeFailed>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e02d      	b.n	8002cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d021      	beq.n	8002cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7fe fded 	bl	800185c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d302      	bcc.n	8002c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f043 0220 	orr.w	r2, r3, #32
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e007      	b.n	8002cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d1ca      	bne.n	8002c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce6:	e02d      	b.n	8002d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f88d 	bl	8002e08 <I2C_IsAcknowledgeFailed>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e02d      	b.n	8002d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d021      	beq.n	8002d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d00:	f7fe fdac 	bl	800185c <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d302      	bcc.n	8002d16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e007      	b.n	8002d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d1ca      	bne.n	8002ce8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d68:	e042      	b.n	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d119      	bne.n	8002dac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0210 	mvn.w	r2, #16
 8002d80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e029      	b.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe fd56 	bl	800185c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d302      	bcc.n	8002dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d116      	bne.n	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e007      	b.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d1b5      	bne.n	8002d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	d11b      	bne.n	8002e58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e272      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8087 	beq.w	8002f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e84:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d00c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e90:	4b8f      	ldr	r3, [pc, #572]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d112      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5e>
 8002e9c:	4b8c      	ldr	r3, [pc, #560]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eaa:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d06c      	beq.n	8002f90 <HAL_RCC_OscConfig+0x12c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d168      	bne.n	8002f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e24c      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_OscConfig+0x76>
 8002ecc:	4b80      	ldr	r3, [pc, #512]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a7f      	ldr	r2, [pc, #508]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e02e      	b.n	8002f38 <HAL_RCC_OscConfig+0xd4>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x98>
 8002ee2:	4b7b      	ldr	r3, [pc, #492]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7a      	ldr	r2, [pc, #488]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b78      	ldr	r3, [pc, #480]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a77      	ldr	r2, [pc, #476]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e01d      	b.n	8002f38 <HAL_RCC_OscConfig+0xd4>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0xbc>
 8002f06:	4b72      	ldr	r3, [pc, #456]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a71      	ldr	r2, [pc, #452]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6e      	ldr	r2, [pc, #440]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0xd4>
 8002f20:	4b6b      	ldr	r3, [pc, #428]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6a      	ldr	r2, [pc, #424]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a67      	ldr	r2, [pc, #412]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fc8c 	bl	800185c <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fc88 	bl	800185c <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	; 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e200      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0xe4>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fc78 	bl	800185c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fc74 	bl	800185c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e1ec      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x10c>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d063      	beq.n	8003066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d11c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x18c>
 8002fb6:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d116      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	4b43      	ldr	r3, [pc, #268]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_RCC_OscConfig+0x176>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d001      	beq.n	8002fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e1c0      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4939      	ldr	r1, [pc, #228]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	e03a      	b.n	8003066 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fc2d 	bl	800185c <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fc29 	bl	800185c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1a1      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4927      	ldr	r1, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 8003034:	4313      	orrs	r3, r2
 8003036:	600b      	str	r3, [r1, #0]
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fe fc0c 	bl	800185c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003048:	f7fe fc08 	bl	800185c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e180      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03a      	beq.n	80030e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d019      	beq.n	80030ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003080:	f7fe fbec 	bl	800185c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fbe8 	bl	800185c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e160      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_RCC_OscConfig+0x26c>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f000 fad8 	bl	800365c <RCC_Delay>
 80030ac:	e01c      	b.n	80030e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fbd2 	bl	800185c <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ba:	e00f      	b.n	80030dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fe fbce 	bl	800185c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d908      	bls.n	80030dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e146      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000
 80030d4:	42420000 	.word	0x42420000
 80030d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	4b92      	ldr	r3, [pc, #584]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e9      	bne.n	80030bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80a6 	beq.w	8003242 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fa:	4b8b      	ldr	r3, [pc, #556]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	4b88      	ldr	r3, [pc, #544]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4a87      	ldr	r2, [pc, #540]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	61d3      	str	r3, [r2, #28]
 8003112:	4b85      	ldr	r3, [pc, #532]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003122:	4b82      	ldr	r3, [pc, #520]	; (800332c <HAL_RCC_OscConfig+0x4c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	2b00      	cmp	r3, #0
 800312c:	d118      	bne.n	8003160 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x4c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a7e      	ldr	r2, [pc, #504]	; (800332c <HAL_RCC_OscConfig+0x4c8>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313a:	f7fe fb8f 	bl	800185c <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003142:	f7fe fb8b 	bl	800185c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b64      	cmp	r3, #100	; 0x64
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e103      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	4b75      	ldr	r3, [pc, #468]	; (800332c <HAL_RCC_OscConfig+0x4c8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d106      	bne.n	8003176 <HAL_RCC_OscConfig+0x312>
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4a6e      	ldr	r2, [pc, #440]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6213      	str	r3, [r2, #32]
 8003174:	e02d      	b.n	80031d2 <HAL_RCC_OscConfig+0x36e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x334>
 800317e:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	4a69      	ldr	r2, [pc, #420]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6213      	str	r3, [r2, #32]
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a66      	ldr	r2, [pc, #408]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	e01c      	b.n	80031d2 <HAL_RCC_OscConfig+0x36e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d10c      	bne.n	80031ba <HAL_RCC_OscConfig+0x356>
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a60      	ldr	r2, [pc, #384]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a5d      	ldr	r2, [pc, #372]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e00b      	b.n	80031d2 <HAL_RCC_OscConfig+0x36e>
 80031ba:	4b5b      	ldr	r3, [pc, #364]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a5a      	ldr	r2, [pc, #360]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6213      	str	r3, [r2, #32]
 80031c6:	4b58      	ldr	r3, [pc, #352]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a57      	ldr	r2, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f023 0304 	bic.w	r3, r3, #4
 80031d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d015      	beq.n	8003206 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7fe fb3f 	bl	800185c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	e00a      	b.n	80031f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e2:	f7fe fb3b 	bl	800185c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0b1      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	4b4b      	ldr	r3, [pc, #300]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ee      	beq.n	80031e2 <HAL_RCC_OscConfig+0x37e>
 8003204:	e014      	b.n	8003230 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fe fb29 	bl	800185c <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fb25 	bl	800185c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e09b      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003224:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ee      	bne.n	800320e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003236:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4a3b      	ldr	r2, [pc, #236]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8087 	beq.w	800335a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800324c:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d061      	beq.n	800331c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d146      	bne.n	80032ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003260:	4b33      	ldr	r3, [pc, #204]	; (8003330 <HAL_RCC_OscConfig+0x4cc>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe faf9 	bl	800185c <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe faf5 	bl	800185c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e06d      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003294:	d108      	bne.n	80032a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4921      	ldr	r1, [pc, #132]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a8:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a19      	ldr	r1, [r3, #32]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	430b      	orrs	r3, r1
 80032ba:	491b      	ldr	r1, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fe fac9 	bl	800185c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fe fac5 	bl	800185c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x46a>
 80032ec:	e035      	b.n	800335a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_RCC_OscConfig+0x4cc>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe fab2 	bl	800185c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe faae 	bl	800185c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e026      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x498>
 800331a:	e01e      	b.n	800335a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e019      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
 8003330:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_OscConfig+0x500>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	429a      	cmp	r2, r3
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000

08003368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e0d0      	b.n	800351e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800337c:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d910      	bls.n	80033ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b67      	ldr	r3, [pc, #412]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	4965      	ldr	r1, [pc, #404]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b63      	ldr	r3, [pc, #396]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b8      	b.n	800351e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a58      	ldr	r2, [pc, #352]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b50      	ldr	r3, [pc, #320]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	494d      	ldr	r1, [pc, #308]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d040      	beq.n	8003488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b47      	ldr	r3, [pc, #284]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d115      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07f      	b.n	800351e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e073      	b.n	800351e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003436:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e06b      	b.n	800351e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003446:	4b39      	ldr	r3, [pc, #228]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4936      	ldr	r1, [pc, #216]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003458:	f7fe fa00 	bl	800185c <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	e00a      	b.n	8003476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fe f9fc 	bl	800185c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e053      	b.n	800351e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 020c 	and.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	429a      	cmp	r2, r3
 8003486:	d1eb      	bne.n	8003460 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d210      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	4922      	ldr	r1, [pc, #136]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b20      	ldr	r3, [pc, #128]	; (8003528 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e032      	b.n	800351e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4916      	ldr	r1, [pc, #88]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	490e      	ldr	r1, [pc, #56]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f6:	f000 f821 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490a      	ldr	r1, [pc, #40]	; (8003530 <HAL_RCC_ClockConfig+0x1c8>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a09      	ldr	r2, [pc, #36]	; (8003534 <HAL_RCC_ClockConfig+0x1cc>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_ClockConfig+0x1d0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe f95e 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40022000 	.word	0x40022000
 800352c:	40021000 	.word	0x40021000
 8003530:	08004428 	.word	0x08004428
 8003534:	20000020 	.word	0x20000020
 8003538:	20000024 	.word	0x20000024

0800353c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	b490      	push	{r4, r7}
 800353e:	b08a      	sub	sp, #40	; 0x28
 8003540:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003544:	1d3c      	adds	r4, r7, #4
 8003546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800354c:	f240 2301 	movw	r3, #513	; 0x201
 8003550:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	2300      	movs	r3, #0
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d002      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x40>
 8003576:	2b08      	cmp	r3, #8
 8003578:	d003      	beq.n	8003582 <HAL_RCC_GetSysClockFreq+0x46>
 800357a:	e02b      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800357e:	623b      	str	r3, [r7, #32]
      break;
 8003580:	e02b      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	0c9b      	lsrs	r3, r3, #18
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3328      	adds	r3, #40	; 0x28
 800358c:	443b      	add	r3, r7
 800358e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003592:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0c5b      	lsrs	r3, r3, #17
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	3328      	adds	r3, #40	; 0x28
 80035aa:	443b      	add	r3, r7
 80035ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035b6:	fb03 f202 	mul.w	r2, r3, r2
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
 80035c2:	e004      	b.n	80035ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4a0b      	ldr	r2, [pc, #44]	; (80035f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c8:	fb02 f303 	mul.w	r3, r2, r3
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	623b      	str	r3, [r7, #32]
      break;
 80035d2:	e002      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035d6:	623b      	str	r3, [r7, #32]
      break;
 80035d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035da:	6a3b      	ldr	r3, [r7, #32]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3728      	adds	r7, #40	; 0x28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc90      	pop	{r4, r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	08004318 	.word	0x08004318
 80035ec:	40021000 	.word	0x40021000
 80035f0:	007a1200 	.word	0x007a1200
 80035f4:	003d0900 	.word	0x003d0900

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b02      	ldr	r3, [pc, #8]	; (8003608 <HAL_RCC_GetHCLKFreq+0x10>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	20000020 	.word	0x20000020

0800360c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003610:	f7ff fff2 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	08004438 	.word	0x08004438

08003634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003638:	f7ff ffde 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	0adb      	lsrs	r3, r3, #11
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	08004438 	.word	0x08004438

0800365c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <RCC_Delay+0x34>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <RCC_Delay+0x38>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	0a5b      	lsrs	r3, r3, #9
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003678:	bf00      	nop
  }
  while (Delay --);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	60fa      	str	r2, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f9      	bne.n	8003678 <RCC_Delay+0x1c>
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	20000020 	.word	0x20000020
 8003694:	10624dd3 	.word	0x10624dd3

08003698 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e033      	b.n	8003712 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd ff8c 	bl	80015dc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fb61 	bl	8003d94 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003700:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d117      	bne.n	8003782 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <HAL_USART_IRQHandler+0x66>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b22      	cmp	r3, #34	; 0x22
 8003770:	d103      	bne.n	800377a <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9b4 	bl	8003ae0 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8003778:	e0e9      	b.n	800394e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa36 	bl	8003bec <USART_TransmitReceive_IT>
      return;
 8003780:	e0e5      	b.n	800394e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80bb 	beq.w	8003900 <HAL_USART_IRQHandler+0x1e4>
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d105      	bne.n	80037a0 <HAL_USART_IRQHandler+0x84>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 80b0 	beq.w	8003900 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_USART_IRQHandler+0xa4>
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_USART_IRQHandler+0xc4>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	f043 0202 	orr.w	r2, r3, #2
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_USART_IRQHandler+0xe4>
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00f      	beq.n	800382a <HAL_USART_IRQHandler+0x10e>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d104      	bne.n	800381e <HAL_USART_IRQHandler+0x102>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f043 0208 	orr.w	r2, r3, #8
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 808c 	beq.w	800394c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d011      	beq.n	8003862 <HAL_USART_IRQHandler+0x146>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b22      	cmp	r3, #34	; 0x22
 8003852:	d103      	bne.n	800385c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f943 	bl	8003ae0 <USART_Receive_IT>
 800385a:	e002      	b.n	8003862 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f9c5 	bl	8003bec <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <HAL_USART_IRQHandler+0x16e>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d031      	beq.n	80038ee <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f888 	bl	80039a0 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d023      	beq.n	80038e6 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ac:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4a26      	ldr	r2, [pc, #152]	; (8003954 <HAL_USART_IRQHandler+0x238>)
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe f906 	bl	8001ad4 <HAL_DMA_Abort_IT>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d8:	4610      	mov	r0, r2
 80038da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80038dc:	e00e      	b.n	80038fc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f855 	bl	800398e <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	e00a      	b.n	80038fc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f851 	bl	800398e <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e006      	b.n	80038fc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f84d 	bl	800398e <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038fa:	e027      	b.n	800394c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	bf00      	nop
    return;
 80038fe:	e025      	b.n	800394c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b00      	cmp	r3, #0
 8003908:	d012      	beq.n	8003930 <HAL_USART_IRQHandler+0x214>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b12      	cmp	r3, #18
 800391e:	d103      	bne.n	8003928 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f86e 	bl	8003a02 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8003926:	e012      	b.n	800394e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f95f 	bl	8003bec <USART_TransmitReceive_IT>
    return;
 800392e:	e00e      	b.n	800394e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_USART_IRQHandler+0x232>
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8ab 	bl	8003aa0 <USART_EndTransmit_IT>
    return;
 800394a:	e000      	b.n	800394e <HAL_USART_IRQHandler+0x232>
    return;
 800394c:	bf00      	nop
  }
}
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	080039db 	.word	0x080039db

08003958 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff ffca 	bl	800398e <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b12      	cmp	r3, #18
 8003a14:	d13e      	bne.n	8003a94 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1e:	d114      	bne.n	8003a4a <USART_Transmit_IT+0x48>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d110      	bne.n	8003a4a <USART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) husart->pTxBuffPtr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3c:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
 8003a48:	e008      	b.n	8003a5c <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	1c59      	adds	r1, r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6251      	str	r1, [r2, #36]	; 0x24
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	8551      	strh	r1, [r2, #42]	; 0x2a
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10f      	bne.n	8003a90 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7e:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff41 	bl	8003958 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b22      	cmp	r3, #34	; 0x22
 8003af2:	d176      	bne.n	8003be2 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afc:	d117      	bne.n	8003b2e <USART_Receive_IT+0x4e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d113      	bne.n	8003b2e <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	1c9a      	adds	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b2c:	e026      	b.n	8003b7c <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b40:	d007      	beq.n	8003b52 <USART_Receive_IT+0x72>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <USART_Receive_IT+0x80>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]
 8003b5e:	e008      	b.n	8003b72 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d120      	bne.n	8003bd6 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0220 	bic.w	r2, r2, #32
 8003ba2:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb2:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fecc 	bl	800396a <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e006      	b.n	8003be4 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	22ff      	movs	r2, #255	; 0xff
 8003bdc:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b32      	cmp	r3, #50	; 0x32
 8003bfe:	f040 80c4 	bne.w	8003d8a <USART_TransmitReceive_IT+0x19e>
  {
    if (husart->TxXferCount != 0x00U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d03f      	beq.n	8003c8c <USART_TransmitReceive_IT+0xa0>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d138      	bne.n	8003c8c <USART_TransmitReceive_IT+0xa0>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c22:	d116      	bne.n	8003c52 <USART_TransmitReceive_IT+0x66>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d112      	bne.n	8003c52 <USART_TransmitReceive_IT+0x66>
        {
          pdata8bits  = NULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
          pdata16bits = (uint16_t *) husart->pTxBuffPtr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	60bb      	str	r3, [r7, #8]
          husart->Instance->DR = (uint16_t)(*pdata16bits & (uint16_t)0x01FF);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c44:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c9a      	adds	r2, r3, #2
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24
 8003c50:	e008      	b.n	8003c64 <USART_TransmitReceive_IT+0x78>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6251      	str	r1, [r2, #36]	; 0x24
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <USART_TransmitReceive_IT+0xa0>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c8a:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d051      	beq.n	8003d3a <USART_TransmitReceive_IT+0x14e>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d14a      	bne.n	8003d3a <USART_TransmitReceive_IT+0x14e>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cac:	d117      	bne.n	8003cde <USART_TransmitReceive_IT+0xf2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d113      	bne.n	8003cde <USART_TransmitReceive_IT+0xf2>
        {
           pdata8bits  = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
           pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	60bb      	str	r3, [r7, #8]
           *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	801a      	strh	r2, [r3, #0]
           husart->pRxBuffPtr += 2U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	1c9a      	adds	r2, r3, #2
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cdc:	e026      	b.n	8003d2c <USART_TransmitReceive_IT+0x140>
        }
        else
        {
          pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	60fb      	str	r3, [r7, #12]
          pdata16bits  = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60bb      	str	r3, [r7, #8]
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf0:	d007      	beq.n	8003d02 <USART_TransmitReceive_IT+0x116>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <USART_TransmitReceive_IT+0x124>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <USART_TransmitReceive_IT+0x124>
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e008      	b.n	8003d22 <USART_TransmitReceive_IT+0x136>
          }
          else
          {
            *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d120      	bne.n	8003d86 <USART_TransmitReceive_IT+0x19a>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0220 	bic.w	r2, r2, #32
 8003d52:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d62:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fdfd 	bl	800397c <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e002      	b.n	8003d8c <USART_TransmitReceive_IT+0x1a0>
    }

    return HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e000      	b.n	8003d8c <USART_TransmitReceive_IT+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020c 	bic.w	r2, r2, #12
 8003dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003dc8:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003df6:	f023 030c 	bic.w	r3, r3, #12
 8003dfa:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
   */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e28:	615a      	str	r2, [r3, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
  if((husart->Instance == USART1))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a53      	ldr	r2, [pc, #332]	; (8003f7c <USART_SetConfig+0x1e8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d14f      	bne.n	8003ed4 <USART_SetConfig+0x140>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e34:	f7ff fbfe 	bl	8003634 <HAL_RCC_GetPCLK2Freq>
 8003e38:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009a      	lsls	r2, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	0119      	lsls	r1, r3, #4
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003e72:	fba3 0302 	umull	r0, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	2064      	movs	r0, #100	; 0x64
 8003e7a:	fb00 f303 	mul.w	r3, r0, r3
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	3332      	adds	r3, #50	; 0x32
 8003e84:	4a3e      	ldr	r2, [pc, #248]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003e92:	4419      	add	r1, r3
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009a      	lsls	r2, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eaa:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003eac:	fba3 0302 	umull	r0, r3, r3, r2
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	2064      	movs	r0, #100	; 0x64
 8003eb4:	fb00 f303 	mul.w	r3, r0, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	3332      	adds	r3, #50	; 0x32
 8003ebe:	4a30      	ldr	r2, [pc, #192]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	f003 020f 	and.w	r2, r3, #15
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	440a      	add	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
}
 8003ed2:	e04e      	b.n	8003f72 <USART_SetConfig+0x1de>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ed4:	f7ff fb9a 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 8003ed8:	60b8      	str	r0, [r7, #8]
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009a      	lsls	r2, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	0119      	lsls	r1, r3, #4
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009a      	lsls	r2, r3, #2
 8003f04:	441a      	add	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003f12:	fba3 0302 	umull	r0, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2064      	movs	r0, #100	; 0x64
 8003f1a:	fb00 f303 	mul.w	r3, r0, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	3332      	adds	r3, #50	; 0x32
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8003f32:	4419      	add	r1, r3
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009a      	lsls	r2, r3, #2
 8003f3e:	441a      	add	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003f4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2064      	movs	r0, #100	; 0x64
 8003f54:	fb00 f303 	mul.w	r3, r0, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	3332      	adds	r3, #50	; 0x32
 8003f5e:	4a08      	ldr	r2, [pc, #32]	; (8003f80 <USART_SetConfig+0x1ec>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	440a      	add	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	51eb851f 	.word	0x51eb851f

08003f84 <malloc>:
 8003f84:	4b02      	ldr	r3, [pc, #8]	; (8003f90 <malloc+0xc>)
 8003f86:	4601      	mov	r1, r0
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f000 b823 	b.w	8003fd4 <_malloc_r>
 8003f8e:	bf00      	nop
 8003f90:	20000078 	.word	0x20000078

08003f94 <sbrk_aligned>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4e0e      	ldr	r6, [pc, #56]	; (8003fd0 <sbrk_aligned+0x3c>)
 8003f98:	460c      	mov	r4, r1
 8003f9a:	6831      	ldr	r1, [r6, #0]
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	b911      	cbnz	r1, 8003fa6 <sbrk_aligned+0x12>
 8003fa0:	f000 f8ac 	bl	80040fc <_sbrk_r>
 8003fa4:	6030      	str	r0, [r6, #0]
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 f8a7 	bl	80040fc <_sbrk_r>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d00a      	beq.n	8003fc8 <sbrk_aligned+0x34>
 8003fb2:	1cc4      	adds	r4, r0, #3
 8003fb4:	f024 0403 	bic.w	r4, r4, #3
 8003fb8:	42a0      	cmp	r0, r4
 8003fba:	d007      	beq.n	8003fcc <sbrk_aligned+0x38>
 8003fbc:	1a21      	subs	r1, r4, r0
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f89c 	bl	80040fc <_sbrk_r>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d101      	bne.n	8003fcc <sbrk_aligned+0x38>
 8003fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8003fcc:	4620      	mov	r0, r4
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	2000013c 	.word	0x2000013c

08003fd4 <_malloc_r>:
 8003fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fd8:	1ccd      	adds	r5, r1, #3
 8003fda:	f025 0503 	bic.w	r5, r5, #3
 8003fde:	3508      	adds	r5, #8
 8003fe0:	2d0c      	cmp	r5, #12
 8003fe2:	bf38      	it	cc
 8003fe4:	250c      	movcc	r5, #12
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	4607      	mov	r7, r0
 8003fea:	db01      	blt.n	8003ff0 <_malloc_r+0x1c>
 8003fec:	42a9      	cmp	r1, r5
 8003fee:	d905      	bls.n	8003ffc <_malloc_r+0x28>
 8003ff0:	230c      	movs	r3, #12
 8003ff2:	2600      	movs	r6, #0
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80040d0 <_malloc_r+0xfc>
 8004000:	f000 f868 	bl	80040d4 <__malloc_lock>
 8004004:	f8d8 3000 	ldr.w	r3, [r8]
 8004008:	461c      	mov	r4, r3
 800400a:	bb5c      	cbnz	r4, 8004064 <_malloc_r+0x90>
 800400c:	4629      	mov	r1, r5
 800400e:	4638      	mov	r0, r7
 8004010:	f7ff ffc0 	bl	8003f94 <sbrk_aligned>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	4604      	mov	r4, r0
 8004018:	d155      	bne.n	80040c6 <_malloc_r+0xf2>
 800401a:	f8d8 4000 	ldr.w	r4, [r8]
 800401e:	4626      	mov	r6, r4
 8004020:	2e00      	cmp	r6, #0
 8004022:	d145      	bne.n	80040b0 <_malloc_r+0xdc>
 8004024:	2c00      	cmp	r4, #0
 8004026:	d048      	beq.n	80040ba <_malloc_r+0xe6>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	4631      	mov	r1, r6
 800402c:	4638      	mov	r0, r7
 800402e:	eb04 0903 	add.w	r9, r4, r3
 8004032:	f000 f863 	bl	80040fc <_sbrk_r>
 8004036:	4581      	cmp	r9, r0
 8004038:	d13f      	bne.n	80040ba <_malloc_r+0xe6>
 800403a:	6821      	ldr	r1, [r4, #0]
 800403c:	4638      	mov	r0, r7
 800403e:	1a6d      	subs	r5, r5, r1
 8004040:	4629      	mov	r1, r5
 8004042:	f7ff ffa7 	bl	8003f94 <sbrk_aligned>
 8004046:	3001      	adds	r0, #1
 8004048:	d037      	beq.n	80040ba <_malloc_r+0xe6>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	442b      	add	r3, r5
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	f8d8 3000 	ldr.w	r3, [r8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d038      	beq.n	80040ca <_malloc_r+0xf6>
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	42a2      	cmp	r2, r4
 800405c:	d12b      	bne.n	80040b6 <_malloc_r+0xe2>
 800405e:	2200      	movs	r2, #0
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	e00f      	b.n	8004084 <_malloc_r+0xb0>
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	1b52      	subs	r2, r2, r5
 8004068:	d41f      	bmi.n	80040aa <_malloc_r+0xd6>
 800406a:	2a0b      	cmp	r2, #11
 800406c:	d917      	bls.n	800409e <_malloc_r+0xca>
 800406e:	1961      	adds	r1, r4, r5
 8004070:	42a3      	cmp	r3, r4
 8004072:	6025      	str	r5, [r4, #0]
 8004074:	bf18      	it	ne
 8004076:	6059      	strne	r1, [r3, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	bf08      	it	eq
 800407c:	f8c8 1000 	streq.w	r1, [r8]
 8004080:	5162      	str	r2, [r4, r5]
 8004082:	604b      	str	r3, [r1, #4]
 8004084:	4638      	mov	r0, r7
 8004086:	f104 060b 	add.w	r6, r4, #11
 800408a:	f000 f829 	bl	80040e0 <__malloc_unlock>
 800408e:	f026 0607 	bic.w	r6, r6, #7
 8004092:	1d23      	adds	r3, r4, #4
 8004094:	1af2      	subs	r2, r6, r3
 8004096:	d0ae      	beq.n	8003ff6 <_malloc_r+0x22>
 8004098:	1b9b      	subs	r3, r3, r6
 800409a:	50a3      	str	r3, [r4, r2]
 800409c:	e7ab      	b.n	8003ff6 <_malloc_r+0x22>
 800409e:	42a3      	cmp	r3, r4
 80040a0:	6862      	ldr	r2, [r4, #4]
 80040a2:	d1dd      	bne.n	8004060 <_malloc_r+0x8c>
 80040a4:	f8c8 2000 	str.w	r2, [r8]
 80040a8:	e7ec      	b.n	8004084 <_malloc_r+0xb0>
 80040aa:	4623      	mov	r3, r4
 80040ac:	6864      	ldr	r4, [r4, #4]
 80040ae:	e7ac      	b.n	800400a <_malloc_r+0x36>
 80040b0:	4634      	mov	r4, r6
 80040b2:	6876      	ldr	r6, [r6, #4]
 80040b4:	e7b4      	b.n	8004020 <_malloc_r+0x4c>
 80040b6:	4613      	mov	r3, r2
 80040b8:	e7cc      	b.n	8004054 <_malloc_r+0x80>
 80040ba:	230c      	movs	r3, #12
 80040bc:	4638      	mov	r0, r7
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	f000 f80e 	bl	80040e0 <__malloc_unlock>
 80040c4:	e797      	b.n	8003ff6 <_malloc_r+0x22>
 80040c6:	6025      	str	r5, [r4, #0]
 80040c8:	e7dc      	b.n	8004084 <_malloc_r+0xb0>
 80040ca:	605b      	str	r3, [r3, #4]
 80040cc:	deff      	udf	#255	; 0xff
 80040ce:	bf00      	nop
 80040d0:	20000138 	.word	0x20000138

080040d4 <__malloc_lock>:
 80040d4:	4801      	ldr	r0, [pc, #4]	; (80040dc <__malloc_lock+0x8>)
 80040d6:	f000 b84b 	b.w	8004170 <__retarget_lock_acquire_recursive>
 80040da:	bf00      	nop
 80040dc:	2000027c 	.word	0x2000027c

080040e0 <__malloc_unlock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	; (80040e8 <__malloc_unlock+0x8>)
 80040e2:	f000 b846 	b.w	8004172 <__retarget_lock_release_recursive>
 80040e6:	bf00      	nop
 80040e8:	2000027c 	.word	0x2000027c

080040ec <memset>:
 80040ec:	4603      	mov	r3, r0
 80040ee:	4402      	add	r2, r0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d100      	bne.n	80040f6 <memset+0xa>
 80040f4:	4770      	bx	lr
 80040f6:	f803 1b01 	strb.w	r1, [r3], #1
 80040fa:	e7f9      	b.n	80040f0 <memset+0x4>

080040fc <_sbrk_r>:
 80040fc:	b538      	push	{r3, r4, r5, lr}
 80040fe:	2300      	movs	r3, #0
 8004100:	4d05      	ldr	r5, [pc, #20]	; (8004118 <_sbrk_r+0x1c>)
 8004102:	4604      	mov	r4, r0
 8004104:	4608      	mov	r0, r1
 8004106:	602b      	str	r3, [r5, #0]
 8004108:	f7fd faee 	bl	80016e8 <_sbrk>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d102      	bne.n	8004116 <_sbrk_r+0x1a>
 8004110:	682b      	ldr	r3, [r5, #0]
 8004112:	b103      	cbz	r3, 8004116 <_sbrk_r+0x1a>
 8004114:	6023      	str	r3, [r4, #0]
 8004116:	bd38      	pop	{r3, r4, r5, pc}
 8004118:	20000278 	.word	0x20000278

0800411c <__errno>:
 800411c:	4b01      	ldr	r3, [pc, #4]	; (8004124 <__errno+0x8>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000078 	.word	0x20000078

08004128 <__libc_init_array>:
 8004128:	b570      	push	{r4, r5, r6, lr}
 800412a:	2600      	movs	r6, #0
 800412c:	4d0c      	ldr	r5, [pc, #48]	; (8004160 <__libc_init_array+0x38>)
 800412e:	4c0d      	ldr	r4, [pc, #52]	; (8004164 <__libc_init_array+0x3c>)
 8004130:	1b64      	subs	r4, r4, r5
 8004132:	10a4      	asrs	r4, r4, #2
 8004134:	42a6      	cmp	r6, r4
 8004136:	d109      	bne.n	800414c <__libc_init_array+0x24>
 8004138:	f000 f82a 	bl	8004190 <_init>
 800413c:	2600      	movs	r6, #0
 800413e:	4d0a      	ldr	r5, [pc, #40]	; (8004168 <__libc_init_array+0x40>)
 8004140:	4c0a      	ldr	r4, [pc, #40]	; (800416c <__libc_init_array+0x44>)
 8004142:	1b64      	subs	r4, r4, r5
 8004144:	10a4      	asrs	r4, r4, #2
 8004146:	42a6      	cmp	r6, r4
 8004148:	d105      	bne.n	8004156 <__libc_init_array+0x2e>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004150:	4798      	blx	r3
 8004152:	3601      	adds	r6, #1
 8004154:	e7ee      	b.n	8004134 <__libc_init_array+0xc>
 8004156:	f855 3b04 	ldr.w	r3, [r5], #4
 800415a:	4798      	blx	r3
 800415c:	3601      	adds	r6, #1
 800415e:	e7f2      	b.n	8004146 <__libc_init_array+0x1e>
 8004160:	08004440 	.word	0x08004440
 8004164:	08004440 	.word	0x08004440
 8004168:	08004440 	.word	0x08004440
 800416c:	08004444 	.word	0x08004444

08004170 <__retarget_lock_acquire_recursive>:
 8004170:	4770      	bx	lr

08004172 <__retarget_lock_release_recursive>:
 8004172:	4770      	bx	lr

08004174 <memcpy>:
 8004174:	440a      	add	r2, r1
 8004176:	4291      	cmp	r1, r2
 8004178:	f100 33ff 	add.w	r3, r0, #4294967295
 800417c:	d100      	bne.n	8004180 <memcpy+0xc>
 800417e:	4770      	bx	lr
 8004180:	b510      	push	{r4, lr}
 8004182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004186:	4291      	cmp	r1, r2
 8004188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800418c:	d1f9      	bne.n	8004182 <memcpy+0xe>
 800418e:	bd10      	pop	{r4, pc}

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
