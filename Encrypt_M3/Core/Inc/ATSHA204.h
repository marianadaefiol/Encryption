/*
 * ATSHA204.h
 *
 *  Created on: 24 de abr de 2023
 *      Author: oriongames
 */

#ifndef INC_ATSHA204_H_
#define INC_ATSHA204_H_

#include "stm32f1xx_hal.h"

// Geral
#define I2C_ADDRESS 						0xC8 	// Endereço I2C do ATSHA204A
#define SERIAL_NUMBER_SIZE 		9 			// Tamanho do número de série do ATSHA204A
#define KEY_SIZE 								32 		// Tamanho da chave criptográfica gerada
#define ZONE_ACCCONF_SIZE 		4 			// Tamanho da zona de configuração
#define PUBLIC_KEY_SIZE 				64 		// Tamanho da chave pública gerada

// Geral
#define COMMAND 							0x03
#define SIZE_WRITE_GERAL				0x07
#define SIZE_WRITE_DATA				0x27
#define SIZE_WRITE_OTP					0x0A
#define SIZE_WRITE_CONFIG			0x0B
#define SIZE_BLOCK_CONFIG			0x07
#define SIZE_WRITE_NONCE20		0x1B
#define SIZE_WRITE_NONCE32		0x27
#define SIZE_WRITE_GENDIG			0x07
#define ZONE_CONFIG_LOCK 			0x00
#define ZONE_DATA_LOCK 				0x81
#define ZONE_DATA_READ         	0x82

#define SHA_INIT								0x00
#define SHA_COMPUTE 					0x01

// Definir os códigos de comando do ATSHA204A
#define COMMAND_CHECKMAC		0x28
#define COMMAND_DERIVE_KEY      0x1C
#define COMMAND_INFO            		0x30
#define COMMAND_GENKEY          	0x40
#define COMMAND_GENDIG         	 	0x15
#define COMMAND_LOCK           	 	0x17
#define COMMAND_MAC            	 	0x08
#define COMMAND_CHECKMAC       0x28
#define COMMAND_NONCE           	0x16
#define COMMAND_PAUSE           		0x01
#define COMMAND_RANDOM          0x1B
#define COMMAND_READ            		0x02
#define COMMAND_SHA             		0x47
#define COMMAND_UP_EXTRA    		0x20
#define COMMAND_WRITE           		0x12

#define NONCE_MODE0 						0x00
#define NONCE_MODE1 						0x01
#define NONCE_MODE3 						0x03

// Definir os códigos de zonas do ATSHA204A
#define ZONE_CONFIG 						0x00 	 // Zona de configuração
#define ZONE_OTP								0x01	 // Zona OTP
#define ZONE_DATA 							0x02 	 // Zona de dados

// Definir as configurações de slot do ATSHA204A
#define SLOT_CONFIG_SECRET      	0x03 		// Configuração de slot para chave secreta
#define SLOT_CONFIG_WR_ONLY  0x06 		// Configuração de slot para escrita somente

// Definir as configurações de bloqueio de zona do ATSHA204A
#define ZONE_LOCK_CONF_LOCKED 		0x55 		// Zona bloqueada
#define ZONE_LOCK_CONF_UNLOCKED 	0x00 		// Zona desbloqueada

#define READ_WRITE_32			0x80
#define READ_WRITE_4			0x00

void atCRC(uint8_t *data, uint8_t size, uint8_t *crc_le);

void WakeUp(uint8_t *receiv);
void ReadConfig(uint8_t *data, uint16_t size, uint8_t *receiv) ;
void WriteConfigZone(void);
void BlockConfigZone(uint8_t *receiv);
void WriteDataZone(void);
void WriteOTPZone(void);
void BlockDataZone(void);
void ReadDataZone(uint8_t *data, uint16_t size, uint8_t *receiv);

void CommandNonce(uint8_t *NumIn, uint16_t size, uint8_t *receiv);
void GendigCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t size, uint8_t *receiv);
void MacCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint16_t size, uint8_t *receiv);
void CheckMacCommand(uint8_t SlotID_LSB, uint8_t SlotID_MSB, uint8_t *ClientResp, uint16_t size, uint8_t *receiv);

void SHACommandInit(uint16_t size, uint8_t *receiv);
void SHACommandCompute(uint8_t *data, uint8_t size, uint8_t *receiv);

void TempKeyGen(uint8_t *data, uint8_t *NumIn, uint8_t mode, uint8_t size_in, uint8_t size_out, uint8_t *receive);
//void sha204c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc) ;

void ReadEncript(uint8_t *readEncript, uint16_t size, uint8_t *data);
void WriteEncript(void);
#endif /* INC_ATSHA204_H_ */

/*
 * uint8_t WritePwd1[] =	{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04,
					 	 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09};
uint8_t ReadPwd1[] =	{0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x10, 0x11, 0x12, 0x13, 0x14,
					 	 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19};
uint8_t DATA0[] =		{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24,
				     	 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29};
uint8_t DATA1[] =		{0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x30, 0x31, 0x32, 0x33, 0x34,
					 	 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39};
uint8_t PASSWORD1[] =	{0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44,
					 	 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49};
uint8_t SECRET1[] =		{0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54,
						 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59};
uint8_t PASSWORD2[] =	{0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x60, 0x61, 0x62, 0x63, 0x64,
					  	 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69};
uint8_t SECRET2[] =		{0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x70, 0x71, 0x72, 0x73, 0x74,
						 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79};
uint8_t ReadPwd2[] = 	{0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x80, 0x81, 0x82, 0x83, 0x84,
		 	 	 	 	 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89};
uint8_t WritePwd2[] = 	{0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x90, 0x91, 0x92, 0x93, 0x94,
						 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99};
uint8_t DATA2[] = 		{0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4,
						 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9};
uint8_t DATA3[] = 		{0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4,
						 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9};
uint8_t PASSWORD3[] =	{0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4,
						 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9};
uint8_t SECRET3[] =		{0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4,
						 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9};
uint8_t MASTERKEY[] =	{0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4,
						 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9};
uint8_t DATA4[] = 		{0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4,
						 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9};
 */
